((3) 0 () 51 ((p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2021-09-29-sabloom.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2012-02-16-emulating-digital-logic-circuits-in-f.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2018-01-01-reversing-1.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2013-12-15-sqlprovider-sqlite-support-(experimental).markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-02-01-fun-with-a-toy-robotic-arm!.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2013-12-24-sql-provider-new-stuff-including-postgresql-support-and-option-types!.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-01-17-visualizing-linq-with-grahviz.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-07-03-2048-\342\200\223-type-provider-edition.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2012-04-25-pezhack\342\200\223a-functional-roguelike.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2012-04-25-getting-at-non-public-property-setters-in-a-nice-way-).markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-04-17-solving-puzzle-quest-with-f-part-1.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2017-08-04-scurry-racket.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2017-08-10-scurry-lexical-and-application.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2019-04-23-fairylog-mux.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2013-07-04-last-fi.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2020-07-25-ramp-gen-1.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2021-04-04-bakunawa.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2018-09-17-c64-sprite-previewer.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2018-01-31-fixed-memory-pool.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2016-08-23-don-syme-20-cow-herding-edtion-type-provider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2015-03-01-introducing-the-mixin-type-provider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-02-01-the-amazing-squirrelify-type-provider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2013-07-29-choose-your-own-adventure-type-provider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2013-12-09-the-erasing-sql-type-provider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2015-02-08-secret-santa-challenge-in-d.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2017-05-30-asi64.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2012-12-30-microsoft-dynamics-crm-type-provider-preview.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2013-03-02-f-meets-the-raspberry-pi-.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-02-02-the-minesweeper-type-provider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-02-21-the-don-syme-type-provider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2017-01-19-star-wars-rogue-one-type-provider-edition.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2017-01-14-programming-in-racket-1.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2019-04-17-fairylog-nes.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2012-02-12-a-basic-guide-to-f-functional-techniques-part-1.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2012-12-01-monads-to-help-with-com-cleanup.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2012-07-13-pezhack\342\200\223abstracting-flow-control-with-monads.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2009-07-14-john-the-birth!.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2019-07-21-reversing-3.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2019-05-08-reversing-2.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2009-07-14-john-meeting-nintendo!.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2009-07-14-john-some-basics.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-06-11-some-of-my-favourite-tech-books!.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2015-01-23-enigma-machine-\342\200\223-type-provider-edition.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-12-24-the-north-pole-type-provider-escape-from-santa\342\200\231s-grotto!.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-05-18-crud-operations-and-experimental-odbc-support-in-the-sqlprovider.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2014-05-01-basic\342\200\231s-50th-anniversary-\342\200\246-and-more-crazy-f-type-providers!.markdown" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2018-11-21-c64-remote-programmer.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2018-10-05-c64-state-machine.md" . windows) (u . "") (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2017-02-28-c64-programming-invader-fractal.md" . windows) (p+ #"C:\\repos\\pezipink.github.io\\_src\\posts\\2017-03-31-c64-programming-invader-fractal-2.md" . windows)) () (h ! (equal) ((? . 0) f post (u . "Reversing - SabloomText_v6") (? . 0) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2021/09/29/reversing-sabloomtext-v6/index.html" . windows) (u . "/blog\\2021\\09\\29\\reversing-sabloomtext-v6/") (u . "2021-09-29T14:14:43") (? . 16) #f (c (u . "cracking") c (u . "reverse engineering")) (u . "\n<p>Today we look at another crackme, SabloomText_v6!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/serial.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The difficulty is rated at level 4.8 of 6 - I think perhaps it was more like a 4.</p>\n\n<p>I am not going to say anything about it in this section as it would spoil a cool surprise if you want to try it yourself!</p>\n\n<p>Here is the link if you want to try it <a href=\"https://crackmes.one/crackme/60be2ad433c5d410b8842c95\">Sabloom Text 6</a></p>\n\n<p>Tools used today are x64dbg, PEStudio, F# and C++</p>\n\n<p>(Apologies for the low quality pictures, I messed them up)</p>") #t (u . "\n<p>Today we look at another crackme, SabloomText_v6!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/serial.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The difficulty is rated at level 4.8 of 6 - I think perhaps it was more like a 4.</p>\n\n<p>I am not going to say anything about it in this section as it would spoil a cool surprise if you want to try it yourself!</p>\n\n<p>Here is the link if you want to try it <a href=\"https://crackmes.one/crackme/60be2ad433c5d410b8842c95\">Sabloom Text 6</a></p>\n\n<p>Tools used today are x64dbg, PEStudio, F# and C++</p>\n\n<p>(Apologies for the low quality pictures, I messed them up)</p>\n<!-- more-->\n\n<h2 id=\"first-impressions\">First Impressions</h2>\n\n<p>As usual, we inspect the binary in PEStudio - it reveals a C++ program with some linked GUI libraries. Nothing striking or out of the ordinary here.</p>\n\n<p>Let&rsquo;s run the program and see what we have:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/serial.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>A fully functioning text editor, complete with the ability to change the font! It is obviously modelled on Sublime Text, and the problem is of course to work out a username and password to &ldquo;register&rdquo; this piece of software!</p>\n\n<h2 id=\"looking-inside\">Looking Inside</h2>\n\n<p>Attempting to launch the program with the debugger fails. The <code>IsDebuggerPresent</code> function is imported but it does not seem to be used anywhere. Other usual suspects such as <code>NtQueryInformationProcess</code> <code>OutputDebugString</code> and friends are also not present.</p>\n\n<p>Another common way to detect if the debugger is present is to check the <code>DebuggerPresent</code> flag in <a href=\"https://en.wikipedia.org/wiki/Process_Environment_Block\">PEB</a> block which we can find at <code>[fs:30] + 2</code>. We can use a hardware breakpoint at this location to pause execution when something reads this memory. This leads to the follow piece of anti-debugging code</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/AntiDebug1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Which we can neutralise</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/AntiDebug2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>After this patch, the program is able to start with the debugger. I did discover another similar check later in the code, though it did not cause any trouble.</p>\n\n<p>The next task is to find where the username and serial are being checked. To do this I searched for the <code>GetDlgItemText</code> functions, since they are often used to read from input boxes. This led me straight to the following code that performs the serial check:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/DlgTxt.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>All easy so far, let&rsquo;s have a look at the checking function!</p>\n\n<h2 id=\"the-real-work-begins\">The Real Work Begins</h2>\n\n<p>First the code checks the username is 6 characters long. At this point it doesn&rsquo;t do anything else with it. The program then allocates two blocks of memory, sized <code>0x1081</code> and <code>0x37</code></p>\n\n<p>Then follows a ton of code that performs some processing loops of the password and this set of magic numbers, writing the results into one of the allocated memory blocks.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/magic1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This is a zoomed-out picture of some of the code</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/passwordLong.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>As you can see, it is quite long. The code was quite obsfucated and was doing something simple; essentially this:</p>\n\n<div class=\"brush: C\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">0x37</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">passwordLength</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">scratch</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">password</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Several obsfucation techniques have been used. Firstly, instead of a loop with a single index, it uses six different indexes at the same time. They are calcuated by first storing negative offsets from the allocated memory blocks, then restoring them at the point they are needed. It also uses some negative indexes for the array pointers and other things to keep you confused. Knowing now the author likes to obsfucate things, we can expect more in the future.</p>\n\n<p>The next thing the program does is access another set of magic numbers, and for each one it shifts out each bit and stores them in their own byte within the larger section of allocated memory. The code that does this work is also fairly obsfucated using some techniques such as multiple pointers with 3 nested loops and annoying usage of the first 8 / 16 bits of the registers.</p>\n\n<p>The resulting memory is a large array of 0s and 1s</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/maze1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>One thing I did notice whilst reversing this lot is that it seems to treat the magic numbers in groups of 64 each. Before proceeding I decided to re-implement the code in F# and do some analysis / visualisation / playing with it.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">MazeSection</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wall</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Passage</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Goal</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">encodedMaze</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"w\"> </span><span class=\"o\">|]</span><span class=\"w\">  </span><span class=\"c1\">// too long to show</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">magic</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[||]</span><span class=\"w\"> </span><span class=\"c1\">// too long to show</span>\n\n<span class=\"c1\">// expand into an array of bits </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">byteToBits</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"c1\">// the maze is split into 65 rows of 9 bytes each, where the 9th byte is padding.</span>\n<span class=\"c1\">// remove the padding bytes and explode each byte into bits</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">maze</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">encodedMaze</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">mapi</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">snd</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">byteToBits</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Passage</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span><span class=\"o\">)</span>\n\n<span class=\"n\">maze</span><span class=\"o\">.[</span><span class=\"mi\">63</span><span class=\"o\">*</span><span class=\"mi\">64</span><span class=\"o\">+</span><span class=\"mi\">63</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"w\"> </span><span class=\"c1\">// this is the goal at the bottom right (63,63)</span>\n\n<span class=\"c1\">// draw maze</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">mutable</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">maze</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"s\">\"##\"</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Passage</span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"s\">\"..\"</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"s\">\"GG\"</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">63</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">        </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/maze2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>It&rsquo;s a maze!</p>\n\n<h2 id=\"amazing\">Amazing</h2>\n\n<p>This was quite a revelation! At this point I had to dig a bit further into the code to make sure it was actually a maze, and how it worked. Presumably the solution then is some encoded instructions to solving the maze - to do that I would need to know the start and end points of the maze. These turned out to be (1,1) and (63,63) respectively. To encode the instructions we&rsquo;ll need to understand exactly how the program tries to solve the maze from the decoded password - but first let&rsquo;s solve the maze!</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">maze</span><span class=\"o\">.[</span><span class=\"mi\">63</span><span class=\"o\">*</span><span class=\"mi\">64</span><span class=\"o\">+</span><span class=\"mi\">63</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"w\"> </span><span class=\"c1\">// this is the goal at the bottom right (63,63)</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getCell</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"c1\">// if we go out of bounds then return Wall</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">maze</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"o\">]</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Direction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span>\n\n<span class=\"c1\">// we always move in twos</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">canMove</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getCandidates</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Up</span><span class=\"o\">;</span><span class=\"n\">Down</span><span class=\"o\">;</span><span class=\"n\">Left</span><span class=\"o\">;</span><span class=\"n\">Right</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">canMove</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"c1\">// recursively traverse the maze until we get to the goal</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">solveMaze</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">getCell</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">seen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">seen</span>\n<span class=\"w\">    </span><span class=\"n\">getCandidates</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">tryPick</span><span class=\"o\">(</span><span class=\"k\">function</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">solveMaze</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">solveMaze</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">solveMaze</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">solveMaze</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"o\">))</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">solution</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">solveMaze</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"o\">).</span><span class=\"n\">Value</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here we use a simple brute-force recursive backtracking maze solver to walk the maze and find a path to the goal. Some details here were extracted from the reverse engineering of the maze algorithm - mainly that it always takes 2 steps in a given direction.</p>\n\n<h2 id=\"maze-algorithm\">Maze Algorithm</h2>\n\n<p>To encode the solution path correctly, we need to know the instruction format. Of course, this was not straight forward and bogged down with some more obsfucated code. Essentially the program takes the decoded password and &ldquo;explodes out&rdquo; the bits like it did for the maze itself. Then, it processes the sequence of ones and zeroes in a modulo 3 fashion:</p>\n\n<ul>\n <li>0 : Keep moving the same direction as last time</li>\n <li>11 : Change the current direction + 1 mod 3</li>\n <li>10 : Change the current direction &ndash; 1 mod 3</li></ul>\n\n<p>Where the directions are</p>\n\n<ul>\n <li>1 : Right</li>\n <li>2 : Down</li>\n <li>3 : Left</li>\n <li>4 : Up</li></ul>\n\n<p>This is quite clever based on an observation that although there&rsquo;s four directions, you only ever need three since you never need to go backwards, and three can be encoded in two bits. Notice that if the current byte is not zero, it needs to lookahead one - this makes it a little bit of a pain to generate.</p>\n\n<p>The code itself was quite long and featured a bunch of obsfucation tricks - in addition to the ones already encountered it also used some indirect jumps and other shenanigans:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/weird1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here&rsquo;s a bunch of code that was reading the realtime clock stamp, that was later used to invalidate the password if too long had been taken, in addition to another anti-debugging check. (I think - this code was never a problem)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/sabloom/rtsc.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>So, to generate the correct solution we first have to take our solution path and generate the correct set of 0s and 1s as per the instruction format above. Then, we need to take those bits and turn them into full bytes. The resulting set of numbers can be XOR&rsquo;d in sequence with the original set of magic numbers which should yield us the correct key - presumably it must be engineered to result as ascii, otherwise we won&rsquo;t be able to input it into the text box.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// now we need to encode it back as a bunch of bytes. this is a bit tricky.</span>\n<span class=\"c1\">// if the direction is the same we emit a 0 bit.  If it is different then </span>\n<span class=\"c1\">// we emit 11 to move to the next direction, and 10 to move to the previous </span>\n<span class=\"c1\">// direction where the order is 1 = right, 2 = down, 3 = left, 4 = up</span>\n<span class=\"c1\">// we can do this with some ints but there&#39;s only a few cases so we&#39;ll just write</span>\n<span class=\"c1\">// them out explictly</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getBits</span><span class=\"w\"> </span><span class=\"n\">oldDirection</span><span class=\"w\"> </span><span class=\"n\">newDirection</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">oldDirection</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">newDirection</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">oldDirection</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">newDirection</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Left</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">generateBytes</span><span class=\"w\"> </span><span class=\"n\">currentByte</span><span class=\"w\"> </span><span class=\"n\">currentBit</span><span class=\"w\"> </span><span class=\"n\">outputBytes</span><span class=\"w\"> </span><span class=\"n\">inputBits</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">inputBits</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">outputBytes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">by</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">currentByte</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">currentBit</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">currentBit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"n\">generateBytes</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">outputBytes</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">t</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">generateBytes</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">currentBit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">outputBytes</span><span class=\"w\"> </span><span class=\"n\">t</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">bits</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">((</span><span class=\"n\">Right</span><span class=\"o\">,</span><span class=\"bp\">[]</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">solution</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">// an extra right here, the algo needs an extra 0 to get started</span>\n<span class=\"w\">    </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"o\">,</span><span class=\"n\">acc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">getBits</span><span class=\"w\"> </span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">snd</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generateBytes</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"n\">bits</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">chars</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">mapi</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">magic</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">^^^</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This yields is the key <code>zh3r0{mAzes_w3Re_1nv3nteD_by_EgyptianS_cb3c82b9}zh3r0{</code></p>\n\n<h1 id=\"finishing-up\">Finishing Up</h1>\n\n<p>Inspecting the rest of the code yields some extra tricks as outlined above, with RTSC and more debugger checks. It also looks at the username, where a couple of the characters are explicty hardcoded, and the others reference some of the values from the password. The username is easily determined as <code>X3eR0o</code>, the author of the crackme. And a fantastic job they did of it!</p>")) ((? . 1) f post (u . "Emulating digital logic circuits in F#") (? . 1) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2012/02/16/emulating-digital-logic-circuits-in-f/index.html" . windows) (u . "/blog\\2012\\02\\16\\emulating-digital-logic-circuits-in-f/") (u . "2012-02-16T00:13:00") (? . 33) (? . 9) (c (u . "digital logic") c (u . "electronics") c (u . "fsharp")) (u . "\n<p>In this article we will discover how to emulate simple logic gates, and then build them up to form more complex circuits. By the end of this 2-part article (edit - not that I ever wrote part 2) we will have created:</p>\n\n<ul>\n <li>- <strong>Half-bit adder</strong></li>\n <li>- <strong>Full adder</strong></li>\n <li>- <strong>n-bit ripple carry adder</strong> formed from full adders</li>\n <li>- <strong>4:1 line decoder</strong></li>\n <li>- <strong>4:1 multiplexer</strong></li>\n <li>- <strong>1 bit ALU</strong> that supports addition, subtraction, AND and OR operations</li>\n <li>- <strong>n-bit ALU</strong> formed from 1 bit ALUs</li></ul>") #t (u . "\n<p>In this article we will discover how to emulate simple logic gates, and then build them up to form more complex circuits. By the end of this 2-part article (edit - not that I ever wrote part 2) we will have created:</p>\n\n<ul>\n <li>- <strong>Half-bit adder</strong></li>\n <li>- <strong>Full adder</strong></li>\n <li>- <strong>n-bit ripple carry adder</strong> formed from full adders</li>\n <li>- <strong>4:1 line decoder</strong></li>\n <li>- <strong>4:1 multiplexer</strong></li>\n <li>- <strong>1 bit ALU</strong> that supports addition, subtraction, AND and OR operations</li>\n <li>- <strong>n-bit ALU</strong> formed from 1 bit ALUs</li></ul>\n<!-- more-->\n\n<p>I have a great love of electronics, and everything covered in this article I have at some point built from scratch, starting from building logic gates from transistors and diodes. unfortunately my present life dictates I should have no time for electronics, digital logic and robotics, although you can have a brief glimpse of what I used to get up to a long time ago in some other blog posts on this site (which were reposted years later onto this blog). The love stays strong though, and because of that I decided to re-create some logic simulations in my favourite language F#.</p>\n\n<p>You are expected to know F# pretty well, there won't be anything too mind-blowing here though. I am not going to teach the ins and outs of digital logic either, but I will give a brief rundown on how the stuff works and provide schematics or all the circuits that we emulate. You should understand pattern matching, recursion and list processing along with all the basic F# syntax. What we emulate here is the basis for all modern processors, and in future article we may see how this can be extended to create your own rudimentary computer processor!!</p>\n\n<p><em>Note: There are better and more complex ways to represent and prove circuits using propositional logic, quantified boolean formulae and binary decision diagrams which stem from the symbolic representation of a finite input space. You can read about these techniques in the mind-blowing Expert F# book. This article shows a simple, hands-on way to mess around with some logic gates and is aimed at a less advanced functional audience.</em></p>\n\n<p><em>Disclaimer : I don't claim to be a master at functional programming, F#, or processor architecture and logic design! Everything I know is self taught.</em></p>\n\n<p>With my lame excuses out of the way, let's start with basic logic gate representation. A natural way to do this in F# is to use a recursive discriminated union, however I am not going to be doing that here, instead I am going to concentrate on using just functions. First lets recap on the digital logic gates and the symbols that represent them on a schematic.</p>\n\n<p style=\"text-align: center;\"><img src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-15+at+15.39.26.png\" alt=\"\" /></p>\n\n<p>I'm sure you all know what a <em>truth table</em>is, and instead of using the boolean logic operators in F#, I am going to define each basic gate explictly using pattern matching which looks almost identical to an actual truth table :) The NOT versions of the gates will simply pipe the results of the gate into the NOT function.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">NOT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">AND</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">OR</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">XOR</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">NAND</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AND</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">NOT</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">NOR</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OR</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">NOT</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">XNOR</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">NOT</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>So, no surprises here. You can test these gates in F# interactive by throwing some booleans at them and they will behave as expected. Let's move onto something far more interesting.</p>\n\n<h3>Half-Bit Adder</h3>\n\n<p>A half bit adder is a cool little circuit (and nothing to do with injured snakes) that allows us to add two single bit numbers and output the result in a binary format. It has two inputs, A and B, and has two outputs, S (sum) and C (carry). The carry bit forms the <em>most signficant bit</em>(MSB) of the operation, whilst the Sum holds the <em>least significant bit</em>(LSB)<em>.</em>First, let's have a look at the circuit:</p>\n\n<p style=\"text-align: center;\"><img src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-15+at+16.14.23.png\" alt=\"\" /></p>\n\n<p>As you can see, this simple circuit is composed of two logic gates, XOR and AND. We simply XOR A and B to produce S, and AND A and B to produce C. Therefore, our F# definition for the half-bit adder is as follows:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">halfAdder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">AND</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Which will result in a tuple (C,S). For the sake of testing this I have created a list of all the possible input pairs and a function that tests them against the half adder.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">trueFalsePairs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"k\">false</span><span class=\"o\">,</span><span class=\"k\">false</span><span class=\"o\">);(</span><span class=\"k\">true</span><span class=\"o\">,</span><span class=\"k\">false</span><span class=\"o\">);(</span><span class=\"k\">false</span><span class=\"o\">,</span><span class=\"k\">true</span><span class=\"o\">);(</span><span class=\"k\">true</span><span class=\"o\">,</span><span class=\"k\">true</span><span class=\"o\">)]</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">halfAdderTest</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">toBin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1y</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0y</span>\n<span class=\"w\">  </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"A</span><span class=\"se\">\\t\\t</span><span class=\"s\">B</span><span class=\"se\">\\t\\t</span><span class=\"s\">C</span><span class=\"se\">\\t\\t</span><span class=\"s\">S</span><span class=\"se\">\\t\\t</span><span class=\"s\">Bin\"</span><span class=\"w\">  </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">testValue</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">halfAdder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"%b</span><span class=\"se\">\\t</span><span class=\"s\">%b</span><span class=\"se\">\\t</span><span class=\"s\">%b</span><span class=\"se\">\\t</span><span class=\"s\">%b</span><span class=\"se\">\\t</span><span class=\"s\">%A\"</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">sbyte</span><span class=\"o\">(</span><span class=\"n\">toBin</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">).</span><span class=\"n\">ToString</span><span class=\"bp\">()</span><span class=\"o\">+((</span><span class=\"n\">toBin</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">).</span><span class=\"n\">ToString</span><span class=\"bp\">()</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"n\">trueFalsePairs</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"n\">testValue</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p style=\"text-align: left;\">This code results in the following output</p>\n\n<p><img src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-15+at+16.45.43.png\" alt=\"\" /></p>\n\n<p>As you can see here, with no inputs the output is 0. When either A or B is 1 then the output is 1, and when both inputs are 1 then the output is 2 (10 in binary)</p>\n\n<h3>The Full Adder</h3>\n\n<p>The next circuit we will create is the FULL adder, which also has nothing to do with snakes or food. This circuit is capable of adding up three bits! First let's look at the schematic:</p>\n\n<p style=\"text-align: center;\"></p>\n\n<p style=\"text-align: center;\"><img style=\"border-style: initial; border-color: initial;\" src=\"../../../../../img/old/adder.jpg\" alt=\"\" /></p>\n\n<p style=\"text-align: center;\"><img src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-19+at+19.23.16.png\" alt=\"\" /></p>\n\n<p>If you look carefully at this circuit, you will notice it is in fact two half-adders and an OR gate. The second half-adder takes its A input from the Sum output of the first half-adder and its B input from the carry-in bit. The carry-in bit is the (potential) carry-out bit from a previous adder, and in this way we can chain together adders to add up numbers of any size. This is called the ripple-carry adder which is slightly inefficient in electrical engineering terms but it is fine for what we will attempt to achieve next. Before getting ahead of our selves, let's implement the full, all-singng, all-dancing adder in its full venom injecting glory:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">fullAdder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"o\">,</span><span class=\"n\">s1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">halfAdder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c2</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">halfAdder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">OR</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Easy huh? Now, in order to test it, what I am <strong>not</strong> going to do is what I did before with the half-adder, by creating a list of all possible inputs and then creating some custom test code ...</p>\n\n<h3>Testing those blasted reptiles!</h3>\n\n<p>I can tell you now, as this article progresses we will want to be testing all kinds of circuits that will have a dynamic amount of inputs. For example, in the next part we will create the ability to dynamically create ripple carry adders based purely on the amount of inputs that you give them. Therefore it makes sense to write the common part of the algorithm and provide a way to supply the custom parts. In an OOP language we'd be all like \"inheritance to the rescue!\" (or use the strategy pattern perhaps - in fact, the solution I will use is pretty much identical to the strategy pattern but we use first-class functions and no concrete objects) however we are using a functional language so I won't be using inheritance. Instead, we will do this the functional way which is to provide the custom parts of the algorithm in (drumroll......) functions! In order to facilitate this, let's first think about what we are going to need to test our circuits.</p>\n\n<p>- The ability to produce an exhaustive list of all possible combinations of true/false values for <em>n</em>number of bits.</p>\n\n<p>- The ability to use either all of the above list or maybe only a random slice of the inputs, because we could be dealing with pretty big numbers</p>\n\n<p>- Various helper functions that will make the output readable. These functions will be able to create binary and decimal representations of our boolean lists.</p>\n\n<p>This will be the first cut of the testing stuff and we can improve on it later if need be. This isn't supposed to be the best framework on the planet or anything. The functions that each test will have to provide will be supplied via the following interface</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">InputType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">All</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">uint64</span><span class=\"w\"> </span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">TestTemplate</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">abstract</span><span class=\"w\"> </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">NumberOfBits</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">uint64</span>\n<span class=\"w\">  </span><span class=\"k\">abstract</span><span class=\"w\"> </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">Execute</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">unit</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">abstract</span><span class=\"w\"> </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">InputType</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nn\">InputType</span><span class=\"p\">.</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice here that we are using 64bit unsigned integers all over - this is to allow us maximum flexibility to test larger 32bit numbers. We have defined a discriminated union <em>InputType</em>that will describe whether to take the whole potential input list or to take a random slice of it, and how bigger slice to take. The interface <em>TestTemplate</em>will make the magic happen. <em>NumberOfBits</em>is what the general algorithm will use to decide what list of inputs to create. <em>Execute</em>is the function that takes each set of inputs, executes the function(s) on it that we are trying to test and prints some output. Finally, <em>InputType</em>(as above) determines the range of the inputs to take, if not all of them. If this doesn't all make sense, it should do in a minute.</p>\n\n<p>Now let's knock together some utility functions for handling our inputs and outputs. I will go through each one in turn.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">boolOfBin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"mi\">0UL</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">binOfBool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0UL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1UL</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Two very simple functions that convert 0 and 1 into false and true, and vice versa.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">binOfInt</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">0UL</span><span class=\"o\">,</span><span class=\"mi\">0UL</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">acc</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">0UL</span><span class=\"o\">,</span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0UL</span><span class=\"o\">::</span><span class=\"n\">acc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pad</span><span class=\"o\">-</span><span class=\"mi\">1UL</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">0UL</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;</span><span class=\"mi\">1UL</span><span class=\"o\">)::</span><span class=\"n\">acc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pad</span><span class=\"o\">-</span><span class=\"mi\">1UL</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is a very useful function that will create a binary representation (in the way of a list of ints) of the passed in number. That is, passing in 4UL would result in [1UL;0UL;0UL]. It also has a <em>pad</em>parameterwhich will always ensure the list is of a certain length by way of Cons'ing a bunch of extra zeroes on the front of the list. This is very important because our circuits will expect a certain amount of bits, so we need to make sure we supply them even if they are all zero.</p>\n\n<p>This conversion from integers to binary can be done in a bunch of different ways, what I have done here seemed most natural. All we are doing is ANDing the LSB of the input number with 1, adding the result to the accumulator, and then shifting the input along by one bit. We keep doing this until the input is equivalent to 0, at which point we are done, unless we still need to pad a few zeroes out. If you are not sure what's going on here you should brush up on your binary maths a little, it will help a lot with the coming stuff.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">stringOfList</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">input</span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">acc</span><span class=\"o\">:</span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Text</span><span class=\"p\">.</span><span class=\"n\">StringBuilder</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"bp\">()</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Text</span><span class=\"p\">.</span><span class=\"n\">StringBuilder</span><span class=\"bp\">()</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This very simple code takes any list and converts it to a string by appending the result of calling ToString() on each element into a StringBuilder. We will use this for converting lists of integers (such as produced in the previous function) into readable strings like \"01101\".</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">decOfBin</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"nn\">Convert</span><span class=\"p\">.</span><span class=\"n\">ToUInt64</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">).</span><span class=\"n\">ToString</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function takes a binary string input (like what is produced in the previous function) and convert it into a unsigned 64-bit integer. Simples.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">bitsOfBools</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">toBin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">stringOfList</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A function that will take a list of our booleans, convert them to binary, and finally produce a readable string from them.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">createInputs</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"o\">..</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"n\">binOfInt</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"o\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And finally, our amazing input generating function. This guy takes a start and end number, plus a pad, and creates a list with a binary representation (in the form of another list, see the <em>binOfInt</em>function) of each number. For example, if you call <em>createInputs 0 3UL 2UL</em>the output will be :</p>\n\n<p>[[0UL; 0UL]; [0UL; 1UL]; [1UL; 0UL]; [1UL; 1UL]]</p>\n\n<p>Which you might recognise as the same input we used to fully-test the half adder circuit earlier.</p>\n\n<h3>Putting it all together</h3>\n\n<p>Ok, we have all of our utility functions defined, so let's go on to write the general test function algorithm :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rnd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Random</span><span class=\"o\">(</span><span class=\"nn\">DateTime</span><span class=\"p\">.</span><span class=\"nn\">Now</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"o\">)</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">test</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">template</span><span class=\"o\">:</span><span class=\"n\">TestTemplate</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">uint64</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">**</span><span class=\"kt\">float</span><span class=\"o\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">NumberOfBits</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1UL</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">InputType</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">All</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">createInputs</span><span class=\"w\"> </span><span class=\"mi\">0UL</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">NumberOfBits</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">         </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">uint64</span><span class=\"o\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">NextDouble</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"kt\">float</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"w\">         </span><span class=\"n\">createInputs</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">NumberOfBits</span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">boolOfBin</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Execute</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The test function accepts a parameter <em>template</em>which is an instance of the <em>TestTemplate</em>interface that we defined earlier.First, we declare a random number generator that will be used if the template has specified it would like to use a random range of its possible inputs. Then we establish the maximum possible number that the range could encompass - this is achieved by raising 2 to the power of whatever the requested number of bits is from the template, and subtracting one. (We subtract one because our binary numbers start at 0 not 1. The maximum number that will fit into a byte is 255, not 256, for example.) The results of this are then converted into the boolean format that our gates require and then each list is iteratively passed into the function <em>Execute.</em></p>\n\n<p>So let's define a test template that will test the half adder from earlier:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">testHalfAdder</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">TestTemplate</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">InputType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">All</span>\n<span class=\"w\">      </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">NumberOfBits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2UL</span>\n<span class=\"w\">      </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">Execute</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">          </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">halfAdder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"%i</span><span class=\"se\">\\t</span><span class=\"s\">%i</span><span class=\"se\">\\t</span><span class=\"s\">%s\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stringOfList</span><span class=\"o\">([</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">;</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">]))</span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"incorrect inputs\"</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In order to test the full adder, the template is almost identical. The only difference is the amount of inputs goes up to three (because we need a carry-bit), the actualfunction that executes, and a slight change to the output :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">testFullAdder</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">test</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">TestTemplate</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">     </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">InputType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">All</span>\n<span class=\"w\">      </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">NumberOfBits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3UL</span>\n<span class=\"w\">      </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">Execute</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">          </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">co</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fullAdder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">          </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"%i</span><span class=\"se\">\\t</span><span class=\"s\">%i</span><span class=\"se\">\\t</span><span class=\"s\">%i</span><span class=\"se\">\\t</span><span class=\"s\">%s\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stringOfList</span><span class=\"o\">([</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">co</span><span class=\"o\">;</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">]))</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"incorrect inputs\"</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"n\">produces</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">:</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p><img src=\"/blogengine/image.axd?picture=2012%2f3%2fSnap+2012-03-11+at+12.35.37.png\" alt=\"\" /></p>\n\n<p>As you can see, every possible input is executed and the full adder is able to add up to three in binary(11)when all the inputs are high! AMAZING!</p>\n\n<h2>Ripple Carry Adders!</h2>\n\n<p>Right, now we have all the tools we need to easily test new circuits, so let's step it up a notch. As I mentioned earlier, a ripple-carry adder is a cool circuit that is essentially a bunch of adders in a sequence, with the carry-out bit being passed into the carry-in bit of the next adder. This allows us to add up numbers of any size! First let's have a look at the schematic (which I stole shamelessly from Wikipedia) :</p>\n\n<p><img src=\"../../../../../img/old/vg.png\" alt=\"\" /></p>\n\n<p>Important things to notice here - The circuit flows from right to left. The inputs to the adders are formed by taking the respective pair of inputs from each number we are trying to add up. Eg if we have A=1111 and B=0101, then the first adder's inputs will be (1,1), the second (1,0) the third (1,1) and the fourth (1,0). Notice here that the first adder takes a carry-in bit <em>C0.</em>This first adder can actually be replaced with a half-adder because we would not have a carry-in bit at the start of the circuit. In our code though we will simply use a full adder and always supply the initial carry-in bit as 0. My objective for the <em>nAdder</em>function is not to tell it how many adders to create, but rather drive this from the input it receives. This turns out to be fairly simple to do using recursion - the only thing we have to worry about is passing the carry-out bit of the previous full adder into the carry-in bit of the next adder:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">nAdder</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fullAdder</span><span class=\"w\"> </span><span class=\"n\">ab</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">     </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"n\">results</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">xs</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"n\">inputs</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Our <em>nAdder</em>implementation takes a list of inputs. It expects each item of the input list to be a tuple (<em>an</em>,<em>bn</em>) which will be passed along with the carry-in bit into our <em>fullAdder</em>function as defined earlier. The result of this (<em>sn</em>) is appended to an output list, and the function is then called recursively, passing along the <em>cn</em> bit into the next adder. When the inputs are exhausted, the final <em>[s0...sn]</em> list is returned along with the final carry-out bit from the last adder. Once again, the actual implementation of the circuit itself is very simple. The test template however is going to get much more complicated than the previous ones because we have to deal with any amount of inputs, and now we are taking two full binary numbers and adding them up as opposed to taking 2-3 individual bits and adding them up. I will show the template first and then go through it afterwards:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">testNBitAdder</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">test</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">TestTemplate</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">     </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">NumberOfBits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"mi\">2UL</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">InputType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"o\">(</span><span class=\"mi\">32UL</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">Execute</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">buildInput</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">buildInput</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)::</span><span class=\"n\">acc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">xs</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">acc</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"incorrect input\"</span>\n<span class=\"w\">        </span><span class=\"c1\">// exctract input and format the full A and B numbers ready for displaying</span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buildInput</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"n\">input</span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">unzip</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">bitsOfBools</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">bitsOfBools</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"c1\">// perform the calculation and format result as a binary string</span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nAdder</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">out</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)::(</span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">binOfBool</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">stringOfList</span>\n<span class=\"w\">       </span><span class=\"c1\">// print input number A, B and the result, all in binary</span>\n<span class=\"w\">       </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"s\">\"%s %s %s\"</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">result</span>\n<span class=\"w\">       </span><span class=\"c1\">// print it again in decimal to show the equivalent sum</span>\n<span class=\"w\">       </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\" : %s + %s = %s\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">decOfBin</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">decOfBin</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">decOfBin</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>First we declare the number of required bits to be 2*n. This is because if we ask for a 4-bit adder, that actually means we want to add two 4-bit numbers so our input space is 8 bits. We also set the input type to a range of up to 32 unique inputs - this is because we could generate hugesequences ofinputs as we put in higher numbers, so we just want a random slice of those to test with. Next up is to build the input from the passed in sequences. This is a bit different to what we have done before. Because the input sequence generated will effectively be <em>[a0;b0;a1;b1;..an;bn]</em>we need to split this into the tuples<em>(ab,bn)</em>that our <em>nAdder</em>function is expecting. Once this is done, we use the <em>List.unzip</em>function on the resulting list of tuples to get us the full input numbers for A and B, which are then converted back to strings using <em>List.rev</em>and<em></em>the<em>bitsOfBools</em>functionso that we can show these in the output. Why are we using <em>List.rev</em>? Because our input holds sequences starting from the LSB - to get the actual binary numbers we need to reverse the inputs.</p>\n\n<p>Finally, we call <em>nAdder</em>using the list of input tuples and an initial carry-in bit of <em>false.</em>The results are then formatted so that the final carry-out bit forms the head of a results list where the tail is the output converted into binary. The whole thing is then transformed into a string ready for ouput. All that is left is the actual output itself, and because we are dealing with bigger numbers we give a decimal representation of the sum as well so you can easily see the ripple adder is functioning as intended. Here are some sample outputs from calling <em>testNBitAdder</em>with various sized inputs:</p>\n\n<p><img style=\"border-style: initial; border-color: initial;\" src=\"/blogengine/image.axd?picture=2012%2f3%2fSnap+2012-03-11+at+14.22.39.png\" alt=\"\" /><img src=\"/blogengine/image.axd?picture=2012%2f3%2fSnap+2012-03-11+at+14.21.46.png\" alt=\"\" /></p>\n\n<p></p>\n\n<p><img src=\"/blogengine/image.axd?picture=2012%2f3%2fSnap+2012-03-11+at+14.23.10.png\" alt=\"\" /></p>\n\n<p><img src=\"/blogengine/image.axd?picture=2012%2f3%2fSnap+2012-03-11+at+14.23.41.png\" alt=\"\" /></p>\n\n<p>Wow! As you can see our little functions were bolted together, called recursively, and can add up numbers up to 32 bits! The first part of the article has already gone on longer than I expected. In the next part, I will continue from this point, and we will look at line-level decoders, multiplexers, and then we will take everything and produce a whole arithmetic logic unit that is capable of performing addition, OR and AND operations on n-bit numbers. The ALU is the core of the CPU so if you don't have any idea about how this stuff works, you are already well on the way! I have attached the source thus far should you wish to play around with it.</p>\n\n<p><a href=\"/blogengine/file.axd?file=2012%2f3%2fLogic1.fsx\">Logic1.fsx (5.28 kb)</a></p>\n\n<p></p>")) ((? . 2) f post (u . "Reversing - lcm6.exe") (? . 2) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2018/01/01/reversing-lcm6-exe/index.html" . windows) (u . "/blog\\2018\\01\\01\\reversing-lcm6-exe/") (u . "2018-01-01T17:47:11") (? . 12) (? . 18) (c (u . "cracking") c (u . "reverse engineering")) (u . "\n<p>As an entertaining start to the new year, this post will cover the basics of reverse engineering a program and breaking its password protection. Of course, I do not advocate software piracy in any way, and the program in question is called a <code>crackme</code> which is a program designed to broken, with various measures to make it harder for you. They come in different levels of difficulty, the one under the microsope today is a relatively easy one - however, breaking even the simplest program requires a fairly deep understanding of computers, and the process might be quite interesting if you don&rsquo;t know how it&rsquo;s done. Let&rsquo;s have a look at it:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>") #t (u . "\n<p>As an entertaining start to the new year, this post will cover the basics of reverse engineering a program and breaking its password protection. Of course, I do not advocate software piracy in any way, and the program in question is called a <code>crackme</code> which is a program designed to broken, with various measures to make it harder for you. They come in different levels of difficulty, the one under the microsope today is a relatively easy one - however, breaking even the simplest program requires a fairly deep understanding of computers, and the process might be quite interesting if you don&rsquo;t know how it&rsquo;s done. Let&rsquo;s have a look at it:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n<!-- more-->\n\n<h2 id=\"outline\">Outline</h2>\n\n<p>A typical flow for this kind of operation is as follows;</p>\n\n<ul>\n <li>Learn stuff about the program - clues about how it was compiled, what libraries it is using and so forth</li>\n <li>Attempt to locate the code that checks the password</li>\n <li>For fun, simply patch it, skipping the protection to make sure everything is understood</li>\n <li>Identify the actual password checking algorithm and work out what it&rsquo;s doing</li>\n <li>With this new knowledge, construct and enter a correct password</li>\n <li>Write a program that can generate passwords</li></ul>\n\n<p>For this post, the only tool used will be the excellent <a href=\"https://x64dbg.com/#start\">x64dbg</a> which is an open-source windows debugger, a spiritual successor to the legendary <a href=\"http://www.ollydbg.de/\">OllyDbg</a>.</p>\n\n<h3 id=\"learn-stuff\">Learn stuff</h3>\n\n<p>Since the program already tells us it was written in Pascal, and this is a really simple crackme - there&rsquo;s not much to investigate, but lets look at it anyway. Loading the program in the debugger and viewing the Memory Map screen will show us how the operating system has laid out the program along with all the additional libraries it has loaded.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here we can see how the Pascal compiler has laid out the memory, the CODE section is where the actual progam is, and the other sections are for static global data, and other stuff.</p>\n\n<p>Moving over to the symbols view, we can see what functions the program exports to the world, and all the exported function locations for all the linked libraries. Looking at the linked libraries can yield important information about what the program might do.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>We can see here the program exports just the one function, its main entry point, which the debugger has kindly put a breakpoint on for us already.</p>\n\n<h3 id=\"locating-the-code\">Locating the code</h3>\n\n<p>Finding the code in question is the first challenge. You can&rsquo;t step through millions of lines of assembly code, which includes all the linked libraries and runtime systems from the programming language in question. It can often be hard to see the wood through the trees! What we need is some kind of hook to look for. Since this is a console program, and it writes a bunch of stuff to the console, we could try to find some of the strings it writes and then locate where they are referenced from to get us in the right area. To do this we can search, or maybe look at the DATA sections to see if we can spot any of the strings. Infact, it so happens x64dbg has a function that looks for referenced strings, so we can just run that.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/4.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Hmm. It did indeed find a ton of referenced strings, but the only ones with &ldquo;password&rdquo; in it are in some system library that is not relevant to our interests. Something is clearly amiss here!</p>\n\n<p>Let&rsquo;s let the program run until it prompts the user to enter the password, then break into the debugger and try again</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/5.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Aha! This is what we were looking for. It would seem something is happening that causes the code to appear later. Let&rsquo;s look at the area of code it is pointing at</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/6.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Great! We can see here it is printing the text, then the following calls are probably getting input from the command line, then it is going to test the password somehow. Before we look at that though, let&rsquo;s investigate why the string references are not found when the program is started. Let&rsquo;s start the program again and look at the same address where this code lives. (0x00408498)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/7.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This code is completely different! And, looking at it, it is nonsensical assembly code - rubbish or data. It would seem the program is somehow unpacked into this location at runtime. VERY INTERESTING!</p>\n\n<p>Let&rsquo;s have a look at the actual entry point of the program to see what&rsquo;s going on. The entry point is at 0x00408887, which is somewhat higher in memory than the rubbish code area we have discovered.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/8.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Well well, what do we have here! This is a strange looking piece of code. The ecx register is used with the loop instruction here to create a loop that iterates 0x549 times, counting down. (when loop is executed, it decrements ecx and jumps if ecx is not zero). It then grabs the 32 bits present at memory location ecx + 0x40833C, XOR&rsquo;s it with 0x35, and then writes it back again to the same memory address! What exactly is this mysterious address? 549 + 40833C = 408885, which is the memory address of the bytes just above the entry point itself!</p>\n\n<p>So, it would seem the program does a basic decryption of itself by XORing each 32bit address with 0x35, thus revealing the progam. Stepping through the loop a few times shows this is the case as you can see the real program magically appearing.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/9.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>MAGIC!</p>\n\n<h2 id=\"patch-it\">Patch it!</h2>\n\n<p>Now let&rsquo;s look at how the password is checked, and see if we can bypass it.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/10.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This isn&rsquo;t all of the code, but it&rsquo;s most of it. You can see here it&rsquo;s doing a bunch of checks and then jumping to 40855c if it fails. Looking at that area, you can see it prints the failure message</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/11.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>You can also see here, the instruction above the jump target which is the final check, jumps to 4085AF where it prints the success message. Therefore, it should be a simple job to make the first check always jump to 4085AF. We could do this in multiple ways. For now, we&rsquo;ll simply change the first check to jump to the success location if the test fails.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/12.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Wiht a little digging, it turns out this first check is ensuring that the password is 0xA characters long. With the in-memory patch, we should be able to put in any other length string and skip the other checks.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/13.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>However, we cannot write this change to the executable since it decrypts itself upon load. What we need to do instead is change the specific encrypted byte so that when it gets XOR&rsquo;d with 35, it produces the correct new value. Looking at the assembled change to the jump target, it is the value at address 4084D4 that changes from 84 to D7. Now, let&rsquo;s look at the same area of memory before it is decrypted</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse1/14.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here we can see a value of B0, which when XOR&rsquo;d with 35 gives us 84, proving it is the correct value. Now we simply change that value to (D7 ^ 35) = E2 and save the binary. Now, when the program starts, it decrypts itself as normal except it now has our new jump target for the first check, thus bypassing the protection.</p>\n\n<h2 id=\"the-algorithm\">The algorithm</h2>\n\n<p>Examining the assembly code and re-writing it in a higher level reveals something like this</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"p\">==</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">     </span><span class=\"p\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">^</span><span class=\"w\"> </span><span class=\"mh\">0xB</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">==</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"w\">     </span><span class=\"p\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0x1B</span><span class=\"w\"> </span><span class=\"p\">^</span><span class=\"w\"> </span><span class=\"mh\">0x36</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">+</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFB</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">wl</span><span class=\"p\">(</span><span class=\"s\">\"You cracked it!\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We can see here a bunch of different checks on the string, where some values are connected with each other in various ways. Clearly, there are many valid passwords that would satisfy the check, one restriction is that since it is adding up the ascii characters directly, all the numbers must fall within the range that the user can input as ascii characters on the command line.</p>\n\n<p>Let&rsquo;s write a simple rough&rsquo;n&rsquo;ready key generator that will create valid passwords, this time in F# (for no good reason)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// silly brute force keygen</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">keygen</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getAscii</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">chaos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"n\">Random</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">chaos</span><span class=\"o\">.</span><span class=\"n\">Next</span><span class=\"o\">(</span><span class=\"mi\">32</span><span class=\"o\">,</span><span class=\"mi\">126</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">inRange</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">126</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">pwd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"sc\">&#39;a&#39;</span><span class=\"o\">|]</span>\n<span class=\"w\">    </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x2D</span><span class=\"w\">  </span><span class=\"c1\">// always x2D  &#39;-&#39;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux1</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getAscii</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">^^^</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xB</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">inRange</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">aux1</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">(</span><span class=\"n\">aux1</span><span class=\"bp\">()</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">^^^</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xB</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux2</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">v1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getAscii</span><span class=\"bp\">()</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">getAscii</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">inRange</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"o\">,</span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">aux2</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">v1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">aux2</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"o\">)</span>\n<span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"c1\">//finally 4 in range values that add up to 0xFB (251)</span>\n<span class=\"w\">    </span><span class=\"c1\">//each character must be at least 32!</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux3</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">v1</span><span class=\"o\">,</span><span class=\"n\">v2</span><span class=\"o\">,</span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getAscii</span><span class=\"bp\">()</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">getAscii</span><span class=\"bp\">()</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">getAscii</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xFB</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">            </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">            </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">            </span><span class=\"n\">pwd</span><span class=\"o\">.[</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">xFB</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">aux3</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"n\">aux3</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"o\">(</span><span class=\"n\">pwd</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function generates lovely passwords such as &ldquo;RlF&amp;-sL&amp;\u0016Y&rdquo; that successfully pass the check.</p>\n\n<p>I hope you enjoyed this little foray into the world of reverse engineering, and happy new year!</p>")) ((? . 3) f post (u . "SqlProvider : SQLite support (experimental)") (? . 3) 1488255868 (p+ #"C:\\repos\\pezipink.github.io\\blog/2013/12/15/sqlprovider-sqlite-support-experimental/index.html" . windows) (u . "/blog\\2013\\12\\15\\sqlprovider-sqlite-support-experimental/") (u . "2013-12-15T04:29:00") (? . 23) (? . 5) (c (u . "fsharp") c (u . "type providers") c (u . "sqlprovider")) (u . "\n<p>The <a href=\"https://github.com/pezipink/SqlProvider\">SqlProvider</a>now supports experimental SQLite access.</p>") #t (u . "\n<p>The <a href=\"https://github.com/pezipink/SqlProvider\">SqlProvider</a>now supports experimental SQLite access.</p>\n<!-- more-->\n\n<p>You can achieve this by supplying the SQL provider some additional static parameters</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"s\">@\"Data Source=F:\\sqlite\\northwindEF.db;Version=3\"</span><span class=\"o\">,</span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">SQLITE</span><span class=\"o\">,</span><span class=\"s\">@\"F:\\sqlite\\3\\\"</span><span class=\"w\"> </span><span class=\"o\">&gt;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>As you can see, you can now pass SQLITE as the DatabaseVendor static parameter, along with a valid SQLite specific connection string.</p>\n\n<p>The third parameter is ResolutionPath. This is required for a few reasons - the first is that I do not want the SqlProvider to have any dependencies on non BCL types. Secondly, SQLite comes in many different flavours of mixed-mode assemblies. You must have the correct one for your particular system. The path you supply here will be used to dynamically load the SQLite assembly. You could always reference SQLite and remove the dynamic loading if you want a to tie your SqlProvider down to a specific SQLite assembly.</p>\n\n<p>Depending on where the assembly is located, which version of the framework you are running and whether you are using F# interactive, you might run into some security issues. If you get red squigglies on the above line complaining that it cannot load the assembly, you will probably need to add the following app.config setting to your application, fsi.exe's configuration and devenv.exe's configuration.</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/dd409252(VS.100).aspx\">http://msdn.microsoft.com/en-us/library/dd409252(VS.100).aspx</a></p>\n\n<p>Typically you will find fsi.exe.config in C:\\Program Files (x86)\\Microsoft SDKs\\F#\\3.1\\Framework\\v4.0\\, and devenv.exe.config will be \\VsInstallationLocation\\Comm7\\IDE\\</p>\n\n<p>Once you have everything working, you can now proceed to enumerate and query tables/views, perform joins, use select-many over relationships and make use of individuals (see <a href=\"http://pinksquirrellabs.com/post/2013/12/09/The-Erasing-SQL-type-provider.aspx\">last post</a> for details). SQLite doesn't support stored procedures so don't expect to find much in there :)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">christina</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[main].[Customers]``</span><span class=\"o\">.</span><span class=\"n\">Individuals</span><span class=\"o\">.</span><span class=\"n\">``As ContactName``</span><span class=\"o\">.</span><span class=\"n\">``BERGS, Christina Berglund``</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">christinasOrders</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">christina</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_0_0</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">mattisOrderDetails</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[main].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_0_0</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">od</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">FK_OrderDetails_1_0</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">prod</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">od</span><span class=\"o\">.</span><span class=\"n\">FK_OrderDetails_0_0</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"c1\">// a terribly named constraint</span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">ContactName</span><span class=\"w\"> </span><span class=\"o\">=%</span><span class=\"w\"> </span><span class=\"s\">\"Matti%\"</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">ShipCountry</span><span class=\"w\"> </span><span class=\"o\">|=|</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"s\">\"Finland\"</span><span class=\"o\">;</span><span class=\"s\">\"England\"</span><span class=\"o\">|])</span>\n<span class=\"w\">            </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">ContactName</span><span class=\"o\">,</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">ShipAddress</span><span class=\"o\">,</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">ShipCountry</span><span class=\"o\">,</span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">ProductName</span><span class=\"o\">,</span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">UnitPrice</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>Have fun!</p>")) ((? . 4) f post (u . "Fun with a toy robotic arm!") (? . 4) 1488240066 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/02/01/fun-with-a-toy-robotic-arm/index.html" . windows) (u . "/blog\\2014\\02\\01\\fun-with-a-toy-robotic-arm/") (u . "2014-02-01T01:25:00") (? . 6) (? . 21) (c (u . "fsharp")) (u . "\n<p>This post is intended to show how easy it is to use the F# programming language in order to explore new libraries and get stuff going quickly. It also shows the usage of various great F# features such as Record Types, Discriminated Unions, Computation Expressions and Async workflows, whilst also using a bit of mutable state, integrating with various other 3rd party .NET libraries (including use of an XBOX pad and even a Kinect!), and even some low level bit shifting and masking stuff.</p>\n\n<p>F# is definitely NOT just for number crunching programs!</p>\n\n<p>So, the step-son got a toy robotic arm for Christmas (no, not from me), which he has largely ignored. Partly this was due to the lack of batteries in it, which we addressed recently. However, he still wasn't really interested in it, so I figured I would have a play with it instead (a couple of weeks ago). It was either that or write documentation for the <a href=\"https://github.com/fsprojects/SQLProvider\">SQLProvider</a>.</p>\n\n<p><a href=\"http://localhost:3000/img/old/b696_edge_robotic_arm_kit.jpg\"><img style=\"display: inline; border: 0px;\" title=\"b696_edge_robotic_arm_kit\" src=\"http://localhost:3000/img/old/b696_edge_robotic_arm_kit_thumb.jpg\" alt=\"b696_edge_robotic_arm_kit\" width=\"244\" height=\"187\" border=\"0\" /></a></p>") #t (u . "\n<p>This post is intended to show how easy it is to use the F# programming language in order to explore new libraries and get stuff going quickly. It also shows the usage of various great F# features such as Record Types, Discriminated Unions, Computation Expressions and Async workflows, whilst also using a bit of mutable state, integrating with various other 3rd party .NET libraries (including use of an XBOX pad and even a Kinect!), and even some low level bit shifting and masking stuff.</p>\n\n<p>F# is definitely NOT just for number crunching programs!</p>\n\n<p>So, the step-son got a toy robotic arm for Christmas (no, not from me), which he has largely ignored. Partly this was due to the lack of batteries in it, which we addressed recently. However, he still wasn't really interested in it, so I figured I would have a play with it instead (a couple of weeks ago). It was either that or write documentation for the <a href=\"https://github.com/fsprojects/SQLProvider\">SQLProvider</a>.</p>\n\n<p><a href=\"http://localhost:3000/img/old/b696_edge_robotic_arm_kit.jpg\"><img style=\"display: inline; border: 0px;\" title=\"b696_edge_robotic_arm_kit\" src=\"http://localhost:3000/img/old/b696_edge_robotic_arm_kit_thumb.jpg\" alt=\"b696_edge_robotic_arm_kit\" width=\"244\" height=\"187\" border=\"0\" /></a></p>\n<!-- more-->\n\n<p>This is it. It&rsquo;s just a toy one &ndash; I had a real one a few years back but I blew it up after making a rather silly mistake (electricity, how I love and hate thee.) The one in the picture has a controller &ndash; this one doesn&rsquo;t, it has a USB interface instead. It comes with some rubbish software which lets you control the various joints and gripper with the mouse, and a way to &ldquo;program&rdquo; it, which basically involves recording sequences and pauses. It doesn&rsquo;t have any sensors, and uses motors not servos so you are not able to accurately position it at all.</p>\n\n<p>However, I figured it would still be fun to mess around with. Luckily, <a href=\"http://notbrainsurgery.livejournal.com/38622.html\">someone had already reversed engineered the USB communications</a>, which saved me quite a bit of time. I grabbed <a href=\"http://sourceforge.net/projects/libusbdotnet/\">libusb</a>, added the device to it, then used FSI to try and locate it.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"s\">@\"F:\\utils\\LibUsbDotNet\\LibUsbDotNet.dll\"</span><span class=\"w\"> </span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">LibUsbDotNet</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">arm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">LibUsbDotNet</span><span class=\"p\">.</span><span class=\"nn\">UsbDevice</span><span class=\"p\">.</span><span class=\"nn\">AllDevices</span><span class=\"p\">.</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">usb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">LibUsbDotNet</span><span class=\"p\">.</span><span class=\"nn\">UsbDevice</span><span class=\"p\">.</span><span class=\"n\">OpenUsbDevice</span><span class=\"o\">(</span><span class=\"nn\">Main</span><span class=\"p\">.</span><span class=\"n\">UsbDeviceFinder</span><span class=\"o\">(</span><span class=\"mi\">4711</span><span class=\"o\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Well, that was almost too easy. Found it straight away! Now to work out how to send the packets of data it is expecting. Evidently it expects three bytes, the bits of the first control the state of the various motors in the arm and gripper, and the second controls the base and the third the light. After quite a bit of messing about with the somewhat confusing libusb library,I managed to get something to work - switching the light on and off seemed the least destructive as I wouldn&rsquo;t be able to quickly stop the motors at this point!</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">mutable</span><span class=\"w\"> </span><span class=\"n\">packet</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Main</span><span class=\"p\">.</span><span class=\"n\">UsbSetupPacket</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">RequestType</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x40</span><span class=\"w\"> </span>\n<span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span>\n<span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">int16</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x100</span>\n\n<span class=\"c1\">//on! </span>\n<span class=\"n\">usb</span><span class=\"o\">.</span><span class=\"n\">ControlTransfer</span><span class=\"o\">(&amp;</span><span class=\"n\">packet</span><span class=\"o\">,[|</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b1uy</span><span class=\"o\">|],</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"c1\">//off! </span>\n<span class=\"n\">usb</span><span class=\"o\">.</span><span class=\"n\">ControlTransfer</span><span class=\"o\">(&amp;</span><span class=\"n\">packet</span><span class=\"o\">,[|</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">|],</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>woohoo, now I know it will work, time to model the various actions of the arm using F#&rsquo;s awesome discriminated unions!</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Direction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stop</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">GripDirection</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Open</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Close</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GripStop</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Rotation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Clockwise</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">AntiClockwise</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RotationStop</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">LightAction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">On</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Off</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Action</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wrist</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Direction</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Elbow</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Direction</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shoulder</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Direction</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Grip</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">GripDirection</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Rotation</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Light</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">LightAction</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">ToCommand</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"c1\">// FOR BYTE 1 (ARM) </span>\n<span class=\"w\">     </span><span class=\"c1\">// STOP patterns are designed to be cleared to blank out existing 1&#39;s </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">GripStop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000011uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00001100uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00110000uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b11000000uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">Close</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000001uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">Open</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000010uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000100uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00001000uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00010000uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00100000uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b01000000uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b10000000uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"c1\">// BYTE 2 (BASE) </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">(</span><span class=\"n\">RotationStop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000011uy</span><span class=\"w\"> </span><span class=\"c1\">// Clear this </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">(</span><span class=\"n\">AntiClockwise</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000001uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">(</span><span class=\"n\">Clockwise</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000010uy</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"c1\">// BYTE 3 (LIGHT) </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Light</span><span class=\"o\">(</span><span class=\"n\">Off</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000001uy</span><span class=\"w\"> </span><span class=\"c1\">// Clear this </span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Light</span><span class=\"o\">(</span><span class=\"n\">On</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b00000001uy</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>As you can see I mapped the bit patterns for the various actions and including some special ones that can be used to clear the relevant bits and effectively stop that function. For example, the gripper can be opening, closing, or doing nothing. In order to make sure its doing nothing, you have to make sure both the relevant bits are 0 as either might be set.</p>\n\n<p>The arm is fully capable of using any combination of all of its functions at the same time, so to facilitate that I wrote this small function that given a list of the above actions, will create and execute a command by masking the bit patterns together.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">executeActions</span><span class=\"w\"> </span><span class=\"n\">actions</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span><span class=\"n\">actions</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">;</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">|]</span><span class=\"w\"> </span><span class=\"n\">action</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">action</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;(~~~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">);</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;(~~~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">);</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;(~~~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">);</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">GripStop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;(~~~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">);</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">(</span><span class=\"n\">RotationStop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">;</span><span class=\"n\">b</span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;(~~~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">);</span><span class=\"n\">c</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">(_)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">;</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Light</span><span class=\"o\">(</span><span class=\"n\">Off</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">;</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;(~~~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">)|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Light</span><span class=\"o\">(</span><span class=\"n\">On</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"o\">;</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToCommand</span><span class=\"bp\">()</span><span class=\"o\">;</span><span class=\"n\">b</span><span class=\"o\">;</span><span class=\"n\">c</span><span class=\"o\">|])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">usb</span><span class=\"o\">.</span><span class=\"n\">ControlTransfer</span><span class=\"o\">(&amp;</span><span class=\"n\">amp</span><span class=\"o\">;</span><span class=\"n\">packet</span><span class=\"o\">,</span><span class=\"n\">cmd</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"n\">cmd</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Well, this was great! I created a load of mini functions in FSI and I control the arm by the power of F#. I quickly decided that greater things could be achieved though, next thing up was to get it to work with my XBOX pad! Once again, this was really very simple to do. I looked for a library, found <a href=\"http://brandonpotter.wordpress.com/2009/12/28/xbox-controller-in-net-3-5-with-3-lines-of-code/\">this</a>, downloaded it, referenced it in my FSI project and I was reading data within about 1 minute after the download finished!</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"s\">@\"X9Tech.XBox.Input.dll\"</span><span class=\"w\"> </span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">X9Tech.XBox.Input</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">xcm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">XBoxControllerManager</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">controller</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xcm</span><span class=\"o\">.</span><span class=\"n\">GetConnectedControllers</span><span class=\"bp\">()</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I then created a F# record type to hold the pad state, and a function to read it</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ControllerState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">LShoulder</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RShoulder</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">LStickUp</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">LStickDown</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RStickUp</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RStickDown</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">DPadUp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">DPadDown</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">StartPressed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">LTriggerPressed</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RTriggerPressed</span><span class=\"o\">:</span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getState</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">LShoulder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ButtonShoulderLeftPressed</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">RShoulder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ButtonShoulderRightPressed</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">LStickUp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ThumbLeftY</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">75</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">LStickDown</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ThumbLeftY</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">RStickUp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ThumbRightY</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">75</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">RStickDown</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ThumbRightY</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">DPadUp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ButtonUpPressed</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">DPadDown</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ButtonDownPressed</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">StartPressed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">ButtonStartPressed</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">LTriggerPressed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">TriggerLeftPosition</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">RTriggerPressed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">TriggerRightPosition</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>SUPER! at this stage I hit a bit of a problem. What I really need is to understand when something on the pad changes so that I can react to it. An event mechanism of some description. For that I would need to remember the old state, compare it to a new state then raise an event, call some passed-in function that is supposed to do something with the information, or simply return a list of stuff that has changed. Once again, F# discriminated unions are awesome for this as I can very easily represent all the possible events with one type</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ControllerEvent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LShoulder</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RShoulder</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LTrigger</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RTrigger</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LStickUp</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LStickDown</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RStickUp</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RStickDown</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PadUp</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PadDown</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I use a little trick to create the &ldquo;events&rdquo; .. first a tiny function that accepts a tuple of bool * ControllerEvent, if the bool true it returns Some(event), else None. This way I can create my &ldquo;events&rdquo; in a list, then use List.choose over them to extract all the things that have changed</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getEvents</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">newState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getState</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">events</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LShoulder</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">LShoulder</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LShoulder</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LShoulder</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RShoulder</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">RShoulder</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RShoulder</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RShoulder</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LTriggerPressed</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">LTriggerPressed</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LTrigger</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LTriggerPressed</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RTriggerPressed</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">RTriggerPressed</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RTrigger</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RTriggerPressed</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LStickDown</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">LStickDown</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LStickDown</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LStickDown</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LStickUp</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">LStickUp</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">LStickUp</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">LStickUp</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RStickDown</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">RStickDown</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RStickDown</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RStickDown</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RStickUp</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">RStickUp</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RStickUp</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">RStickUp</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">DPadDown</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">DPadDown</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">PadDown</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">DPadDown</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">DPadUp</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">DPadUp</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">PadUp</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">DPadUp</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">StartPressed</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">oldState</span><span class=\"o\">.</span><span class=\"n\">StartPressed</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"o\">.</span><span class=\"n\">StartPressed</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">,</span><span class=\"n\">events</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Piece of cake right! In order to use this, I will have to poll the pad at certain intervals &ndash; uh-oh &ndash; this is going to require threaded code to work properly without blocking the FSI process! No matter&hellip; F# Async to the rescue! I simply create a function <em>pollPad</em> that implements a recursive async function with a small delay in it. Each time the function calls itself, it passes the old state of the pad through. There is a small delay, and then a new state is generated, any changes that have happened are executed. Really it should use the function above to compose a single three byte command rather then sending each one individually, but who cares, it works :)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">pollPad</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getState</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">|]</span><span class=\"w\"> </span><span class=\"c1\">// initial state, everything off </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">poll</span><span class=\"w\"> </span><span class=\"n\">controllerState</span><span class=\"w\"> </span><span class=\"n\">robotState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">do</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"nn\">Async</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"c1\">// a wee delay </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">newState</span><span class=\"o\">,</span><span class=\"n\">events</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getEvents</span><span class=\"w\"> </span><span class=\"n\">controllerState</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"n\">robotState</span><span class=\"o\">,</span><span class=\"n\">events</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LShoulder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">Close</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RShoulder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">Open</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LTrigger</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Base</span><span class=\"o\">(</span><span class=\"n\">Clockwise</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RTrigger</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Base</span><span class=\"o\">(</span><span class=\"n\">AntiClockwise</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LStickUp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LStickDown</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RStickUp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RStickDown</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Light</span><span class=\"o\">(</span><span class=\"n\">On</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PadUp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PadDown</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LShoulder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RShoulder</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">GripStop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LTrigger</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RTrigger</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Base</span><span class=\"o\">(</span><span class=\"n\">RotationStop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LStickUp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LStickDown</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RStickUp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RStickDown</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Light</span><span class=\"o\">(</span><span class=\"n\">Off</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PadUp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PadDown</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">return</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">poll</span><span class=\"w\"> </span><span class=\"n\">newState</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"n\">poll</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"n\">pollPad</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Async</span><span class=\"p\">.</span><span class=\"n\">Start</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Awesome! At this stage I got all the kids playing with it via the pad, and we managed to pickup and deposit various toys, and even my nose :)</p>\n\n<p>Well, cool as it was at this stage (not to mention the pad being very handy for easily resetting it to some good state) I was not to be deterred from my original aim which was to be able to program it in some way. So I figured, what would be really cool is if i could have a mini language that could control it, and chunks of control could be combined together to form bigger programs. For this I could use the very awesome F# computation expression.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ArmLanguage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Action</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">int</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">RobotBuilder</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">mutable</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"n\">b0uy</span><span class=\"o\">|]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Delay</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Bind</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"n\">delay</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"n\">delay</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">actions</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">executeActions</span><span class=\"w\"> </span><span class=\"n\">actions</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Return</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">robot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RobotBuilder</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In just a few short lines I am able to define a new language construct that can be used to control the robot. It uses mutable state to remember the current state of the arm, this is so successive commands can be properly masked together and not overwrite any existing state with a load of zeroes. It can now be used like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">closeGrip</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">robot</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">[(</span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">Close</span><span class=\"o\">))]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1700</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">GripStop</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">openGrip</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">robot</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">[(</span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">Open</span><span class=\"o\">))]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">`</span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1700</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">`</span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Grip</span><span class=\"o\">(</span><span class=\"n\">GripStop</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">`</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span>\n<span class=\"o\">}`</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>But what&rsquo;s better than that is that these can now be combined together to form more complex behaviours !</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">flickVs</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">robot</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">openGrip</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1500</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">);</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1500</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">);</span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"c1\">// stop at peak </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1500</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1500</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1500</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1500</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">);</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"mi\">1500</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Wrist</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Elbow</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">);</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">closeGrip</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice here that I have called openGrip() and closeGrip() within another robot { } expression. You could nest these down many levels if you wished. This particular program repeatedly flicks the V sign at my girlfriend who is sitting across the room. Hilarious I&rsquo;m sure!</p>\n\n<p>Using my new found robot arm language, I thought it would be a good idea to try and integrate something with my Kinect. I thought I could have the arm go all the way up to its highest point when my arm (elbow, actually) is high in the air, and down to its lowest point when my elbow is at seating level. Because the arm has no sensors and doesn&rsquo;t use servos, this was never going to work properly as all I can do is estimate how far the arm will move in a given amount of time and try to track where it should be, which is rubbish at best. However, I timed it a few times, did a bunch of maths to work out how to synchronise the sensor readings from the Kinect and the time resolution, plus a bunch of scaling to normalize the numbers coming out of the Kinect into something I can use.</p>\n\n<p>I&rsquo;m not going to show all the code here, but I quickly whipped in the RX framework so I could use Observable.Sample to bring the events from the Kinect under control with my calculated timing, and when the elbow joint is above or below my current perceived position of the arm it would issue a command to move up or down.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"c1\">// right so we know this event will fire every 500ms, so if we need to move up or down </span>\n<span class=\"w\">  </span><span class=\"c1\">// at least 500ms worth (which is 1/12th of the total distance) then do so, otherwise do nothing </span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">minInterval</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\">//down? </span>\n<span class=\"w\">      </span><span class=\"n\">robot</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Down</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">resolution</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"down\"</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">minInterval</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">aShoulderPos</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">aShoulderPos</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">resolution</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"c1\">// up? </span>\n<span class=\"w\">      </span><span class=\"n\">robot</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Up</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sleep</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">resolution</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"o\">([</span><span class=\"n\">Shoulder</span><span class=\"o\">(</span><span class=\"n\">Stop</span><span class=\"o\">)])</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"up\"</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">minInterval</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">aShoulderPos</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">aShoulderPos</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">resolution</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"new kinect postion %A\"</span><span class=\"w\"> </span><span class=\"n\">kElbowPos</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"new arm postion %A\"</span><span class=\"w\"> </span><span class=\"n\">aShoulderPos</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Ok so it wasn&rsquo;t a brilliant first attempt, but it sort of worked a bit and the children were mighty impressed to see the robot arm attempt to follow their own arm going up and down :)</p>\n\n<p>Anyways, enough of this! Once again F# continues to impress with its awesome ability to get stuff done quickly, and well. You can easily integrate to a whole bunch of different libraries, model the domain quickly and effectively, and provide all the constructs you could possibly need to achieve any modern programming task, not to mention having a load of fun in the process - and all of this is just a few hours! F# for president!</p>")) ((? . 5) f post (u . "SQL Provider - new stuff including PostgreSQL support and option types!") (? . 5) 1488255838 (p+ #"C:\\repos\\pezipink.github.io\\blog/2013/12/24/sql-provider-new-stuff-including-postgresql-support-and-option-types/index.html" . windows) (u . "/blog\\2013\\12\\24\\sql-provider-new-stuff-including-postgresql-support-and-option-types/") (u . "2013-12-24T09:21:00") (? . 3) (? . 6) (c (u . "fsharp") c (u . "type providers") c (u . "sqlprovider")) (u . "\n<p>The latest version of the SQL provider can be found on <a href=\"https://github.com/pezipink/SQLProvider\">github</a>or at <a href=\"https://www.nuget.org/packages/SQLProvider/0.0.3-alpha\">nuget</a>. (EDIT: MYSQL and Oacle are now a supported as well!)</p>\n\n<h2>PostgreSQL</h2>\n\n<p>The provider now has support for connecting to PostgreSQL databases! How exciting. Like SQLite, this new mode uses dynamic assembly loading and is based on the .NET connector libraries <a href=\"http://npgsql.projects.pgfoundry.org/\">here</a>.</p>") #t (u . "\n<p>The latest version of the SQL provider can be found on <a href=\"https://github.com/pezipink/SQLProvider\">github</a>or at <a href=\"https://www.nuget.org/packages/SQLProvider/0.0.3-alpha\">nuget</a>. (EDIT: MYSQL and Oacle are now a supported as well!)</p>\n\n<h2>PostgreSQL</h2>\n\n<p>The provider now has support for connecting to PostgreSQL databases! How exciting. Like SQLite, this new mode uses dynamic assembly loading and is based on the .NET connector libraries <a href=\"http://npgsql.projects.pgfoundry.org/\">here</a>.</p>\n<!-- more-->\n\n<p>Once you have your Npgsql libraries you can connect yourself up easily as so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"s\">@\"Server=localhost;Port=5432;Database=world;user=postgres;password=sekret;\"</span><span class=\"o\">,</span>\n<span class=\"w\">                      </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">POSTGRESQL</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\postgre\\f#\\Npgsql\"</span><span class=\"w\"> </span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n\n<span class=\"c1\">// access individuals</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">southend</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[public].[city]``</span><span class=\"o\">.</span><span class=\"n\">Individuals</span><span class=\"o\">.</span><span class=\"n\">``As name``</span><span class=\"o\">.</span><span class=\"n\">``486, Southend-on-Sea``</span>\n\n<span class=\"c1\">// get all cities</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[public].[city]``</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n\n<span class=\"c1\">// query some cities</span>\n<span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[public].[city]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=%</span><span class=\"s\">\"%s%\"</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The whole shooting match should mostly work, including relationship navigation, individuals and complex queries. Unfortunately the Ngpsql connector doesn't give any type mapping information so it had to be done the old fashioned way (e.g, me writing out long match expressions, which was fun). Postgre lets you have some really crazy data types so I would not be surprised if you don't get all your columns depending on what your database schema is like.</p>\n\n<h2 class=\"brush: c-sharp;\">Option Types</h2>\n\n<p>There is a new static parameter called <em>UseOptionTypes.</em>If you flip this little puppy to true, all columns in the database that are marked as nullable will now be generated as F# option types, woop! This means that in your queries you will have to access the .Value property when supplying criteria and join information. You can also quite handily use the IsSome and IsNone properties in a criteria expression, which will be translated to IS NOT NULL, IS NULL, or whatever the equivalent is for the specific database vendor you are using.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"s\">@\"Data Source=F:\\sqlite\\northwindEF.db ;Version=3\"</span><span class=\"o\">,</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">SQLITE</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\sqlite\\3\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n<span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[main].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"c1\">// IS NOT NULL</span>\n<span class=\"w\">        </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">.</span><span class=\"n\">IsSome</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"c1\">// IS NULL</span>\n<span class=\"w\">        </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">.</span><span class=\"n\">IsNone</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"c1\">// Usual criteria is now specified with the Value property</span>\n<span class=\"w\">        </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">=%</span><span class=\"w\"> </span><span class=\"s\">\"%TESCO%\"</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"c1\">// obviously you will need to be careful in projections with option types..</span>\n<span class=\"w\">        </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<h2>Documentation!</h2>\n\n<p>I still have not written any. Sorry.</p>\n\n<p></p>")) ((? . 7) f post (u . "2048 – Type Provider Edition") (? . 7) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/07/03/2048-type-provider-edition/index.html" . windows) (u . "/blog\\2014\\07\\03\\2048-type-provider-edition/") (u . "2014-07-03T11:36:00") (? . 41) (? . 43) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>I&rsquo;m sure you would have all seen the highly addictive and annoying game <a href=\"http://gabrielecirulli.github.io/2048/\">2048</a> by now (if not, follow the link and have a go now, don&rsquo;t forget to come back here though! ). Fellow F#er <a href=\"https://twitter.com/brandewinder\">@brandewinder</a> wrote a bot that wins the game for you, subsequently turning it into an cool F# dojo. It is <a href=\"http://www.meetup.com/FSharpLondon/events/185190272/\">London&rsquo;s turn for this dojo next Thursday</a>, so I figured before then I would have a go myself and do the obvious thing which is to turn it into a type provider :)</p>\n\n<p>2048 TP Edition is available as part of my <a href=\"http://pinksquirrellabs.com/post/2014/05/01/BASIC%E2%80%99s-50th-Anniversary-%E2%80%A6-and-more-crazy-F-type-providers!.aspx\">type provider abstraction</a> the <a href=\"https://github.com/pezipink/InteractiveProvider\">Interactive Provider</a>. You will want to set your tooltips to a fixed-width font for this to render for you properly. Here is a picture of it in action !</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_13.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_13.png\" alt=\"image\" width=\"902\" height=\"305\" border=\"0\" /></a></p>") #t (u . "\n<p>I&rsquo;m sure you would have all seen the highly addictive and annoying game <a href=\"http://gabrielecirulli.github.io/2048/\">2048</a> by now (if not, follow the link and have a go now, don&rsquo;t forget to come back here though! ). Fellow F#er <a href=\"https://twitter.com/brandewinder\">@brandewinder</a> wrote a bot that wins the game for you, subsequently turning it into an cool F# dojo. It is <a href=\"http://www.meetup.com/FSharpLondon/events/185190272/\">London&rsquo;s turn for this dojo next Thursday</a>, so I figured before then I would have a go myself and do the obvious thing which is to turn it into a type provider :)</p>\n\n<p>2048 TP Edition is available as part of my <a href=\"http://pinksquirrellabs.com/post/2014/05/01/BASIC%E2%80%99s-50th-Anniversary-%E2%80%A6-and-more-crazy-F-type-providers!.aspx\">type provider abstraction</a> the <a href=\"https://github.com/pezipink/InteractiveProvider\">Interactive Provider</a>. You will want to set your tooltips to a fixed-width font for this to render for you properly. Here is a picture of it in action !</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_13.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_13.png\" alt=\"image\" width=\"902\" height=\"305\" border=\"0\" /></a></p>\n<!-- more-->\n\n<h2>2048 Implementation</h2>\n\n<p>I will start by saying that I have not looked at any other implementations of either the game or any automated bots, so if this is terrible then please forgive me. I had also not played the game at all until recently and as such the rules implemented here are from my brief analysis of playing it. There might be some subtleties I have overlooked.</p>\n\n<p>I first implemented this using arrays as it seemed like a natural fit for the 4 x 4 board, but although I got it to work, it was horrible and instead I replaced it with this much more functional version.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">direction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>That covers the entire domain :) Each location of the grid is stored in the map along with the value, if one exists.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">shift</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">moves</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">..-</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">..-</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A couple of utility functions. The first is pretty obvious, the second returns a list of tuples indicating the order that the cells should be processed. The order is very important for a number of reasons as will become clear.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">move</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">px</span><span class=\"o\">,</span><span class=\"n\">py</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">px</span><span class=\"o\">,</span><span class=\"n\">py</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">containsKey</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">px</span><span class=\"o\">,</span><span class=\"n\">py</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">move</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function takes a location and attempts to move it in the specified direction until either it goes out of bounds, or it finds the location is already taken in the map. In either case, it returns the last good position that can be moved to.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">replace</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">move</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">move</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">,</span><span class=\"n\">inputs</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">move</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">shift</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">newpos</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">newpos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">newpos</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">.[</span><span class=\"n\">p</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">newpos</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">compress</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">direction</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">moves</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">containsKey</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">replace</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">data</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>These functions effectively &ldquo;compress&rdquo; the map in a specified direction. What this means is that if we are going Up, it will start from the top row, and moving downwards it will move each cell up as far as it can go, resulting in a new compressed map. You can think of this much like defragging memory, but with a direction bias. It&rsquo;s like applying gravity from different directions :)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">merge</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">moves</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">moves</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">pairwise</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">,</span><span class=\"n\">moves</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">tryFind</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">tryFind</span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">data</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This one is a little more fun :) The idea of the merge function is to, based on the direction, merge any pair cells that are touching and have the same value, replacing them with one cell (based on the &ldquo;gravity&rdquo; direction) that has double the value. This code uses pairwise to serve up each pair of locations &ndash; the order that the cells are generated from the moves function is critical here</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">compress</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">merge</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">compress</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Using function composition, I can now say that one step of the simulation consists of compressing the map in a certain direction, merging the resulting cells together where appropriate, and then compressing again to fill in any blanks that appeared from the merge step. I think this is pretty awesome :)</p>\n\n<h2>Type Provider</h2>\n\n<p>As mentioned before, this uses my Interactive Provider so there is no gnarly provided types code. Instead, I have a very simple state that gets passed back and forth</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">``2048State``</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NewGame</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GameOn</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">int</span><span class=\"o\">*</span><span class=\"n\">int</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GameOver</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">interface</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">DisplayOptions</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"kt\">obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NewGame</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s\">\"Begin Game\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GameOn</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s\">\"# Show Grid\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"s\">\"show\"</span><span class=\"o\">;</span><span class=\"s\">\"Up\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"s\">\"up\"</span><span class=\"o\">;</span><span class=\"s\">\"Down\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"s\">\"down\"</span><span class=\"o\">;</span><span class=\"s\">\"Left\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"s\">\"left\"</span><span class=\"o\">;</span><span class=\"s\">\"Right\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"s\">\"right\"</span><span class=\"o\">;]</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GameOver</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GameOver</span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">DisplayText</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// omit drawing code for brevity </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Very simple .. at the start it shows &ldquo;Begin Game&rdquo; and from then on displays the directional choices as properties along with a &ldquo;# Show Grid&rdquo; property that shows the current state of the grid.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">``2048``</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">interface</span><span class=\"w\"> </span><span class=\"n\">IInteractiveServer</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">NewState</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NewGame</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">ProcessResponse</span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">obj</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(|</span><span class=\"n\">Win</span><span class=\"o\">|</span><span class=\"n\">Lose</span><span class=\"o\">|</span><span class=\"n\">Continue</span><span class=\"o\">|)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">int</span><span class=\"o\">*</span><span class=\"n\">int</span><span class=\"o\">,</span><span class=\"n\">int</span><span class=\"o\">&gt;)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">((</span><span class=\"k\">true</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">),[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">                   </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">                   </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">])</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">tryFind</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">highest</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">,</span><span class=\"n\">highest</span><span class=\"o\">))</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"w\"> </span><span class=\"mi\">2048</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Win</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Lose</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"n\">data</span>\n\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:?&gt;</span><span class=\"n\">``2048State``</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"o\">:?&gt;</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">).</span><span class=\"n\">ValueOption</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NewGame</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">Next</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">Next</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">GameOn</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">ofList</span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"mi\">2</span><span class=\"o\">])</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GameOn</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"s\">\"show\"</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">GameOn</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GameOn</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"s\">\"left\"</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"s\">\"right\"</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"s\">\"up\"</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"s\">\"down\"</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Win</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">GameOver</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Lose</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">GameOver</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">Next</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">Next</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">containsKey</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">GameOn</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"o\">(</span><span class=\"n\">aux</span><span class=\"bp\">()</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>There is really not a lot to this. The active pattern at the top cycles through all the possible grid states, collecting the highest cells and whether or not all the cells are populated. With this information it can return if the game has been won, lost, or should continue.</p>\n\n<p>When the game is running, it simply looks at the direction that was selected, and pattern matches on the results of calling the composed step function using the active pattern above. Assuming the game is still running, it finds a random location to put a new 2 in, and returns the new data map.</p>\n\n<p></p>\n\n<h2>Conclusion</h2>\n\n<p>Now you can really spend time in Visual Studio playing games instead of working, because this is a lot more fun than minesweeper! 2048 Type Provider Edition for the win!</p>")) ((? . 8) f post (u . "PezHack–A Functional Roguelike") (? . 8) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2012/04/25/pezhack-a-functional-roguelike/index.html" . windows) (u . "/blog\\2012\\04\\25\\pezhack-a-functional-roguelike/") (u . "2012-04-25T08:37:00") (? . 9) (? . 35) (c (u . "fsharp") c (u . "game programming") c (u . "roguelike")) (u . "\n<p>In my quest to learn the functional paradigm, one thing I have struggled with is game development. Assuming I mostly stick to the functional style of having little to no mutable state, how do you go about writing games? Games are pretty much ALL mutable state. Obviously, in a multi-paradigm language like F# you can have mutable state - and if used judiciously this can be very effective (not to mention offer some significant performance improvements). The blend of imperative and functional styles can indeed work well, I wrote a few small games with XNA and F# using this approach. However, I am still more interested for educational value to stick with a more pure functional approach. Along they way I have wrote a few small games such as a functional console based Tetris in about 300 lines, and a two player console based PONG clone (using the libtcod library as I will introduce in a bit) that uses the Windows Kinect as the input (was cool!) In these programs I would tend to have the game state formed with an F# record that is copied/modified on each game cycle, passing the new state back into the loop. This works well and both of these games used no mutable state at all. This approach soon falls down with something more ambitious though, you can't realistically propagate the entire game state through one loop.</p>\n\n<h2>The Roguelike</h2>\n\n<p>I decided to create something a lot more complex whilst attempting to stick with the functional guns. If you don't know what a roguelike is you can read all about them <a href=\"http://en.wikipedia.org/wiki/Roguelike\" target=\"_blank\">here</a> and a great set of development resources with links to many on-going roguelike efforts <a href=\"http://roguebasin.roguelikedevelopment.org/index.php/Main_Page\" target=\"_blank\">here</a>. I used to play these games a lot. Stemmed from D&amp;D back in the days where the only computers were the terminal sort in colleges in universities (before I was alive!), a roguelike traditionally uses just ASCII characters as its graphics, leaving the rest to the player's imagination. If you haven't tried this before I highly recommend you try one, Nethack is probably the biggest most complicated one out there, but you can also play the original Rouge (where the <em>roguelike</em> genre name comes from) online <a href=\"http://www.hexatron.com/rogue/\" target=\"_blank\">here</a>. A few things that make a roguelike;</p>\n\n<ul>\n <li>Random procedurally generated dungeons - every time you play there is a new dungeon</li>\n <li>Randomness in item drops - until things have been identified, you don't know what they are. The \"clear potion\" might be a healing potion in one game and a potion that causes severe hallucinations in the next</li>\n <li>Peramadeath and hard difficulty. These games are <em><strong>hard.</strong></em> Expect to die lots, and when you die you have to start again. Often the objective isn't to finish the game, but just see how long you can survive</li>\n <li>Roguelikes are usually turn-based affairs - although there is some variation with this</li>\n <li>Complexity - these games are amazingly complex and deep. The developer(s) don't have to worry about impressive graphics engines, so they can focus a lot more on interesting game mechanics. You will be amazed at some of the stuff you can do in a game like Nethack.</li></ul>\n\n<p>Here's a picture from Nethack to illustrate how a typical roguelike looks :</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/Nethack-kernigh-22oct2005-25_thumb2.png\"><img style=\"background-image: none; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;\" title=\"Nethack-kernigh-22oct2005-25_thumb2\" src=\"../../../../../img/old/Nethack-kernigh-22oct2005-25_thumb2_thumb.png\" alt=\"Nethack-kernigh-22oct2005-25_thumb2\" width=\"609\" height=\"447\" border=\"0\" /></a></p>") #t (u . "\n<p>In my quest to learn the functional paradigm, one thing I have struggled with is game development. Assuming I mostly stick to the functional style of having little to no mutable state, how do you go about writing games? Games are pretty much ALL mutable state. Obviously, in a multi-paradigm language like F# you can have mutable state - and if used judiciously this can be very effective (not to mention offer some significant performance improvements). The blend of imperative and functional styles can indeed work well, I wrote a few small games with XNA and F# using this approach. However, I am still more interested for educational value to stick with a more pure functional approach. Along they way I have wrote a few small games such as a functional console based Tetris in about 300 lines, and a two player console based PONG clone (using the libtcod library as I will introduce in a bit) that uses the Windows Kinect as the input (was cool!) In these programs I would tend to have the game state formed with an F# record that is copied/modified on each game cycle, passing the new state back into the loop. This works well and both of these games used no mutable state at all. This approach soon falls down with something more ambitious though, you can't realistically propagate the entire game state through one loop.</p>\n\n<h2>The Roguelike</h2>\n\n<p>I decided to create something a lot more complex whilst attempting to stick with the functional guns. If you don't know what a roguelike is you can read all about them <a href=\"http://en.wikipedia.org/wiki/Roguelike\" target=\"_blank\">here</a> and a great set of development resources with links to many on-going roguelike efforts <a href=\"http://roguebasin.roguelikedevelopment.org/index.php/Main_Page\" target=\"_blank\">here</a>. I used to play these games a lot. Stemmed from D&amp;D back in the days where the only computers were the terminal sort in colleges in universities (before I was alive!), a roguelike traditionally uses just ASCII characters as its graphics, leaving the rest to the player's imagination. If you haven't tried this before I highly recommend you try one, Nethack is probably the biggest most complicated one out there, but you can also play the original Rouge (where the <em>roguelike</em> genre name comes from) online <a href=\"http://www.hexatron.com/rogue/\" target=\"_blank\">here</a>. A few things that make a roguelike;</p>\n\n<ul>\n <li>Random procedurally generated dungeons - every time you play there is a new dungeon</li>\n <li>Randomness in item drops - until things have been identified, you don't know what they are. The \"clear potion\" might be a healing potion in one game and a potion that causes severe hallucinations in the next</li>\n <li>Peramadeath and hard difficulty. These games are <em><strong>hard.</strong></em> Expect to die lots, and when you die you have to start again. Often the objective isn't to finish the game, but just see how long you can survive</li>\n <li>Roguelikes are usually turn-based affairs - although there is some variation with this</li>\n <li>Complexity - these games are amazingly complex and deep. The developer(s) don't have to worry about impressive graphics engines, so they can focus a lot more on interesting game mechanics. You will be amazed at some of the stuff you can do in a game like Nethack.</li></ul>\n\n<p>Here's a picture from Nethack to illustrate how a typical roguelike looks :</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/Nethack-kernigh-22oct2005-25_thumb2.png\"><img style=\"background-image: none; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;\" title=\"Nethack-kernigh-22oct2005-25_thumb2\" src=\"../../../../../img/old/Nethack-kernigh-22oct2005-25_thumb2_thumb.png\" alt=\"Nethack-kernigh-22oct2005-25_thumb2\" width=\"609\" height=\"447\" border=\"0\" /></a></p>\n<!-- more-->\n\n<h2>&iquest; What Am I Trying To Achieve ?</h2>\n\n<p>First and foremost this is another learning exercise. Programming games in a functional style is hard. There is Functional Reactive Programming which bases a lot of things on time, I have yet to try this. My approach will be to isolate the various subsystems and allows them to communicate only using Erlang style message passing. The F# mailbox processor is an awesome tool in the box to achieve this, and it also gives a way for each sub system to cycle and keep its own state whilst preventing anything else even seeing it unless expressed through messages.</p>\n\n<p>As far as I can see there are virtually no RL's completed or in development using functional languages (except <em>LambdaHack,</em>a RL engine written in Haskell), which is surprising because there are literally hundreds and hundreds out there. Some of the things I am hoping to achieve with my approach :</p>\n\n<ul>\n <li>I have written a lot of game code of all kinds, from text based things, to 2D and 3D, on Amigas, Phones and PCs. I worked on a MMO Ultima Online server for 5 years. 90% of bugs in all games come from complex shared mutable state and huge object hierarchies. I am aiming to almost entirely remove this class of bug.</li>\n <li>Performance is not a concern, I am not worrying about memory footprints or speed. The game is turn based anyway. However, the systems are designed in a way where I could switch to using some faster imperative data structures in areas without compromising the safety provided by the message passing style.</li>\n <li>The ability to use discriminated unions, pattern matching, active patterns, higher order functions and other functional features to (hopefully) greatly ease the work required to add new features, items, or change existing mechanics.</li>\n <li>Produce a pretty complex RL with relatively little code. A game like Nethack is 145,000 lines of C (!!). Whilst this has been in development for about 25 years from lots of people, the staggering amount of code (given what the game is) can soon become all sorts of problems when you try to change or add anything.</li></ul>\n\n<p>To attempt this I will be using the very awesome <a href=\"http://doryen.eptalys.net/libtcod/features/\" target=\"_blank\">libtcod</a><em></em> which is a free library that provides a SDL based console capable of true colour. It has some nifty RL features built in such as Field of View calculators, Map generators, path finding algorithms and so on - I probably won't be using these bits as I would prefer to write my own, but may well take advantage of some to get the thing off the ground. I use this console for all my little games, simulations and demos these days - very cool!</p>\n\n<h2>Initial Agent based systems</h2>\n\n<p>Before anything interesting can happen I am going to need a way of rendering basic graphics. For this I will use a dedicated Agent that has isolated state from the rest of the system (as explained earlier.) In order to display graphics on the console I will need to know the following bits of information that represent how something is displayed:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">VisualData</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Text</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">ForeColour</span><span class=\"o\">:</span><span class=\"n\">TCODColor</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">BackColour</span><span class=\"o\">:</span><span class=\"n\">TCODColor</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"o\">}</span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">EntityDisplayData</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">Position</span><span class=\"o\">:</span><span class=\"n\">Point</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">Visual</span><span class=\"o\">:</span><span class=\"n\">VisualData</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">ZOrder</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Point is self explanatory, is used everywhere and is not specific to graphics. The VisualData record determines what should be displayed; Text is the string which should be displayed &ndash; this mostly always going to be just a single character but may occasionally be a string. The two colours are self explanatory, except the back colour is an Option type &ndash; this is so you don&rsquo;t have to specify a back colour and it will be rendered with whatever the current backcolour at that cell is. I don&rsquo;t think I will need this functionality for the forecolour as well but it will be easy to add later if required. Finally the EntityDisplayData record is what the graphics processor will care about &ndash; this defines everything it needs to know about how to render something, with it having no idea what that something is. These three records are defined in the Common module where they can be accessed by the various other subsystems. The graphics processor itself is formed of a MailboxProcessor that takes a GraphicsMessage type, and internally cycles a state.</p>\n\n<div class=\"brush: fshapr\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span>private GraphicsMessages =\n    | Render                of UnitReply\n    | ClearWorld            of UnitReply\n    | UpdateWorld           of EntityDisplayData list * UnitReply      \n    ....\n   \ntype private GraphicsState =\n    { worldBuffer          : TC\n      primaryBuffer        : TC                  \n      entityDisplayData    : Map&lt;Guid,EntityDisplayData&gt;\n      ... }\n\ntype GraphicsProcessor(width,height,fontFile) =\n   \n    do if System.IO.File.Exists(fontFile) = false then failwith &lt;| sprintf \"Could not find font file at location %s\" fontFile\n    do TCODConsole.setCustomFont(fontFile,int TCODFontFlags.Grayscale ||| int TCODFontFlags.LayoutAsciiInRow)\n    do TCODConsole.initRoot(width,height,\"Pezi - Pink Squirrel from the Abyss\", false, TCODRendererType.SDL)\n\n    let agent = Agent&lt;GraphicsMessages&gt;.Start( fun inbox -&gt;\n        let rec loop state = \n            async { let! msg = inbox.Receive()\n                        match msg with\n                        | Render(reply) -&gt;  \n\t\t\t  reply.Reply()\n\t\t\t  return! loop state\n                    ...             }\n        loop \n             { worldBuffer           = new TC(width,height);\n               primaryBuffer         = new TC(width,height);\n               entityDisplayData     = Map.empty})\n    \n    member x.Render()                          =  agent.PostAndReply Render\n    member x.UpdateWorld displayData           =  agent.PostAndReply(fun reply -&gt; UpdateWorld(displayData,reply))\n    member x.ClearWorld()                      =  agent.PostAndReply ClearWorld\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>(syntax highlighter messed up some of the indentation there..)</p>\n\n<p>The messages and state are both private, consumers can post a message via members on the type that provide Post-And-Reply only functionality. That is, all the calls are effectively synchronous in as much as all calls wait for a reply from the agent before handing execution back to the calling thread. UnitReply is simply an alias for AsyncReplyChannel, Agent is MailboxProcessor and TC is the TCODConsole, all defined in the common module. This is the general approach that will be used for all the subsystems allowing me to maintain a high degree of isolation and separating concerns as much as possible. The only place state can ever be modified and selected elements of immutable state can be accessed is within or through these agent loops.</p>\n\n<p>Obviously, I have not shown any of the actual implementation here and the graphics agent is substantially more fleshed out, currently having 10 messages and a state about double the size of the one shown here. Here is a pic of what it currently looks like (still very young!)</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_thumb3.png\"><img style=\"background-image: none; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;\" title=\"image_thumb3\" src=\"../../../../../img/old/image_thumb3_thumb.png\" alt=\"image_thumb3\" width=\"785\" height=\"421\" border=\"0\" /></a></p>\n\n<p>The total thing is about 1500 lines of F# at the moment, and it is somewhat operational with the main systems being in. These are comprised of :</p>\n\n<ul>\n <li><strong>Graphics agent</strong> &ndash; handles maintaining all the state to do with drawing stuff on the screen, including the player stats and bits n the left, the messages at the bottom, any menus, the title screen, and so on.</li>\n <li><strong>World agent</strong> &ndash; handles the actual world state itself, including accessing, adding, removing and updating map tiles, monsters, items, the player itself, field-of-view calculations, the current turn and so forth</li>\n <li><strong>Player action agent</strong> &ndash; handles the input from the player and does stuff. This was one of the trickiest parts because many actions are split across input cycles, and some actions might fail but default to another action depending on some outcome. As an example of the former, if a player wants to throw something the game will ask what they want to throw and then which direction in which to throw it &ndash; the agent must remember where it is in the cycle and be able to exit the cycle at any time (the player might press an invalid key or want to cancel). Depending on these choices the player&rsquo;s turn might end, possibly for more than one turn, or not. Or the game might need to pass a few cycles without progressing the game state whilst it &ldquo;animates&rdquo; a flying projectile. In addition to this many of these sub-actions such as choosing something from the inventory or accepting a direction are shared by many different actions. (fun fun!). As an example of the latter, if a player tried to move into a door or a monster the state might change to ask if they want to open the door (switching into the open action) or automatically attack the monster. I plan to write a post about this one at a later date as it is quite an interesting problem to address. I wanted to address all of this in a general re-usable manner and not fully hard-code each action which would have been next to impossible without totally destroying my nice agent based approach.</li>\n <li><strong>Monster action agent</strong> &ndash; similar to the player action agent except this obviously doesn&rsquo;t require input, but might still need to perform &ldquo;animation&rdquo; and so on. The monster AI is executed here which will be fairly general so monsters can share common bits of AI and / or provide their own special bits.</li>\n <li><strong>Event processor agent</strong> &ndash; this agent holds a list of events that are going to happen on a pre-determined turn, and on each turn anything up for action executes a function that it has been passed. This is used for all sorts of thing such as health re-generation, poison, spell effects, ominous messages, hunger, etc.</li></ul>\n\n<p>In addition to this lot the basic concepts of combat are in along with the beginnings of an item and inventory system &ndash; you can currently pick stuff up and use some of it, throw it around (and kill stuff in the process). Then there is the dungeon generator which is currently a fairly crude affair that I will focus on a lot more later.</p>\n\n<p>I have already scrapped two approaches, this is my third go and its not coming on too badly so far, the agent system is very manageable and difficult to accidentally let it get out of control. The whole thing is likely still miles from being decent but it&rsquo;s been a good learning experience so far.</p>\n\n<p>Hopefully I will continue these posts, detailing some of the systems and sharing progress, but then I always post part 1 of articles and never get round to writing another part before I get distracted by something else. Comments welcome&hellip;</p>")) ((? . 10) f post (u . "Solving Puzzle Quest with F# Part 1") (? . 10) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/04/17/solving-puzzle-quest-with-f-part-1/index.html" . windows) (u . "/blog\\2014\\04\\17\\solving-puzzle-quest-with-f-part-1/") (u . "2014-04-17T04:57:00") (? . 29) (? . 45) (c (u . "fsharp")) (u . "\n<p><a href=\"http://tomasp.net/blog/2014/puzzling-fsharp/index.html\">Tomas Petricek posted an article recently</a> about how he used F# to solve a puzzle he had been given for Christmas. This reminded me of several similar mini-projects I have developed in the past, the most recent being a program to help solve a specific sort of puzzle in the game <a href=\"http://store.steampowered.com/app/12500/\">Puzzle Quest</a>, which I shall now describe.</p>\n\n<p>Puzzle Quest is a match-3 game, with various game modes. One game mode in particular, &ldquo;Capture&rdquo;, has a specific layout of tiles which can be matched in a certain way to leave no tiles behind at the end. Some of these are really quite tricky, and I thought it would be fun to write a program to solve them. Here is a example of a puzzle:</p>") #t (u . "\n<p><a href=\"http://tomasp.net/blog/2014/puzzling-fsharp/index.html\">Tomas Petricek posted an article recently</a> about how he used F# to solve a puzzle he had been given for Christmas. This reminded me of several similar mini-projects I have developed in the past, the most recent being a program to help solve a specific sort of puzzle in the game <a href=\"http://store.steampowered.com/app/12500/\">Puzzle Quest</a>, which I shall now describe.</p>\n\n<p>Puzzle Quest is a match-3 game, with various game modes. One game mode in particular, &ldquo;Capture&rdquo;, has a specific layout of tiles which can be matched in a certain way to leave no tiles behind at the end. Some of these are really quite tricky, and I thought it would be fun to write a program to solve them. Here is a example of a puzzle:</p>\n<!-- more-->\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_7.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_7.png\" alt=\"image\" width=\"199\" height=\"233\" border=\"0\" /></a></p>\n\n<h2>Domain</h2>\n\n<p>As ever with F#, the first thing you do is write the types you will need to represent the problem. Because the game is very much about mutable state, and the order of things is important, it is natural to represent the board itself as a two dimensional array. The game has a bunch of different tile types that can appear in the grid somewhere, which are easily modelled by the very awesome discriminated union:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Tile</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Yellow</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Blue</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Green</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Red</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Purple</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Coin</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Skull</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">Flaming</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Blank</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice skull is slightly different - this is because there are two types of skull. You get normal skulls, and exploding ones - they function the same in terms of matching, but when a flaming skull is part of a match, it also destroys all 8 tiles around it (recursively - this explosion can take out further exploding skulls). Thanks to the mega awesome discriminated union, I can really easily model additional behavior of the skull within the type.</p>\n\n<p>What else is required? Err&hellip; not much really, that&rsquo;s about it! One other small thing that will be required though is directions - the processing steps will have to move along in certain directions to discover matches, and other stuff</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Direction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h2>IO</h2>\n\n<p>Obviously, I need an easy way to express a board, and a way to print them as well. This is very easily done with a string:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">createBoard</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Replace</span><span class=\"o\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                 </span><span class=\"o\">.</span><span class=\"n\">Replace</span><span class=\"o\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r</span><span class=\"s\">\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                 </span><span class=\"o\">.</span><span class=\"n\">Replace</span><span class=\"o\">(</span><span class=\"s\">\" \"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">).</span><span class=\"n\">ToCharArray</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n\n<span class=\"w\">  </span><span class=\"nn\">Array2D</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"o\">+</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;y&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Yellow</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;b&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Blue</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;g&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Green</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;r&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Red</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;c&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Coin</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;p&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Purple</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;s&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Skull</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;S&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Skull</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;_&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Blank</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwithf</span><span class=\"w\"> </span><span class=\"s\">\"unexpected input &#39;%c&#39;\"</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">printBoard</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">sb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Text</span><span class=\"p\">.</span><span class=\"n\">StringBuilder</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">board</span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Array2D</span><span class=\"p\">.</span><span class=\"n\">iteri</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">tile</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tile</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Yellow</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"y\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Blue</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"b\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Green</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"g\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Red</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"r\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Skull</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"S\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Skull</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"s\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Purple</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"p\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Coin</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"c\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Blank</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">Append</span><span class=\"o\">(</span><span class=\"s\">\"_\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">AppendLine</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Nice and simple so far, now I can create a board by doing something like this</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">wight</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">createBoard</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"s\">\"\"\"___rr___ </span>\n<span class=\"s\">    ___rr___ </span>\n<span class=\"s\">    ___gg___ </span>\n<span class=\"s\">    ___rr___ </span>\n<span class=\"s\">    _g_gg_g_ </span>\n<span class=\"s\">    _g_gg_g_ </span>\n<span class=\"s\">    _sgssgs_ </span>\n<span class=\"s\">    sggssggs </span>\n<span class=\"s\">    \"\"\"</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h2>Processing Logic</h2>\n\n<p>Now for the good stuff .. before thinking about attempting to solve a puzzle, first I must be able to fully emulate the process that occurs when two tiles are swapped (the player makes a move).</p>\n\n<ol>\n <li>Swap the two tiles</li>\n <li>Search in all directions from the two new tiles to find a chain of 2+ tiles of the same type</li>\n <li>The resulting tiles will need to be removed - but watch out for flaming skulls! these will also remove all their neighbours, and this process will continue if more flaming skulls are hit in the explosion</li>\n <li>Once all the tiles have been removed, all tiles above the removed ones will need to be moved down the correct amount of places to fill the gaps</li>\n <li>Now, ALL tiles that were affected (eg all the ones that were moved down to fill gaps) will need to have this whole process from 2. performed on them, to find any chain-matches. Not only that, but they must all be processed at the SAME time to ensure the configuration of the board is not changed between evaluating each affected tile.</li></ol>\n\n<p>Whew - this is actually pretty complicated! There&rsquo;s various things to trip over on the way, but as you can see a lot of this lends itself well to recursive processing, which means that as usual F# is an awesome fit for this kind of problem.</p>\n\n<p>Firstly, a small function that safely gets the neighbour of a tile in a given direction</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getNeighbour</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span><span class=\"n\">Tile</span><span class=\"o\">[,])</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"n\">row</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"n\">row</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">],</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And a special one to safely get all surrounding tiles, for use with processing those pesky flaming skulls</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getSurroundingTiles</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span><span class=\"n\">Tile</span><span class=\"o\">[,])</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">[-</span><span class=\"mi\">1</span><span class=\"o\">,-</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"o\">,-</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"o\">,-</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">;]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rd</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And next a very cool function that, given a starting location and direction, will produce a sequence of tiles until a different kind of tile is found. Seq.unfold is a very nice way of achieving this. If you are new to functional programming then Seq.unfold will likely make your head explode, play around with it though as it&rsquo;s great once you understand how to use it!</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">unfoldMatches</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">,</span><span class=\"n\">direction</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">unfold</span><span class=\"o\">(</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">,</span><span class=\"n\">direction</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">getNeighbour</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">tile</span><span class=\"o\">,</span><span class=\"n\">newRow</span><span class=\"o\">,</span><span class=\"n\">newCol</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">tile</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">((</span><span class=\"n\">tile</span><span class=\"o\">,</span><span class=\"n\">newRow</span><span class=\"o\">,</span><span class=\"n\">newCol</span><span class=\"o\">),(</span><span class=\"n\">newRow</span><span class=\"o\">,</span><span class=\"n\">newCol</span><span class=\"o\">,</span><span class=\"n\">direction</span><span class=\"o\">))</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice <em>when f tile</em> - <em>f</em>is a function that is passed in, and it is used to determine when the sequence should stop. The reason I have not simply used equality on the tile type is because those pesky skulls again. Whilst Skull(true) and Skull(false) are the same union case, they are not equivalent, however for purposes of the matching they should always be treated as equivalent - this is achieved via <em>f</em> as you will see soon. This is also the reason why the unfold function returns the tile types - this wouldn&rsquo;t usually be necessary as I should already <em>know</em> the tile type, but in the case of the skulls I need to be able to disambiguate them at a later stage, so the flaming ones can be processed appropriately.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getBasicMatches</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span><span class=\"n\">Tile</span><span class=\"o\">[,])</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Left</span><span class=\"o\">,</span><span class=\"n\">Right</span><span class=\"o\">;</span><span class=\"n\">Up</span><span class=\"o\">,</span><span class=\"n\">Down</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dira</span><span class=\"o\">,</span><span class=\"n\">dirb</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">unfoldMatches</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">dira</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">unfoldMatches</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">dirb</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"o\">_::_::_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"c1\">// don&#39;t forget to include the original tile </span>\n<span class=\"w\">     </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">matches</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">],</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)::</span><span class=\"n\">matches</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"n\">id</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function might be confusing for various reasons! Notice here that I match <em>both</em> left and right at the same time, then <em>both</em>up and down at the same time. The reason for this is because the tile in question might be in the centre of a 3+ match, therefore I cannot simply check left or right. This approach instead does both at the same time, appends the results together, then looks at the resulting list. If it has 2 or more tiles -achieved using list pattern match ( _::_::_ ) that matches 2 or more elements plus a tail - then it is returned. I use 2 here and not 3 because the tile under question is not included in the match, which is why it is added afterwards to the results. Finally, the lists are flattened out into one big list of results using <em>List.collect</em> <em>id</em></p>\n\n<p>But wait! I've forgotten about those damn flaming skulls.. this bit is a little tricky. Given the matches returned, I need to find any flaming skulls, and add all their surrounding tiles to the results list - and if any of those surrounding tiles are also flaming skulls, the process has to be repeated recursively.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// get all 3+ of a kind matches from a given point, </span>\n<span class=\"c1\">// including any chained flaming skulls along the path </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getMatches</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span><span class=\"n\">Tile</span><span class=\"o\">[,])</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">processFlamingSkull</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">getSurroundingTiles</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">partition</span><span class=\"o\">(</span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Skull</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">),_,_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">toRemove</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">toRemove</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">skulls</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">toRemove</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">skulls</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">processFlamingSkull</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"o\">((=)</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">toRemove</span><span class=\"o\">))</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">toRemove</span><span class=\"w\"> </span>\n<span class=\"w\">            </span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Blank</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"c1\">// for skulls, I want to match both types regardless of this type </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Skull</span><span class=\"o\">(_))</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">Skull</span><span class=\"o\">(_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">getBasicMatches</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"c1\">// collect up any chained flaming skull tiles and append to original results </span>\n<span class=\"w\">      </span><span class=\"n\">results</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Skull</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">),</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">processFlamingSkull</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"c1\">// all other tiles are a straight match </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(=)</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">getBasicMatches</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>More head exploders in here :) (pun fully intended.) In <em>processFlamingSkull</em>,<em>a</em>fter getting a skull&rsquo;s surrounding tiles, I use <em>List.partition</em> to split off any of them that are flaming skulls. If there are none, I just return the rest of the tiles. If there are some, the list is mapped over recursively using the same function, after first removing any skulls already encountered - otherwise I would get caught in infinite recursion. The results are collected up and finally appended to the other tiles to be destroyed. This function then returns one single big list that contains all tiles destroyed by chained flaming skulls.</p>\n\n<p>PHEW! There&rsquo;s still a lot left though, first of which is the &ldquo;gravity&rdquo; effect after removing tiles. This is actually fairly complicated depending on how you choose to do it. It is essentially like &ldquo;defragging&rdquo; an array, and there might be several blocks of empty tiles to deal with in any column. I figured that the easiest way to do this would be as follows:</p>\n\n<p>For a column that had tiles removed</p>\n\n<ol>\n <li>Create a list of tiles from the bottom up, skipping out any blanks</li>\n <li>Blank the entire column</li>\n <li>Place tiles back in the order from the list</li></ol>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// performs \"gravity\" effect on a column, and returns </span>\n<span class=\"c1\">// affected tiles </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">defragColumn</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span><span class=\"n\">Tile</span><span class=\"o\">[,])</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">blankTiles</span><span class=\"o\">,</span><span class=\"n\">activeTiles</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]]</span><span class=\"w\"> </span>\n<span class=\"w\">                                 </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">partition</span><span class=\"o\">(</span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"n\">Blank</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">Blank</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">activeTiles</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">iteri</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"mi\">7</span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">blankTiles</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Blank</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I realised that once all columns had been &ldquo;defragged&rdquo; that all the affected tiles on the board would now need to go through the whole match cycle again, <em>at the same time</em>, to process any chain-matching caused from the tiles dropping down. However, I don&rsquo;t want to process the <em>whole</em>board (although that would be fine, as it is tiny). Instead I&rsquo;d like to be clever about it and only process tiles that could possibly be affected. As far as I can tell, this is any tile that was blanked out and now had something else fall into it - so this is why the function above also returns a list of tiles that were empty before the gravity kicked in and are no longer empty.</p>\n\n<p>So, the last piece of the puzzle (pun fully intended) before I can build something to solve the problem, is the core algorithm that uses all the above stuff to fully process a given amount of tiles that have been mutated, all at once.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// process a step - remove tiles and move ones above down </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">processStep</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">tilesToProcess</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"c1\">// get all matches from all affected tiles </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">matches</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">tilesToProcess</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">getMatches</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">ofList</span>\n\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"n\">Count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"c1\">// remove the tiles </span>\n<span class=\"w\">  </span><span class=\"n\">matches</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">Blank</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"c1\">// \"defrag\" / apply gravity </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">affectedTiles</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">matches</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"c1\">// get distinct column list from matches </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(_,_,</span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"c1\">// defrag and collect results </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">defragColumn</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">)))</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"c1\">// remove dupes </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">ofList</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Set</span><span class=\"p\">.</span><span class=\"n\">toList</span>\n<span class=\"w\">  </span>\n<span class=\"w\"> </span><span class=\"c1\">// recursively process all affected tiles in one pass </span>\n<span class=\"w\"> </span><span class=\"n\">processStep</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">affectedTiles</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>This is it! This function takes in any amount of tile locations with which to process. It then finds all 3+ matches and chained exploding skull tiles. All the matches are then removed. Then, for each distinct column involved in the matches, the &ldquo;defrag / gravity&rdquo; process is called, which returns all further tiles that have subsequently been affected - these then have any duplicates removed, and the whole process is called recursively until no new matches are found.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">makeMove</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span><span class=\"n\">Tile</span><span class=\"o\">[,])</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"c1\">// swap tiles </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">tile</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span>\n\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">getNeighbour</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">otherTile</span><span class=\"o\">,</span><span class=\"n\">otherRow</span><span class=\"o\">,</span><span class=\"n\">otherCol</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">otherRow</span><span class=\"o\">,</span><span class=\"n\">otherCol</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"n\">tile</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">board</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">otherTile</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">processStep</span><span class=\"w\"> </span><span class=\"n\">board</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">;</span><span class=\"n\">otherRow</span><span class=\"o\">,</span><span class=\"n\">otherCol</span><span class=\"o\">])</span>\n\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"illegal move\"</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function lets me perform a move on a given board configuration, so the behaviours can be tested. The Wight puzzle from the start of the post can be solved like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">makeMove</span><span class=\"w\"> </span><span class=\"n\">wight</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">makeMove</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">makeMove</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">makeMove</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">makeMove</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">Down</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">makeMove</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">Up</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">makeMove</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">Up</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Cool! Effectively I have now completely emulated the puzzle quest mechanics, you could very easily use this processing code to write your own match-3 game :)</p>\n\n<p>Next up is how to actually find solutions to a given puzzle. This challenge is equally fraught with peril. How can you determine which moves are currently possible? Is it possible to simply brute-force, or is the problem space too big? Will I run into tail-call issues? Will it be super-slow, and if so can it be improved with various optimisation techniques?</p>\n\n<p>Stay tuned for the next part to find out!</p>")) ((? . 11) f post (u . "Racket Macros : Scurry") (? . 11) 1538362840 (p+ #"C:\\repos\\pezipink.github.io\\blog/2017/08/04/racket-macros-scurry/index.html" . windows) (u . "/blog\\2017\\08\\04\\racket-macros-scurry/") (u . "2017-08-04T14:12:48") (? . 25) (? . 12) (c (u . "racket") c (u . "scurry") c (u . "drey") c (u . "compilers") c (u . "programming languages") c (u . "macros")) (u . "\n<p>This post will be about <a href=\"http://docs.racket-lang.org/guide/macros.html\">Racket macros</a>. As a delivery mechanism, I will be using bits of my latest project, which is a virtual machine designed for emulating multiplayer networked board games via <a href=\"http://zeromq.org/\">ZeroMQ</a>. drey-vm executes compiled bytecode files - much like the CLR or JVM - using an instruction set of my design.</p>\n\n<p>The design of the computer is out of the scope of this post (maybe another post if people are interested in it - let me know in the comments!?) suffice to stay it is written in D and is mostly a stack based computer, supporting functional and imperative programming. It has a string/object dictionary as its primary type,like lua and js.</p>\n\n<p>Much like <a href=\"http://pinksquirrellabs.com/blog/2017/05/30/asi64/\">asi64</a>, I wrote an assembler for the virtual machine in Racket. On top of that assembler I can now build a language (scurry). To start with, I am just creating a Racket language that is still a lisp - Racket has the fantasic power of being able to build macros on macros, gradually introducing higher level syntatic forms. In this way, I don&rsquo;t really need write an actual compiler. Racket gives me the front end of the compiler for free (being lisp), and the macros-over-assembler method is a very fun and flexibile way to build up a language.</p>") #t (u . "\n<p>This post will be about <a href=\"http://docs.racket-lang.org/guide/macros.html\">Racket macros</a>. As a delivery mechanism, I will be using bits of my latest project, which is a virtual machine designed for emulating multiplayer networked board games via <a href=\"http://zeromq.org/\">ZeroMQ</a>. drey-vm executes compiled bytecode files - much like the CLR or JVM - using an instruction set of my design.</p>\n\n<p>The design of the computer is out of the scope of this post (maybe another post if people are interested in it - let me know in the comments!?) suffice to stay it is written in D and is mostly a stack based computer, supporting functional and imperative programming. It has a string/object dictionary as its primary type,like lua and js.</p>\n\n<p>Much like <a href=\"http://pinksquirrellabs.com/blog/2017/05/30/asi64/\">asi64</a>, I wrote an assembler for the virtual machine in Racket. On top of that assembler I can now build a language (scurry). To start with, I am just creating a Racket language that is still a lisp - Racket has the fantasic power of being able to build macros on macros, gradually introducing higher level syntatic forms. In this way, I don&rsquo;t really need write an actual compiler. Racket gives me the front end of the compiler for free (being lisp), and the macros-over-assembler method is a very fun and flexibile way to build up a language.</p>\n<!-- more-->\n\n<h1 id=\"macros\">Macros</h1>\n\n<p>This post is about macros. I am still new to them and have learnt a lot, but am many many leagues from being an expert. Macros can be hard to get your head around and I spent many hours flailing around not knowing how to do stuff I wanted, so hopefully some of things I discovered might help someone else out.</p>\n\n<p>It is recommended you have already read Greg Hendershott&rsquo;s excellent <a href=\"http://www.greghendershott.com/fear-of-macros\">fear of macros</a> post, which I read many times!.</p>\n\n<p>Let&rsquo;s look at the basics. The VM has a special object with an id of &ndash;1 that represents the game&rsquo;s global state. In scurry, I would like to write this to retrieve it</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">get-state</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This should be rewritten to the op-codes that load the game object of id &ndash;1 and leave it on the stack. (this will be used in expressions or bound to some identifier later.) Eventually, when this program actually executes and assembles, it is expecting a big list of symbols that represent the program. Thus:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">get-state</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span><span class=\"w\"> </span><span class=\"n\">stx</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldval</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\">getobj</span><span class=\"p\">))]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>stx is the syntax object that repesents the Racket expression that has been passed in, including the &ldquo;get-state&rdquo; itself. We are then using syntax-parse to pattern match on this syntax object - we expect one value between parens which I have wildcarded out as I know it is &ldquo;get-state&rdquo; and don&rsquo;t care about it. This means if you try and use this macro with an argument, you&rsquo;ll get a compile error.</p>\n\n<p>Finally we return a syntax object using the shorthand form #&rsquo;( ). Since what I actually want to return is a list of symbols, we are quoting the response list (otherwise it would try and evaluate (ldval &ndash;1) and (getobj) as functions, which don&rsquo;t exist!).</p>\n\n<h1 id=\"eval-arg\">eval-arg</h1>\n\n<p>Now let&rsquo;s tackle the first major problem. In practially all other macros from here on out, they are going to accept some inputs. The inputs could be constant strings, numbers, bools, an identifier, or another scurry expression. To illustrate, let&rsquo;s say we wanted to write this</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p> x here is the name of a variable or binding. In drey-vm terms, it has to translate the usage of an identifier like this to storing or retrieving a named variable currently in scope on the call stack. The question is, how can we tell the difference between them and generate the correct code? Let&rsquo;s look at macro that will be used heavily from this point onwards.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span><span class=\"w\"> </span><span class=\"n\">stx</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">ident:id</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._with-syntax))\" style=\"color: inherit\">with-syntax</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">ident</span><span class=\"p\">))])</span>\n<span class=\"w\">     </span><span class=\"c1\">; if this is an identifier then it will be a string table lookup</span>\n<span class=\"w\">     </span><span class=\"c1\">; to a variable       </span>\n<span class=\"w\">     </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldvar</span><span class=\"w\"> </span><span class=\"ss\">name</span><span class=\"p\">)))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">expr:str</span><span class=\"p\">)</span><span class=\"w\">     </span>\n<span class=\"w\">     </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldvals</span><span class=\"w\"> </span><span class=\"ss\">expr</span><span class=\"p\">))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">expr:integer</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldval</span><span class=\"w\"> </span><span class=\"ss\">expr</span><span class=\"p\">))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">expr:boolean</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldvalb</span><span class=\"w\"> </span><span class=\"ss\">expr</span><span class=\"p\">))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"c1\">;otherwise let it pass through</span>\n<span class=\"w\">     </span><span class=\"o\">#'</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"p\">]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Several new and interesting things are happening here. Firstly, we are making use of <a href=\"https://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html?q=syntax%20class\">Racket&rsquo;s syntax classes</a>. These are the annoataions you see in the pattern match, :id :str :integer and :boolean. These are standard syntax classes supplied by the Racket language to help match on common things.</p>\n\n<p>The first case will only match if the passed argument is an identifier. Then, we introduce a new piece of syntax <em>name</em>, that is produced by unwrapping the syntax object <em>ident</em> and turning it into a string. We can then use it directly in the returned syntax block, &rsquo;((ldvar name)). If <em>ident</em> was the identifier <em>x</em>, it would produce the code &rsquo;((ldvar &ldquo;x&rdquo;)) which is what the assembler expects. Pretty cool huh!</p>\n\n<p>The subsequent 3 matches simply produce the correct op code to load the given int, string or bool constant.</p>\n\n<p>The last match catches all other expressions - in this case we do not want to directy output bytecode - we want to continue evaluating whatever it is. All we have to do here is simply return the bit of syntax as it is and let the Racket compiler continue its expansion of it where neccesary.</p>\n\n<p>The with-syntax part takes some getting your head around. It tends to be used so often that if you need just a single bit of extra syntax like we had in this case, there is a shortcut you can use:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">ident:id</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"kd\">#:with</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"w\">     </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldvar</span><span class=\"w\"> </span><span class=\"ss\">name</span><span class=\"p\">)))</span><span class=\"err\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In fact, since we will need to do this kind of thing all the time (turning an identifier into a name) we can even write out very own syntax class to help out!</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin-for-syntax))\" style=\"color: inherit\">begin-for-syntax</a></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._define-syntax-class))\" style=\"color: inherit\">define-syntax-class</a></span><span class=\"w\"> </span><span class=\"n\">binding</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._pattern))\" style=\"color: inherit\">pattern</a></span><span class=\"w\"> </span><span class=\"n\">x:id</span><span class=\"w\"> </span><span class=\"kd\">#:with</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">)))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice how this uses both the :id syntax class and the #:with shorthand to introduce a new piece of syntax. Now in the original code we can write this to get at it</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">ident:binding</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldvar</span><span class=\"w\"> </span><span class=\"ss\">ident.name</span><span class=\"p\">)))</span><span class=\"err\">]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Very nice, yes?</p>\n\n<h1 id=\"level-up\">Level up</h1>\n\n<p>Now let&rsquo;s see how we can use this previous macro in the context of other macros. Let&rsquo;s re-visit def. We wanted to write</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The macro pretty much writes itself</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\">             </span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">id:binding</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"c1\">;expr should calculate some value on the stack, or load a constant</span>\n<span class=\"w\">       </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"ss\">stvar</span><span class=\"w\"> </span><span class=\"ss\">id.name</span><span class=\"p\">)))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>So, we tell the macro to expect two bits of syntax, the first must match our handy <em>binding</em> syntax class from before, and some <em>expr</em>. Now, we don&rsquo;t know what <em>expr</em> is - it could be anything. Thankfully, our equally-handy <em>eval-arg</em> macro will sort it out for us. Notice here we are using a slightly different syntax to return the syntax object, usually we use #&rsquo;&rsquo;( ) but here we are using a backtick instead. This is because we are returning a quoted list, but there&rsquo;s one part of the list we <em>don&rsquo;t</em> want quoted, because we want racket to expand it - that is of course the <em>eval-arg</em> macro, which you can see is prefixed with , - a shorthand for <em>unquote</em>. If this doesn&rsquo;t make sense, study and play with it until it does, since it is very important and part of the secret sacue that makes writing these so nice.</p>\n\n<p>As an illustrative example, if we had not used the unquote, it would have simply returned a list of symbols ((eval-arg expr) (stvar &ldquo;x&rdquo;)). This is not what we want, eval-arg is not an opcode - what we wanted is for it to expand out to ((ldvals &ldquo;hello world&rdquo;)(stvar &ldquo;x&rdquo;)) or similar.</p>\n\n<p>Let&rsquo;s actually see this in action. First let&rsquo;s write a cool macro that will produce the assembly code for the VM to add two numbers together. It needs to load the numbers onto the stack and call the add instruction.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\">     </span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"ss\">add</span><span class=\"p\">))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Easy! Here we are using the shorthand <em>define-syntax-parser</em> so we don&rsquo;t have to keep writing the redundant <em>define-syntax</em>, <em>syntax-parse</em> stuff. The nested macros make short work of this task and our wonderful add macro will work with any constants <em>or nested expressions</em> just as you would expect it to.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"c1\">; this works!  </span>\n<span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"p\">))</span>\n<span class=\"c1\">; so does this!!</span>\n<span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>What about if we want our add macro to take more than two numbers, in the typical lisp style? For example, I&rsquo;d like to write (def z (add y z x)). Enter the ellipsis!</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\">     </span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\">add</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The use of the ellipsis here means the argument <em>right</em> can represent any amount of arguments. Then, in the syntax that is returned, we wrap the expression we want to repeat for each instance of <em>right</em> in some more parens and place the &hellip; after. The result of this is the following; If you call (add 1 2), after its nested macro expansion, you would get</p>\n\n<p>(ldval 1) (ldval 2) (add)</p>\n\n<p>And if you call (add 1 2 3 4) you will get</p>\n\n<p>(ldval 1) (ldval 2) (add) (ldval 3) (add) (ldval 4) (add)</p>\n\n<p>Very awesome, yes? (n.b. actually, there would be a few more parens in there due to the extra ones we had to put in to get the ellipsis pattern to work, I left them out here for readability - the assembler removes any excess)</p>\n\n<h1 id=\"further-adventures-in-macro-land\">Further adventures in macro land</h1>\n\n<p>Let&rsquo;s try something else. The language is pretty terrible with no conditionals and logical functions in it. We will try and implement <em>and</em>. The <em>and</em> macro should take any amount of expressions, evaluate them, and if any return <em>false</em> then we short-circuit out and load the constant value 0 on stack. If all return true, we load the constant value 1 on the stack.</p>\n\n<p>This needs some new bits to help it along - the assembler and bytecode can only deal in jumps to explict locations in memory, so we will need a way to label instructions so they can be used as jump targets. The assembler itself already supports this, and the details are out of scope of this post - let&rsquo;s look at the macro</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/syntax-util.html#(form._((lib._racket/syntax..rkt)._with-syntax*))\" style=\"color: inherit\">with-syntax*</a></span>\n<span class=\"w\">     </span><span class=\"p\">([</span><span class=\"n\">when-false</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-label</span><span class=\"p\">)]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-label</span><span class=\"p\">)]</span>\n<span class=\"w\">      </span><span class=\"p\">[(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"o\">#'`</span><span class=\"p\">((</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"ss\">ldvalb</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"ss\">beq</span><span class=\"w\"> </span><span class=\"ss\">when-false</span><span class=\"p\">))</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)])</span>\n<span class=\"w\">     </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\">ldvalb</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\">branch</span><span class=\"w\"> </span><span class=\"ss\">end</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\">when-false</span><span class=\"w\"> </span><span class=\"ss\">ldvalb</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\">end</span><span class=\"p\">)))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Hmm, what&rsquo;s going on here! A bunch of new stuff. Firstly, the <em>with-syntax*</em> form alows you to introduce several bits of syntax, where later ones are able to reference the earlier ones.</p>\n\n<p>You can see two labels are introduced <em>when-false</em> and <em>end</em> (the details are not important, its basically just a unique string). The we have some magic in <em>cases &hellip;</em>. You can see on the left hand side of the expression we have an ellipsis - this says that we are creating several bits of syntax here that we can refer to later, based on the ellipsis in the parent syntax, in this case our sequence of <em>expr</em> expressions.</p>\n\n<p>So, the implementation of a <em>case</em> is to evaluate the expression, load 0 on the to stack and then call the branch-equal (beq) opcode with the jump target of <em>when-false</em>. This is basically going to check each expression result against 0 (false) and if it is, then jump to the <em>when-false</em> label, short-circuiting the evaluation of the rest of the exressions.</p>\n\n<p>You can see then in the actual syntax that is returned, the first thing that happens is that the <em>cases &hellip;</em> syntax is spliced in using the unuqote mechanism. We know that if we reach the code beyond the cases, they must have all returned true - so we load 1 onto the stack and uncondtionally branch to the <em>end</em> label. Next, you can see the <em>when-false</em> label which loads 0 onto the stack and continues. Finally. the <em>end</em> label which signifies where whatever the next code to be assembled is.</p>\n\n<p>(note - the <em>cases &hellip;</em> did not have to be introduced in the <em>with-syntax</em>, it could have just been in the body like before - I was showing alternate ways to include ellipsis based syntax)</p>\n\n<h1 id=\"macros-in-macros-in-macros-in-macros-\">Macros in macros in macros in macros &hellip;</h1>\n\n<p>Let&rsquo;s take this to the next level by introducing a truly higher level macro, that is defined almost entirely using other macros. drey-vm has the concept of what I have called <em>flowroutines</em> TM. As their name indicates, they are similar to co-routines, and seamlessly handle getting a response from a particular client. To use them, you create a <em>flow</em> object and add a bunch of &ldquo;choices&rdquo; into it - these are basically a string and an index. Upon calling the opcode <em>suspend</em>, the VM will turn the flow object into a json request, send it to the client over ZMQ and suspend execution until it gets a result. When the client responds, the VM can assert the response is a valid one and then load the client&rsquo;s choice index on to the stack and continue executing. Here is an example on how it looks in a game I am writing.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def-λ</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">enter-temple</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"c1\">;player can donate up to three coins to the temple</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"p\">([(</span><span class=\"n\">clientid</span><span class=\"w\"> </span><span class=\"n\">coins</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"p\">])</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">def-λ</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">coins-&gt;temple</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">prop-=</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"s2\">\"coins\"</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">prop+=</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"s2\">\"points\"</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">prop+=</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"n\">clientid</span><span class=\"w\"> </span><span class=\"s2\">\"-coins\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gt</span><span class=\"w\"> </span><span class=\"n\">coins</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">flow</span><span class=\"w\"> </span><span class=\"n\">clientid</span><span class=\"w\"> </span><span class=\"s2\">\"donate to the temple\"</span>\n<span class=\"w\">         </span><span class=\"p\">([</span><span class=\"no\">#t</span><span class=\"w\">           </span><span class=\"s2\">\"1 coin\"</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">coins-&gt;temple</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[(</span><span class=\"n\">gt</span><span class=\"w\"> </span><span class=\"n\">coins</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s2\">\"2 coins\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">coins-&gt;temple</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[(</span><span class=\"n\">gt</span><span class=\"w\"> </span><span class=\"n\">coins</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s2\">\"3 coins\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">coins-&gt;temple</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"no\">#t</span><span class=\"w\">           </span><span class=\"s2\">\"do <a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a> donate\"</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">()])))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>There&rsquo;s several other scurry things you have not seen yet, including lambda functions with closures, <em>extract</em> which is a form of pattern matching, and function application ( ~ ). <em>flow</em> is what we are interested in here, though. You can see it accepts a clientid and some title, then it is followed by a list of expressions. Each expression starts with a predicate that determines if this choice shoud be included, then a name for the choice, and finally, an expression that will be evaluated if the user chooses that particular choice.</p>\n\n<p>They way I wrote this (and all the other higher level macros) is to simply write the syntax how I would like to use it (as above), then re-write what it will need to look like expanded, and finally attempt to write a macro to convert from one to the other. So, in this case, I would like the (flow &hellip;) expression above to be re-written to the following, rather boring and full of boiler-plate code, that has nothing do with the actual itent of what is happening:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">def-flow</span><span class=\"w\"> </span><span class=\"n\">some-generated-name</span><span class=\"w\"> </span><span class=\"s2\">\"enter temple\"</span><span class=\"p\">)</span>\n<span class=\"c1\">; add cases</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"no\">#t</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">add-flow-action</span><span class=\"w\"> </span><span class=\"n\">some-generated-name</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"s2\">\"1 coin\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gt</span><span class=\"w\"> </span><span class=\"n\">coins</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">add-flow-action</span><span class=\"w\"> </span><span class=\"n\">some-generated-name</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s2\">\"2 coins\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gt</span><span class=\"w\"> </span><span class=\"n\">coins</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">add-flow-action</span><span class=\"w\"> </span><span class=\"n\">some-generated-name</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s2\">\"3 coins\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"no\">#t</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">add-flow-action</span><span class=\"w\"> </span><span class=\"n\">some-generated-name</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"s2\">\"do <a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a> donate\"</span><span class=\"p\">))</span>\n<span class=\"c1\">; suspend to client</span>\n<span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">another-generated-name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flow</span><span class=\"w\"> </span><span class=\"n\">some-generated-name</span><span class=\"w\"> </span><span class=\"n\">clientid</span><span class=\"p\">))</span>\n<span class=\"c1\">; dispatch based on response</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">another-generated-name</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">coins-&gt;temple</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">another-generated-name</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">coins-&gt;temple</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]</span><span class=\"w\">  </span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">another-generated-name</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">coins-&gt;temple</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">another-generated-name</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">()])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I think we can agree, the proposed syntax is way nicer than having to manually write that lot all the time! However, it sems like a tall order - somehow we have to generate those index numbers, and although we are repeating code for each input case, we need several pieces of generated code in different places - how is it going to work? Amazingly, it is not that diffcult - other than a trick to generate the index numbers.</p>\n\n<p>Let&rsquo;s start with the flow clauses. They consist of three expressions each, and there may be several of them. Racket allows us to define a <em>splicing syntax class</em> that is exactly the same as the syntax classes we&rsquo;ve already seen except it works with ellipsis patterns. Here it is:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin-for-syntax))\" style=\"color: inherit\">begin-for-syntax</a></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._define-splicing-syntax-class))\" style=\"color: inherit\">define-splicing-syntax-class</a></span><span class=\"w\"> </span><span class=\"n\">flow-clauses</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._pattern))\" style=\"color: inherit\">pattern</a></span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._~7eseq))\" style=\"color: inherit\">~seq</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">eq-expr</span><span class=\"w\"> </span><span class=\"n\">case-title-expr</span><span class=\"w\"> </span><span class=\"n\">true-expr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">}</span>\n<span class=\"w\">             </span><span class=\"kd\">#:with</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._range))\" style=\"color: inherit\">range</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"n\">eq-expr</span><span class=\"p\">))))]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here you can see we expect a <em>flow-clause</em> to contain three expressions in brackets, and indicate there may be many of them with the ellipsis at the end. The #:with is some magic I struggled to get to work - however it is very similar to the <em>cases</em> from earlier - it indicates there will be one <em>n</em> for each pattern, and we produce a list of numbers from 0 to the amount of patterns that exist by using the <em>range</em> function and testing the <em>eq-expr</em> attribute&rsquo;s length from the syntax.</p>\n\n<p>Phew, that was a bit of a hard one. Thankfully, with that bit written and functioning, the rest is actually fairly striaght forward. Notice how it closely resembles the manually written out version above.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">flow</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">client</span><span class=\"w\"> </span><span class=\"n\">title-expr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr:flow-clauses</span><span class=\"p\">))</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._with-syntax))\" style=\"color: inherit\">with-syntax</a></span>\n<span class=\"w\">     </span><span class=\"p\">([</span><span class=\"n\">flow-name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._string-~3esymbol))\" style=\"color: inherit\">string-&gt;symbol</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-var</span><span class=\"p\">))]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">resp-name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._string-~3esymbol))\" style=\"color: inherit\">string-&gt;symbol</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-var</span><span class=\"p\">))])</span>\n<span class=\"w\">   </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">def-flow</span><span class=\"w\"> </span><span class=\"n\">flow-name</span><span class=\"w\"> </span><span class=\"n\">title-expr</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">((</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">s-when</span><span class=\"w\"> </span><span class=\"n\">expr.eq-expr</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">add-flow-action</span><span class=\"w\"> </span><span class=\"n\">flow-name</span><span class=\"w\"> </span><span class=\"n\">expr.n</span><span class=\"w\"> </span><span class=\"n\">expr.case-title-expr</span><span class=\"p\">))</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span><span class=\"w\">  </span>\n<span class=\"w\">       </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">resp-name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">flow</span><span class=\"w\"> </span><span class=\"n\">flow-name</span><span class=\"w\"> </span><span class=\"n\">client</span><span class=\"p\">))</span>\n<span class=\"w\">       </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">s-cond</span>\n<span class=\"w\">          </span><span class=\"p\">[(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">resp-name</span><span class=\"w\"> </span><span class=\"n\">expr.n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">expr.true-expr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">))]</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"w\"> </span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"ss\">suspend</span><span class=\"p\">))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice here how we use the ellipsis <em>twice</em> in this to generate code for the whens and the cond - racket is perfectly happy with this and pretty much does exactly what you expect! Fairly amazing stuff! The case at the bottom is an overloaded <em>flow</em> that does the actual work of loading the flow object, client, and calling <em>suspend</em> with it.</p>\n\n<h1 id=\"end\">End</h1>\n\n<p>I hope this post has given you some idea on the power of these racket macros! I still have a long way to go, no doubt - I am constantly surprised with the new stuff I learn. If you want to see more of these macros for scurry (there&rsquo;s over 1k lines of them) you can have a look in my <a href=\"https://github.com/pezipink/scurry/blob/master/asm.rkt\">github here</a>. If you are interested in seeing more of these or would like to know more about the virtual machine itself, please let me know in the comments!</p>\n\n<p>Happy macroing !</p>")) ((? . 13) f post (u . "Fairylog : Multiplexer Macros") (? . 13) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2019/04/23/fairylog-multiplexer-macros/index.html" . windows) (u . "/blog\\2019\\04\\23\\fairylog-multiplexer-macros/") (u . "2019-04-23T21:27:04") (? . 32) (? . 38) (c (u . "fairylog") c (u . "fpga") c (u . "digital logic") c (u . "racket")) (u . "\n<p>Multiplexers and demultiplexers are common tools in digital logic design. In Verilog, they are fairly simple to create whilst the amount of signals are small. In this post we&rsquo;ll look at how Fairylog&rsquo;s macros can make short work of generating mux/demux of any complexity, greatly reducing the amount of work and scope for hard-to-find bugs</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/fairylog/mux.png\" alt=\"\" />\n <p class=\"caption\"></p></div>") #t (u . "\n<p>Multiplexers and demultiplexers are common tools in digital logic design. In Verilog, they are fairly simple to create whilst the amount of signals are small. In this post we&rsquo;ll look at how Fairylog&rsquo;s macros can make short work of generating mux/demux of any complexity, greatly reducing the amount of work and scope for hard-to-find bugs</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/fairylog/mux.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n<!-- more-->\n\n<h3 id=\"mux\">MUX</h3>\n\n<p>A mutliplexer in its most basic form takes in a bunch of inputs, and based on a selection input, outputs one of them.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">fairylog</span>\n<span class=\"c1\">;2:1 mux</span>\n<span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">mux</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">in_a</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">in_b</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">])</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">assign</span><span class=\"w\"> </span><span class=\"n\">out</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">sel</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">in_a</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">in_b</span><span class=\"p\">])))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is about as simple as it gets. A 1 bit selection line that toggles the output between <code>in_a</code> and <code>in_b</code>. It produces this code and synths correctly to a MUX.</p>\n\n<div class=\"brush: verilog\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">mux</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">in_a</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">in_b</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"p\">);</span>\n<span class=\"k\">assign</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">in_a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">in_b</span><span class=\"p\">);</span>\n<span class=\"k\">endmodule</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In real world scenarios, we are typically moving lots more data around. Often it is nice to compact the data in arrays (vectors).</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">fairylog</span>\n<span class=\"c1\">;2:1 mux</span>\n<span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">mux</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\">  </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">assign</span><span class=\"w\"> </span><span class=\"n\">out</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">sel</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)])))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here we pass the bits in using the same port, and then select them out again in the <code>case</code> using the range selection syntax. You might think you can replace <code>case</code> with <code>(assign out (in sel))</code> but alas, this will not syth correctly to a MUX. For the tools to correctly infer a MUX you must supply a terminal case such as the <code>else</code> here, which Fairylog compiles out to a ternary expression.</p>\n\n<div class=\"brush: verilog\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">mux</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\"> </span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"p\">);</span>\n<span class=\"k\">assign</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"mb\">&#39;b0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"p\">[</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"p\">[</span><span class=\"mh\">1</span><span class=\"p\">]);</span>\n<span class=\"k\">endmodule</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is ok for small switches, but in reality we often need much larger multiplexers. Not only will the sizes of the data be greater, but we often want to swtich multiple signals at the same time based on the same selector. Verilog also has no way of passing two-dimensional data, so if you want to switch between multiple sets of 8 bits of data, you have to either pass each set in explicitly, or &ldquo;flatten&rdquo; it all out into one vector and then switch it out appropriately using ranges. Writing all that code is very time consuming, error prone and hard to maintain. <em>note: Verilog does have some rudimentary generation capabilities of its own</em></p>\n\n<h3 id=\"mux-macros\">MUX macros</h3>\n\n<p>Let&rsquo;s see if we can automate the process somewhat. The ony important pieces are the names and sizes of the signals, and then how to map the output based on the selector. For example, what if we could write this to generate a mux:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">mux-gen</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">my-mux</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;1 bit selector</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;2 bit input</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;1 bit output</span>\n<span class=\"w\">  </span><span class=\"c1\">;output mapping</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"w\">   </span><span class=\"c1\">; more cases here as you need them ...</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]))</span>\n<span class=\"w\">   </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Let&rsquo;s have a first go at it. <code>macro</code> is an alias for <a href=\"https://docs.racket-lang.org/syntax/Defining_Simple_Macros.html?q=define-syntax-parser#%28form._%28%28lib._syntax%2Fparse%2Fdefine..rkt%29._define-syntax-parser%29%29\">define-syntax-parser</a> and provides all of Racket&rsquo;s <a href=\"https://docs.racket-lang.org/syntax/stxparse-patterns.html\">amazing macro system</a>.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"n\">mux-gen</span>\n<span class=\"w\">  </span><span class=\"kd\">#:datum-literals</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">name:id</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">selector:id</span><span class=\"w\"> </span><span class=\"n\">sel-size</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">in:id</span><span class=\"w\"> </span><span class=\"n\">in-size</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">out:id</span><span class=\"w\"> </span><span class=\"n\">out-size</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"p\">([</span><span class=\"n\">case-n:integer</span><span class=\"w\"> </span><span class=\"n\">res:expr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">else-res:expr</span><span class=\"p\">]))</span>\n<span class=\"w\">  </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">name</span>\n<span class=\"w\">      </span><span class=\"p\">([</span><span class=\"n\">selector</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sel-size</span><span class=\"p\">]]</span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">in-size</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">out-size</span><span class=\"p\">]])</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">assign</span>\n<span class=\"w\">       </span><span class=\"n\">out</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">selector</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">case-n</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">else-res</span><span class=\"p\">])))])</span>\n\n<span class=\"p\">(</span><span class=\"n\">mux-gen</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">my-mux</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;1 bit selector</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;2 bit input</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;1 bit output</span>\n<span class=\"w\">  </span><span class=\"c1\">;output mapping</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">%0</span><span class=\"p\">)]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">%1</span><span class=\"p\">)]))</span>\n<span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This works and produces the same MUX as before. You can give it any amount of mappings in the case expression, as long as it ends with an <code>else</code> to ensure it gets synth&rsquo;d to a MUX correctly. (in this case it doesn&rsquo;t make sense to, since the input selector is only 1 bit)</p>\n\n<p>Since we allow multiple <code>in</code> expressions you can also write this, like the first example.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">mux-gen</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">my-mux</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;1 bit selector</span>\n<span class=\"w\">  </span><span class=\"c1\">; multiple inputs</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">in_a</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;2 bit input</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">in_b</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;2 bit input</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;1 bit output</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">in_a</span><span class=\"p\">]</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">in_b</span><span class=\"p\">]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is not very exciting at this stage. What we want is to be able to supply multiple input -&gt; output mappings for different signals based on the same selector.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">mux-gen</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">my-mux</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;1 bit selector</span>\n\n<span class=\"w\">  </span><span class=\"c1\">;first input -&gt; output mapping</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">a_signals</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;2 bit input</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">a_out</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"c1\">;1 bit output</span>\n<span class=\"w\">   </span><span class=\"c1\">;output mapping</span>\n<span class=\"w\">   </span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a_signals</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a_signals</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]))</span>\n<span class=\"w\">    </span>\n<span class=\"w\">  </span><span class=\"c1\">;another mapping</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">b_data</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;two sets of flattened 8 bit data</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">b_out</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"c1\">;8-bit output</span>\n<span class=\"w\">   </span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b_data</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b_data</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)]))</span>\n<span class=\"w\">    </span>\n<span class=\"w\">  </span><span class=\"c1\">; ... as many mappings as we like</span>\n<span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Really all we added here were some extra parens around the block of data after the <code>sel</code> so we can identifty it is a group, then added a new block of mappings. The change to the macro is quite simple:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"n\">mux-gen</span>\n<span class=\"w\">  </span><span class=\"kd\">#:datum-literals</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">name:id</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">selector:id</span><span class=\"w\"> </span><span class=\"n\">sel-size</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"p\">([</span><span class=\"n\">in:id</span><span class=\"w\"> </span><span class=\"n\">in-size</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">out:id</span><span class=\"w\"> </span><span class=\"n\">out-size</span><span class=\"p\">]</span>\n<span class=\"w\">       </span><span class=\"p\">([</span><span class=\"n\">case-n:integer</span><span class=\"w\"> </span><span class=\"n\">res:expr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">else-res:expr</span><span class=\"p\">]))</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">name</span>\n<span class=\"w\">      </span><span class=\"p\">([</span><span class=\"n\">selector</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sel-size</span><span class=\"p\">]]</span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">in-size</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">out-size</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">assign</span>\n<span class=\"w\">       </span><span class=\"n\">out</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">selector</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">case-n</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">else-res</span><span class=\"p\">]))</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We have put in the extra parens and slapped in some additional <code>...</code> to indicate the block can be repeated. Then, a few more <code>...</code> in the syntax output where we&rsquo;d like the generated code to be repeated, and we are done. Take special note of the <code>... ...</code> that now appears for the <code>in</code> ports. This is because we now have two nested layers of input ports and we wish to unwrap both of them into the port list. It produces this Verilog code:</p>\n\n<div class=\"brush: verilog\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">mux</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">1</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">a_signals</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">15</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">b_data</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">a_out</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">7</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">b_out</span><span class=\"w\"> </span><span class=\"p\">);</span>\n<span class=\"k\">assign</span><span class=\"w\"> </span><span class=\"n\">a_out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">a_signals</span><span class=\"p\">[</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a_signals</span><span class=\"p\">[</span><span class=\"mh\">1</span><span class=\"p\">]);</span>\n<span class=\"k\">assign</span><span class=\"w\"> </span><span class=\"n\">b_out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">b_data</span><span class=\"p\">[</span><span class=\"mh\">7</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b_data</span><span class=\"p\">[</span><span class=\"mh\">15</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">8</span><span class=\"p\">]);</span>\n<span class=\"k\">endmodule</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This little macro is now capable of generating huge custom MUX&rsquo;s to your specifications. Rejoice!</p>\n\n<h3 id=\"demux\">DEMUX</h3>\n\n<p>The demultiplexer is essentially the reverse - it takes in one input, and dispatches it to one of multiple outputs based on a selector. Like the multiplexer, we&rsquo;d typically need to do this for several signals at the same time. This is silghtly more tricky to write, and there are a few ways to do it. Here is what we are aiming at:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">demux</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">always</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">sel</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"p\">])))</span>\n<span class=\"w\">      </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>As you would imagine, we&rsquo;d like to support mutliple distinct output signals as well as combined signals like in the above example. An important point here is that we must make sure all outputs are defaulted to something (zero) otherwise it won&rsquo;t synth properly.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"n\">demux-gen</span>\n<span class=\"w\">  </span><span class=\"kd\">#:datum-literals</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">name:id</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">selector:id</span><span class=\"w\"> </span><span class=\"n\">sel-size:expr</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"n\">in:id</span><span class=\"w\"> </span><span class=\"n\">in-size:expr</span><span class=\"p\">]</span>\n<span class=\"w\">     </span><span class=\"p\">[</span><span class=\"n\">out:id</span><span class=\"w\"> </span><span class=\"n\">out-size:expr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"n\">case-n:integer</span><span class=\"w\"> </span><span class=\"n\">targ:expr</span><span class=\"w\"> </span><span class=\"n\">source:expr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span>\n<span class=\"w\">     </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">else-targ:expr</span><span class=\"w\"> </span><span class=\"n\">else-source:expr</span><span class=\"p\">]))</span>\n<span class=\"w\">   </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">name</span>\n<span class=\"w\">       </span><span class=\"p\">([</span><span class=\"n\">selector</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sel-size</span><span class=\"p\">]]</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">in-size</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">out-size</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">always</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">selector</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">case-n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">targ</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">else-targ</span><span class=\"w\"> </span><span class=\"n\">else-source</span><span class=\"p\">)])))</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is similar to the MUX implementation. Here we have used <code>...+</code> meaning &ldquo;at least one of the preceding&rdquo; rather than <code>...</code> that means &ldquo;zero or more of the preceding&rdquo;. The MUX macro would also benefit from this change. Other than the actual syntax generated, the only change here is that we have multiple <code>out</code> signals for one <code>in</code> signal.</p>\n\n<h3 id=\"custom-code\">Custom code</h3>\n\n<p>Whilst the generated <code>case</code> expressions are sufficient for most implementations, sometimes you might want something more custom. For example, let&rsquo;s say we wanted to determine the output of the MUX by looking at a range of the input bits, or we wanted to perform some other custom comparison.</p>\n\n<p>It would be nice then if we could choose to override the normal <code>case</code> or <code>always</code> generation and supply, <em>for that mapping</em>, our own expression to use instead. Something like this:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">mux-gen</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">my_mux</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;8 bit selector</span>\n\n<span class=\"w\">  </span><span class=\"c1\">;first input -&gt; output mapping</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">a_signals</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;8 bit input</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">a_out</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\">      </span><span class=\"c1\">;4 bit output</span>\n<span class=\"w\">   </span><span class=\"kd\">#:custom</span>\n<span class=\"w\">   </span><span class=\"c1\">;check if any of the upper 4 bits are set</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">assign</span><span class=\"w\"> </span><span class=\"n\">a_out</span><span class=\"w\">           </span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))</span><span class=\"w\">               </span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"n\">a_signals</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"n\">a_signals</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n\n<span class=\"w\">  </span><span class=\"c1\">; ... as many mappings with auto or custom as we like</span>\n\n<span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We can achieve this fairly easily by introducing a helper macro that deals with the body of the expression, simply passing along whatever was passed in when <code>#:custom</code> is detected:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">macro</span>\n<span class=\"w\"> </span><span class=\"n\">mux-gen-inner</span>\n<span class=\"w\"> </span><span class=\"kd\">#:datum-literals</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"kd\">#:custom</span><span class=\"w\"> </span><span class=\"n\">custom-expr</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">#'</span><span class=\"n\">custom-expr</span><span class=\"p\">]</span>\n<span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">selector</span>\n<span class=\"w\">     </span><span class=\"p\">([</span><span class=\"n\">case-n:integer</span><span class=\"w\"> </span><span class=\"n\">res:expr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">else-res:expr</span><span class=\"p\">]))</span>\n<span class=\"w\">  </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">assign</span>\n<span class=\"w\">     </span><span class=\"n\">out</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">selector</span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">case-n</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"n\">else-res</span><span class=\"p\">]))])</span>\n\n<span class=\"p\">(</span><span class=\"n\">macro</span>\n<span class=\"w\"> </span><span class=\"n\">mux-gen</span>\n<span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">name:id</span>\n<span class=\"w\">     </span><span class=\"p\">[</span><span class=\"n\">selector:id</span><span class=\"w\"> </span><span class=\"n\">sel-size</span><span class=\"p\">]</span>\n<span class=\"w\">     </span><span class=\"p\">([</span><span class=\"n\">in:id</span><span class=\"w\"> </span><span class=\"n\">in-size</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">out:id</span><span class=\"w\"> </span><span class=\"n\">out-size</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"n\">body-expr</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">name</span>\n<span class=\"w\">      </span><span class=\"p\">([</span><span class=\"n\">selector</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sel-size</span><span class=\"p\">]]</span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">in-size</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">out-size</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">mux-gen-inner</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">selector</span><span class=\"w\"> </span><span class=\"n\">body-expr</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And we are done. You could take this any way you like, even creating whole new languages over the top of Fairylog.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>This post intended to show some of the ways that Fairylog can help generate tons of boilerplate code for you - it is merely scratching the surface, however, as the Racket macro system is vast, and definitely something you should look into!</p>")) ((? . 14) f post (u . "Last-Fi") (? . 14) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2013/07/04/last-fi/index.html" . windows) (u . "/blog\\2013\\07\\04\\last-fi/") (u . "2013-07-04T04:55:00") (? . 27) (? . 22) (c (u . "digital logic") c (u . "electronics") c (u . "fsharp") c (u . "raspberry pi")) (u . "\n<h1>Introduction</h1>\n\n<p>This article will introduce Last-Fi &ndash; an F# powered internet radio player that uses a <a href=\"http://www.raspberrypi.org/\">Raspberry Pi</a> and <a href=\"http://www.last.fm/\">Last.Fm</a> services. The motivation behind this work was to both build something fun and useful for the Raspberry Pi that interfaces with various pieces of hardware, but can also show off some features that F# is great at within a hardware context.</p>\n\n<p>The result is Last-Fi &ndash; a highly asynchronous and stable music player. It is based around Last.Fm, but because it uses <a href=\"http://mpd.wikia.com/wiki/Clients\">MPD</a>to play music it only requires a few minor adjustments that will allow it to work with any music source, whilst retaining the ability to obtain artist information from Last.Fm. In terms of the hardware, you are able to control various aspects of Last.Fi with a controller from the 1980&rsquo;s Nintendo Entertainment System. Various information is displayed on a 2x16 back-lit LCD display. In addition to this, the program also hosts a <a href=\"http://www.servicestack.net/\">ServiceStack</a> webservice, and uses <a href=\"https://github.com/ZachBray/FunScript\">FunScript</a>, an F# to JavaScript compiler, in order to host a website that shows various information and allows direct control from any device on the same network.</p>\n\n<p>I presented a talk on this work at SkillsMatter in London (<a href=\"http://skillsmatter.com/podcast/scala/last-fi-an-f-powered-raspberry-pi-internet-radio\">here's the video</a>), and you can find the slide deck <a href=\"http://www.slideshare.net/RossMcKinlay1/last-fi\">here</a>. The code is all open source and you can find it on GitHub <a href=\"http://github.com/pezipink/Last.Fi/\">here</a> (disclaimer: this code is highly subject to change and is largely a toy project of mine)</p>\n\n<p>Last-Fi illustrates an extremely powerful programming language doing some of what it does best, the entire stack from the HTTP Last.FM API, to the hardware programming and even the JavaScript is written in F# code. Not only that, it is almost all concurrent and completely immutable &ndash; I have yet to experience a single problem with any of the software. The entire project is less than 800 lines of F#. If you are new to F# be sure to check out <a href=\"http://www.fsharp.org\">www.fsharp.org</a> and you can find instructions on how to get the Pi running with F# in a previous post I made <a href=\"http://www.pinksquirrellabs.com/post/2013/03/02/F-meets-the-Raspberry-Pi-.aspx\">here</a>.</p>\n\n<p><img src=\"../../../../../img/old/last-fi_case_small.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/last-fi_small.jpg\" alt=\"\" /></p>") #t (u . "\n<h1>Introduction</h1>\n\n<p>This article will introduce Last-Fi &ndash; an F# powered internet radio player that uses a <a href=\"http://www.raspberrypi.org/\">Raspberry Pi</a> and <a href=\"http://www.last.fm/\">Last.Fm</a> services. The motivation behind this work was to both build something fun and useful for the Raspberry Pi that interfaces with various pieces of hardware, but can also show off some features that F# is great at within a hardware context.</p>\n\n<p>The result is Last-Fi &ndash; a highly asynchronous and stable music player. It is based around Last.Fm, but because it uses <a href=\"http://mpd.wikia.com/wiki/Clients\">MPD</a>to play music it only requires a few minor adjustments that will allow it to work with any music source, whilst retaining the ability to obtain artist information from Last.Fm. In terms of the hardware, you are able to control various aspects of Last.Fi with a controller from the 1980&rsquo;s Nintendo Entertainment System. Various information is displayed on a 2x16 back-lit LCD display. In addition to this, the program also hosts a <a href=\"http://www.servicestack.net/\">ServiceStack</a> webservice, and uses <a href=\"https://github.com/ZachBray/FunScript\">FunScript</a>, an F# to JavaScript compiler, in order to host a website that shows various information and allows direct control from any device on the same network.</p>\n\n<p>I presented a talk on this work at SkillsMatter in London (<a href=\"http://skillsmatter.com/podcast/scala/last-fi-an-f-powered-raspberry-pi-internet-radio\">here's the video</a>), and you can find the slide deck <a href=\"http://www.slideshare.net/RossMcKinlay1/last-fi\">here</a>. The code is all open source and you can find it on GitHub <a href=\"http://github.com/pezipink/Last.Fi/\">here</a> (disclaimer: this code is highly subject to change and is largely a toy project of mine)</p>\n\n<p>Last-Fi illustrates an extremely powerful programming language doing some of what it does best, the entire stack from the HTTP Last.FM API, to the hardware programming and even the JavaScript is written in F# code. Not only that, it is almost all concurrent and completely immutable &ndash; I have yet to experience a single problem with any of the software. The entire project is less than 800 lines of F#. If you are new to F# be sure to check out <a href=\"http://www.fsharp.org\">www.fsharp.org</a> and you can find instructions on how to get the Pi running with F# in a previous post I made <a href=\"http://www.pinksquirrellabs.com/post/2013/03/02/F-meets-the-Raspberry-Pi-.aspx\">here</a>.</p>\n\n<p><img src=\"../../../../../img/old/last-fi_case_small.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/last-fi_small.jpg\" alt=\"\" /></p>\n<!-- more-->\n\n<h1>Hardware Elements</h1>\n\n<p>Last-Fi features two main hardware elements;</p>\n\n<h2>LCD Screen</h2>\n\n<p>Any standard 2x16 LCD screen compatible with the Hitachi HD44780 LCD controller is compatible with Last.Fi. The screen is used in 4-bit mode with no other additional circuitry and thus requires at least 7-8 IO pins from the Pi. The screen I am using also has a backlight, but due to running out of pins and not wanting to make the circuitry more complex, the backlight is simply connected to always be on at full brightness. A nice addition to control the backlight would be some form of hardware pulse width modulation circuit. The contrast of the screen is simply always at full contrast, this is just because having a potentiometer for this purpose was difficult to fit in the case, and in this instance the screen I am using looks best at full contrast anyway.</p>\n\n<p>In terms of the software, you can read more about how the screens are controlled in a previous post. The code has evolved a fair bit since then but the basic principles are the same. A F# MailboxProcessor (henceforth known as an <em>Agent</em>) is employed within a standard .NET type to enable async execution and manage state whilst providing safe synchronization mechanics. The agent accepts two messages, ScrollText and TemporaryText. The former will cause the screen to display and scroll where necessary the two lines of text supplied in the message. The scrolling happens all asynchronously in an isolated environment that has no affect on the rest of the system. The latter message will cause the supplied text to appear on the LCD temporarily, and after a timeout period will revert back to scrolling whatever state was present before.</p>\n\n<p>This code illustrates how we can create a self-contained asynchronous and isolated system that is packaged in a re-useable object. It demonstrates how we can propagate state using an F# Agent, and how to use TryReceive() to provide both scrolling and temporary text timing, whilst providing the ability to quickly override messages. This is useful in various situations, such as holding &ldquo;up&rdquo; on the NES pad will allow the volume to repeatedly increase without waiting for the previous temporary text that shows the volume to time out.</p>\n\n<p><img src=\"../../../../../img/old/lcd_small.jpg\" alt=\"\" /></p>\n\n<h1>NES Pad</h1>\n\n<p>The Nintendo pad is essentially just an 8 bit parallel to serial shift register. Indeed, if you look inside one you will find a single chip which is exactly that. The pad is used to skip tracks, adjust the volume, start / play / pause the music. In order to use the NES pad, its internal shift register is hooked up to some of the Pi&rsquo;s pins, and then at some specified polling interval, the state of the buttons are shifted in where something can happen to them. Once again this is a very concurrent operation where a requirement is to poll at certain intervals, and therefore another Agent is used packaged up in a .NET type thus providing the reusable, isolated asynchronous object similar to the LCD.</p>\n\n<p>For the NES object to be of any use, it requires some state. It needs to know what the button state was previously in order to determine what has changed in the current iteration. Once again the Agent forms the basis of this by propagating a state through each loop cycle that contains both the &ldquo;current&rdquo; state of the buttons and a list of buttons that were pressed in the past.</p>\n\n<p>With this information, the object is able to raise .NET events such as ButtonDown and ButtonUp that a subscriber can listen to. Using F#&rsquo;s powerful active patterns the caller can also quite easily indicate it is interested in a more complicated pattern of buttons. In conjunction with this another F# feature is used &ndash; first class .NET events. This means you can create an event in code and the register it with some pattern match based on button history and state. In this way is is simple to create your own event that fires when Start and Select have both been pressed for 3 seconds, or to fire when the button history matches the Konami Code, for example.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">startSelectEvent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Event</span><span class=\"o\">&lt;</span><span class=\"kt\">unit</span><span class=\"o\">&gt;</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"n\">startSelectEvent</span><span class=\"o\">.</span><span class=\"n\">Publish</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"start select!!\"</span><span class=\"o\">)</span>\n\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">konamiCodeEvent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Event</span><span class=\"o\">&lt;</span><span class=\"kt\">unit</span><span class=\"o\">&gt;</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"n\">konamiCodeEvent</span><span class=\"o\">.</span><span class=\"n\">Publish</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"Konami Code!!!\"</span>\n<span class=\"w\">                                         </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">aux</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">                                            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">                                                </span><span class=\"c1\">// this will cause the message to flash 5 times (exciting!!)</span>\n<span class=\"w\">                                                </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">TemporaryText</span><span class=\"o\">(</span><span class=\"s\">\"Konami Code!\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                                                </span><span class=\"k\">do</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"nn\">Async</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"o\">(</span><span class=\"mi\">750</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                                                </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">TemporaryText</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">)</span>\n<span class=\"w\">                                                </span><span class=\"k\">do</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"nn\">Async</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"o\">(</span><span class=\"mi\">750</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                                            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">                                         </span><span class=\"nn\">Async</span><span class=\"p\">.</span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"o\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">nes</span><span class=\"o\">.</span><span class=\"n\">AddCustomEvent</span><span class=\"o\">((</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">                        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"n\">ButtonDown</span><span class=\"w\"> </span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">START</span><span class=\"w\"> </span><span class=\"n\">length1</span><span class=\"w\"> </span>\n<span class=\"w\">                          </span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"n\">ButtonDown</span><span class=\"w\"> </span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">SELECT</span><span class=\"w\"> </span><span class=\"n\">length2</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">length2</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">3000</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">amp</span><span class=\"o\">;&amp;</span><span class=\"n\">amp</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">length1</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">3000</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">                        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">startSelectEvent</span><span class=\"o\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">nes</span><span class=\"o\">.</span><span class=\"n\">AddCustomEvent</span><span class=\"o\">((</span><span class=\"k\">function</span>\n<span class=\"w\">                        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"n\">ButtonSequence</span>\n<span class=\"w\">                           </span><span class=\"o\">[</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">UP</span><span class=\"o\">;</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">UP</span><span class=\"o\">;</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">DOWN</span><span class=\"o\">;</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">DOWN</span><span class=\"o\">;</span>\n<span class=\"w\">                            </span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">LEFT</span><span class=\"o\">;</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">RIGHT</span><span class=\"o\">;</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">LEFT</span><span class=\"o\">;</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">RIGHT</span><span class=\"o\">;</span>\n<span class=\"w\">                            </span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">B</span><span class=\"o\">;</span><span class=\"nn\">NES</span><span class=\"p\">.</span><span class=\"nn\">Button</span><span class=\"p\">.</span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">                        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">),</span><span class=\"n\">konamiCodeEvent</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h1>Other Software</h1>\n\n<h2>MPC / MPD</h2>\n\n<p>This is the Linux daemon used to actually play music. MPC is a command line interface to MPD. Critically, MPC supports a command called &ldquo;idle&rdquo; which will block the current thread until something in the the daemon happens, at which point the program returns some text to indicate a change has happened. The core Player object (discussed shortly) uses this in order to tell the LCD what to display, and when to load new tracks. However, ideally this operation wouldn&rsquo;t actually block and this is where F#&rsquo;s async workflows once again come in very useful &ndash; it&rsquo;s trivial to wrap the MPC idle command in a async workflow and then be able to use it elsewhere without blocking.</p>\n\n<h2>Last.Fm API</h2>\n\n<p>In order to use the Last.FM API, HTTP POST messages are manually crafted and encrypted. Thanks to F#&rsquo;s extremely succinct record types and higher-order functions, this is able to be achieved in a very small amount of code.</p>\n\n<h2>Player</h2>\n\n<p>This object is what connects to Last.Fm via the API, retrieves and queues track URLs to MPC, and provides the music interface to the rest of the program. Once again, this is a F# agent running an async loop propagating state. You might think this is overkill, but this object has to respond to commands both from the webservice, and from the NES pad, so the Agent nicely handles any sync problem.</p>\n\n<h2>Core</h2>\n\n<p>The core program itself uses ServiceStack to host a webservice that allows operations via an instance of the Player object. The program initializes the various objects, hooks up various events between the objects and then sits there doing nothing perpetually <img class=\"wlEmoticon wlEmoticon-smile\" style=\"border-style: none;\" src=\"../../../../../img/old/wlEmoticon-smile_2.png\" alt=\"Smile\" /></p>\n\n<h2>Website</h2>\n\n<p>As mentioned before, the website is created by using a F# to JavaScript compiler, FunScript. FunsScript is also a mini web server which means I can avoid using XSP or another ASP.NET equivalent. FunScript also makes use of F# type providers to bring in TypeScript definition files, which essentially annotate populate JavaScript libraries with type information. Using this you can basically bring any JavaScript library directly into the F# programming language. Pretty cool I say!</p>")) ((? . 15) f post (u . "Slope / Function Generator") (? . 15) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2020/07/25/slope-function-generator/index.html" . windows) (u . "/blog\\2020\\07\\25\\slope-function-generator/") (u . "2020-07-25T20:32:05") (? . 37) (? . 16) (c (u . "electronics")) (u . "\n<p>In this post we&rsquo;ll look at the design of a <a href=\"https://en.wikipedia.org/wiki/Function_generator\">function generator</a> that outputs slope waveforms with adjustable rise and fall times. This can be used in modular synthesis as an <a href=\"https://en.wikipedia.org/wiki/Envelope_(music)\">envelope</a>, or <a href=\"https://en.wikipedia.org/wiki/CV/gate\">control voltage</a> to modulate some other parameter in your synthesiser. This post is purely electronics with no CPUs allowed on the scene.</p>\n\n<p></p>\n\n<p>For all the circuits and fragments in this post, I have linked to simulations you can play with. I was going to embed them, but there is no way to prevent all the simulations starting at once and killing your CPU, so I&rsquo;ll leave it to your discretion :)</p>") #t (u . "\n<p>In this post we&rsquo;ll look at the design of a <a href=\"https://en.wikipedia.org/wiki/Function_generator\">function generator</a> that outputs slope waveforms with adjustable rise and fall times. This can be used in modular synthesis as an <a href=\"https://en.wikipedia.org/wiki/Envelope_(music)\">envelope</a>, or <a href=\"https://en.wikipedia.org/wiki/CV/gate\">control voltage</a> to modulate some other parameter in your synthesiser. This post is purely electronics with no CPUs allowed on the scene.</p>\n\n<p></p>\n\n<p>For all the circuits and fragments in this post, I have linked to simulations you can play with. I was going to embed them, but there is no way to prevent all the simulations starting at once and killing your CPU, so I&rsquo;ll leave it to your discretion :)</p>\n<!-- more-->\n\n<h2 id=\"intro\">Intro</h2>\n\n<p>Recently I have been getting back into electronics and synthesisers. I do have some hardware semi-modular synths, and have been playing around with <a href=\"https://vcvrack.com/\">VCV Rack</a> a lot. A module I like in particular is <a href=\"https://www.modulargrid.net/e/befaco-rampage\">Befaco&rsquo;s Rampage</a>.</p>\n\n<p>I find myself using this module all the time in VCV rack, and decided it would be fun to have a go a building my own lite version of it. Rampage does tons of stuff which I am certainly not trying to achieve. What I would like is the basic function generator capability with the following features (to start with)</p>\n\n<ul>\n <li>Triggerable function generator</li>\n <li>Once triggered, it will always fall once the rise has completed, even if the trigger input is still high (eg it does not sustain in any way)</li>\n <li>Variable rise and fall times (via potentiomenters for this design, not external control voltage)</li>\n <li>Retriggerable during the fall stage</li>\n <li>Powered with <a href=\"https://en.wikipedia.org/wiki/Eurorack\">Eurorack</a> style +/&ndash; 12v rails</li>\n <li>Unipolar output at 0&ndash;10v</li></ul>\n\n<p>Note I am no electronics expert, merely a hobbyist messing around a bit!</p>\n\n<h2 id=\"generating-ramps\">Generating Ramps</h2>\n\n<p>The first problem then is how to generate a ramp. If you charge a <a href=\"https://en.wikipedia.org/wiki/Capacitor\">capacitor</a> with a voltage source and some resistor, you will get an exponential voltage curve</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/cap1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+16.13108636308289+50+5+50%0Av+96+336+96+64+0+0+40+5+0+0+0.5%0AS+256+144+256+64+0+1+false+0+2%0Aw+96+64+240+64+0%0Aw+272+64+400+64+0%0Aw+400+64+400+336+0%0Ac+256+144+256+256+0+0.00019999999999999998+7.380950037829741e-25%0Ar+256+256+256+336+0+100%0Aw+96+336+256+336+0%0Aw+256+336+400+336+0%0Ao+5+128+0+4099+0.0000762939453125+0.00009765625+0+2+5+3%0A38+5+0+0.000009999999999999999+0.00101+Capacitance%0Ah+2+6+5%0A\">simulate</a></p>\n\n<p>I don&rsquo;t want an exponential curve, though, I want a linear ramp. Charging a capacitor using a constant <a href=\"https://en.wikipedia.org/wiki/Current_source\">current source</a> will achieve exactly that, and the time can be controlled by the resistance.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/cap2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+16.13108636308289+50+5+50%0AS+256+144+256+64+0+0+false+0+2%0Aw+96+64+240+64+0%0Aw+272+64+400+64+0%0Ac+256+144+256+256+0+0.00019999999999999998+-5.267390098264483%0Ar+256+256+256+336+0+100%0Aw+96+336+256+336+0%0Aw+256+336+400+336+0%0Ai+96+336+96+64+0+0.01%0Ai+400+64+400+336+0+0.01%0Ao+3+128+0+4099+10+0.025+0+2+3+3%0A38+3+0+0.000009999999999999999+0.00101+Capacitance%0A\">simulate</a></p>\n\n<p>We can create a constant current source in a number of ways, for example with a transistor based current source circuit or an op-amp current source.</p>\n\n<p>Another way to produce a linear ramp is to use an <a href=\"https://en.wikipedia.org/wiki/Op_amp_integrator\">op-amp as an integrator</a>.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/int1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+10.20027730826997+57+5+50%0Ag+96+224+96+272+0%0Aw+336+112+336+160+0%0Aw+192+80+192+112+0%0Aw+192+112+192+144+0%0Aw+192+176+192+224+0%0Aa+192+160+336+160+8+15+-15+1000000+-4.999671225067146+0+100000%0Ac+192+112+336+112+0+0.000002+-20.000171177189653%0AO+336+160+400+160+0%0Av+96+224+96+80+0+2+10+5+0+0+0.5%0Ap+128+224+128+80+0+0%0Aw+96+224+128+224+0%0Aw+128+224+192+224+0%0Aw+96+80+128+80+0%0Ar+128+80+192+80+0+1000%0Ao+9+32+0+4098+5+0.00009765625+0+1+input%0Ao+7+32+0+4098+22+0.00009765625+1+1+integral%0A\">simulate</a></p>\n\n<p>In this design, the op-amp produces an output voltage proportional to the integral of the input voltage, with the feedback loop charging and discharging the capacitor. The simulation above uses a +/&ndash; 5v square wave as an input, causing the capacitor to charge and discharge through the op-amp (which can both sink and source current) as the voltage swings above and below ground. The op-amp tries to reach its maximum and minimum output values - in this simulation the op-amp is configured with +/&ndash; 15v</p>\n\n<h2 id=\"bi-directional-ramp\">Bi-Directional Ramp</h2>\n\n<p>In order to control the rise and fall time of the wave independently, we&rsquo;re going to need to somehow have the capacitor charge through one resistor, and discharge through another. The <a href=\"https://en.wikipedia.org/wiki/Diode\">diode</a> comes to the rescue here. Since the diode allows current to only flow in one direction, it lets us setup a one-way system depending on the direction of the flow.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/diode1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+10.20027730826997+57+5+50%0Ag+96+224+96+272+0%0Aw+512+112+512+160+0%0Aw+368+80+368+112+0%0Aw+368+112+368+144+0%0Aw+368+176+368+224+0%0Aa+368+160+512+160+8+15+-15+1000000+0.000036893799898152287+0+100000%0Ac+368+112+512+112+0+0.0000058+3.6894168836151264%0AO+512+160+576+160+0%0Av+96+224+96+80+0+2+20+5+0+3.141592653589793+0.5%0Aw+96+224+128+224+0%0Aw+304+224+368+224+0%0Ar+160+80+224+80+0+220%0Ad+96+80+160+80+2+default%0A174+224+80+304+80+1+1000+0.5594+Resistance%0Aw+320+80+368+80+0%0Aw+272+64+272+48+0%0Aw+272+48+320+48+0%0Aw+320+80+320+48+0%0Aw+368+80+368+16+0%0Ad+368+16+288+16+2+default%0Ar+288+16+208+16+0+220%0A174+208+16+112+16+1+1000+0.22280000000000003+Resistance%0Aw+96+80+96+16+0%0Aw+96+16+112+16+0%0Aw+160+32+160+48+0%0Aw+128+224+304+224+0%0Aw+160+48+112+48+0%0Aw+112+48+112+16+0%0Ao+7+32+0+4098+22+0.00009765625+0+1+integral%0A\">simulate</a></p>\n\n<p>Here I have used a small resistor in series with a <a href=\"https://en.wikipedia.org/wiki/Potentiometer\">potentiometer</a> for each path. The small resistor exists to set a minimum resistance, whilst the potentiometer allows us the control the rise and fall times. Of course, different values of capacitor and resistors will give us different minimum and maximum slope times.</p>\n\n<p>The next problem is two-fold. We don&rsquo;t want the full +/&ndash; 12v range as an output - the final goal is to have 0&ndash;10v, slightly less than half of the range. Since the op-amp starts at &ndash;12v, we will aim to stop it charging once the capacitor hits 0 volts (half the voltage) at which point it should begin the discharge phase. Later we will shape this output voltage into what we want, but first we need a way of knowing when the capacitor has arrived at 0 volts, and some form of managing which state is currently active (charge or discharge).</p>\n\n<p>Let&rsquo;s first look at the state. We don&rsquo;t have any kind of clock signal, so we need something async. The <a href=\"https://en.wikipedia.org/wiki/Flip-flop_(electronics)\">Set Reset latch</a> is about as simple as it gets, providing us with one bit of memory that can be toggled.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/sr.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+1.500424758475255+50+5+50%0A151+256+160+368+160+0+2+5+5%0A151+256+288+368+288+0+2+0+5%0Aw+368+160+368+192+0%0Aw+368+192+256+256+0%0Aw+368+288+368+256+0%0Aw+368+256+256+192+0%0Aw+256+192+256+176+0%0Aw+256+256+256+272+0%0AL+256+304+176+304+0+1+true+5+0%0AL+256+144+176+144+0+1+true+5+0%0AM+368+160+448+160+0+2.5%0AM+368+288+448+288+0+2.5%0Ax+159+120+191+123+4+24+set%0Ax+438+138+456+141+4+24+Q%0Ax+147+281+200+284+4+24+reset%0Ax+438+266+456+269+6+24+Q%0A\">simulate</a></p>\n\n<p>This arrangement of two NOR or NAND gates with feedback stores a single bit of memory. When one of the lines go high, it will flip the state if applicable. The SR latch is essentially a flip-flop without the clock signal. It does have some issues though, notably it might not respond well to an invalid input state (eg, both inputs high).</p>\n\n<p>A requirement was that once a trigger arrives, the rise time should always complete, and then during the fall time a signal may re-trigger the process. Another requirement was that the fall cycle should always happen, even if the trigger signal is still high.</p>\n\n<p>The SR latch already deals with the first - subsequent pulses to the latch will have no effect until it has changed to its other state.</p>\n\n<p>The second we can deal with by ensuring that when a trigger signal arrives, we only take a tiny pulse of it and block the rest. This circuit is called an edge detector, and there&rsquo;s various ways to achieve it.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/edge1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+6.450009306485578+50+5+50%0Ac+240+160+400+160+0+0.00001+2.2454659742303148e-110%0Ar+400+160+400+288+0+35%0AO+400+160+512+160+0%0Ag+400+288+400+320+0%0AL+240+160+192+160+0+0+false+5+0%0Ao+2+16+0+4098+0.0000762939453125+0.00009765625+0+1+out%0Ah+3+1+0%0A\">simulate</a></p>\n\n<p>Capacitors block DC voltage once they are charged. This simple circuit (also known as a <a href=\"https://en.wikipedia.org/wiki/High-pass_filter\">high-pass filter</a>) will pass a small amount of current until the capacitor is charged, at which point it stops conducting. The result of this is that the logic gate will see a pulse that&rsquo;s long enough to trigger it, and nothing else until the input signal cycles from low to high again.</p>\n\n<p>The latch is comprised of logic gates that are not designed to source and sink current with negative voltages. Instead, we&rsquo;ll feed its outputs into our friend the op-amp. When used like this, the op-amp acts as a <a href=\"https://www.electronics-tutorials.ws/opamp/op-amp-comparator.html\">comparator</a> (we&rsquo;ll see this shortly). Depending on which side is high its output will be driven to +/&ndash; 12v.</p>\n\n<p>Putting all this together will give us a circuit which we can manually trigger the SR latch and cause the circuit to charage and discharge the capacitor.</p>\n\n<h1 id=\"auto-reset\">Auto Reset</h1>\n\n<p>All we need now is a way to send a signal to the latch when the capacitor reaches 0 volts. The op-amp provides us the solution with the comparator configuration we used earlier. In this case we simply provide a reference voltage (0v, ground) and feed the output of the integrator to the other input. Now, when the voltage reaches zero, the comparator will flip to high. We can feed this signal into the SR latch, causing the reset phase to begin.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/reset.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+10.20027730826997+45+5+50%0Aa+0+80+96+80+8+12+-12+1000000+0+5+100000%0Aa+368+96+480+96+8+12+-12+1000000+11.503782069763501+0+100000%0A153+-96+32+-16+32+0+2+0+5%0A153+-96+112+-16+112+0+2+5+5%0Aw+-16+32+-96+96+0%0Aw+-96+48+-16+112+0%0Aw+-96+16+-128+16+0%0Ad+96+80+96+32+2+default%0Ad+96+128+96+80+2+default%0Ar+96+32+160+32+0+1000%0Ar+96+128+160+128+0+1000%0Ag+368+112+368+128+0%0Aw+288+112+368+80+0%0Aw+288+48+368+80+0%0Aw+368+80+368+16+0%0Aw+480+96+480+16+0%0Aw+-128+-128+-128+16+0%0A209+368+16+480+16+0+0.00001+23.504932435970478+1%0AL+-176+128+-304+128+0+0+true+5+0%0Ac+-176+128+-96+128+0+0.00001+7.247222657048323e-11%0Ar+-96+128+-96+192+0+1000%0Ag+-96+192+-96+208+0%0Aw+-16+32+-16+64+0%0Aw+-16+64+0+64+0%0Aw+-16+112+-16+96+0%0Aw+-16+96+0+96+0%0A174+160+32+256+32+1+10000+0.35150000000000003+Resistance%0Aw+208+0+256+0+0%0Aw+256+0+256+32+0%0Aw+256+32+288+48+0%0A174+160+128+240+128+1+10000+0.10400000000000001+Resistance%0Aw+208+112+208+96+0%0Aw+256+128+288+112+0%0Aa+464+-128+352+-128+9+15+-15+1000000+0+-12.001150366206977+100000%0Ag+464+-112+464+-80+0%0Aw+480+16+480+-144+0%0Aw+464+-144+480+-144+0%0Aw+-128+-128+352+-128+0%0Aw+208+96+256+96+0%0Aw+256+96+256+128+0%0Aw+208+0+208+16+0%0Ax+-113+-3+-15+0+4+24+SR%5CsLatch%0Ax+-34+146+92+149+4+24+Comparator%0Ax+373+55+475+58+4+24+Integrator%0Ax+342+-179+468+-176+4+24+Comparator%0Ax+-389+169+-153+172+4+24+Input%5Cs%5Ca%5CsEdge%5CsDetector%0AO+480+96+544+96+0%0Ao+46+64+0+4098+20+0.1+0+1%0A\">simulate</a></p>\n\n<h1 id=\"output-stage\">Output stage</h1>\n\n<p>All that remains is to shape the output into 0&ndash;10v. Currently we have &ndash;12&ndash;0v, so first we&rsquo;ll simply add 12v, bring the output into the positive range. To achieve this, the op-amp is back on the scene, this time in its <a href=\"https://www.electronics-tutorials.ws/opamp/opamp_4.html\">non-inverting summing configuration</a></p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/sum.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><a href=\"http://falstad.com/circuit/circuitjs.html?cct=$+1+0.000005+10.20027730826997+45+5+50%0Aa+0+80+96+80+8+12+-12+1000000+0+5+100000%0Aa+368+96+480+96+8+12+-12+1000000+10.8647330657681+0+100000%0A153+-96+32+-16+32+0+2+0+5%0A153+-96+112+-16+112+0+2+5+5%0Aw+-16+32+-96+96+0%0Aw+-96+48+-16+112+0%0Aw+-96+16+-128+16+0%0Ad+96+80+96+32+2+default%0Ad+96+128+96+80+2+default%0Ar+96+32+160+32+0+1000%0Ar+96+128+160+128+0+1000%0Ag+368+112+368+128+0%0Aw+288+112+368+80+0%0Aw+288+48+368+80+0%0Aw+368+80+368+16+0%0Aw+480+96+480+16+0%0Aw+-128+-128+-128+16+0%0A209+368+16+480+16+0+0.00001+22.865819527074677+1%0AL+-176+128+-304+128+0+0+true+5+0%0Ac+-176+128+-96+128+0+0.00001+3.1363287078765094e-8%0Ar+-96+128+-96+192+0+1000%0Ag+-96+192+-96+208+0%0Aw+-16+32+-16+64+0%0Aw+-16+64+0+64+0%0Aw+-16+112+-16+96+0%0Aw+-16+96+0+96+0%0A174+160+32+256+32+1+10000+0.35150000000000003+Resistance%0Aw+208+0+256+0+0%0Aw+256+0+256+32+0%0Aw+256+32+288+48+0%0A174+160+128+240+128+1+10000+0.10400000000000001+Resistance%0Aw+208+112+208+96+0%0Aw+256+128+288+112+0%0Aa+464+-128+352+-128+9+15+-15+1000000+0+-12.001086461306578+100000%0Ag+464+-112+464+-80+0%0Aw+480+16+480+-144+0%0Aw+464+-144+480+-144+0%0Aw+-128+-128+352+-128+0%0Aw+208+96+256+96+0%0Aw+256+96+256+128+0%0Aw+208+0+208+16+0%0Ax+-113+-3+-15+0+4+24+SR%5CsLatch%0Ax+-34+146+92+149+4+24+Comparator%0Ax+373+55+475+58+4+24+Integrator%0Ax+342+-179+468+-176+4+24+Comparator%0Ax+-389+169+-153+172+4+24+Input%5Cs%5Ca%5CsEdge%5CsDetector%0AO+384+304+224+304+0%0Aw+384+192+384+240+0%0Ag+608+240+608+272+0%0Aw+480+208+480+240+0%0Ar+480+240+384+240+0+1000%0Ar+480+240+608+240+0+1000%0Aa+480+192+384+192+9+12+-12+1000000+-0.0005432197888937373+-0.0005432306532895152+100000%0Ag+384+384+384+416+0%0Ar+384+304+384+384+0+1000%0Ar+384+240+384+304+0+220%0Ar+528+176+480+176+0+1000%0Ar+480+96+480+176+0+1000%0AR+528+176+576+176+0+0+40+12+0+0+0.5%0Ao+46+64+0+4098+10+0.1+0+1%0A\">simulate</a></p>\n\n<p>Now we are left with a signal from 0&ndash;12v, we can divide this voltage proportionally using a simple <a href=\"https://www.allaboutcircuits.com/tools/voltage-divider-calculator/\">voltage divider</a>. Since the power supplies and op-amps used might not be perfect, we could use a precision potentiometer here so the user can tune the signal to exactly 10v.</p>\n\n<h2 id=\"real-world\">Real World</h2>\n\n<p>Simulations are all well and good, but they don&rsquo;t reflect the real world with non-perfect components. If you play with the simulations above, you will notice sometimes the flip-flop gets stuck in an oscillating state. This is because the simulation is TOO perfect!</p>\n\n<p>I have built the circuit as above using an LF444 op-amps and a D-Type flip-flop in its &ldquo;active&rdquo; mode instead of the NOR gates.</p>\n\n<p>In the picture below you can see the output waveform at its pre-final stage where it is still inverted. The trigger input is being fed with a pulse generator. You can see that subsequent pulses during the fall stage cause re-triggering as we wanted.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/real1.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"figure\"><img src=\"../../../../../img/ramp/real2.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>I will be adding more features to this before putting onto a more permanent board. Possible features include</p>\n\n<ul>\n <li>Two independent function generators</li>\n <li>Ability to output +/&ndash; 5v bipolar control voltage via a switch</li>\n <li>Control voltage inputs for the rise and fall times</li>\n <li>Different minimum/maximum time periods via a switch</li>\n <li>A loop switch that will cause the ramp to automatically re-trigger, so it can be used as an LFO or oscillator</li>\n <li>Other comparison based modulation outputs, like Rampage does.</li>\n <li>Protection circuitry to defend against the unpredictable outside world.</li>\n <li>etc</li></ul>")) ((? . 17) f post (u . "C64 Sprite Previewer") (? . 17) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2018/09/17/c64-sprite-previewer/index.html" . windows) (u . "/blog\\2018\\09\\17\\c64-sprite-previewer/") (u . "2018-09-17T21:05:58") (? . 18) (? . 47) (c (u . "C64") c (u . "asi64") c (u . "6502") c (u . "racket")) (u . "\n<p>In this post we will see how <a href=\"http://pinksquirrellabs.com/blog/2017/05/30/asi64/\">asi64</a> is more than your average macro assembler, by combining arbitrary disk io, functional programming techniques and code generation alongside your typical 6502 assembly code. The aim is to create a very simple sprite animation viewer, that writes the resulting C64 program by interleaving file parsing and machine code generation.</p>\n\n<p>Here&rsquo;s the program displaying some sprites that <a href=\"https://twitter.com/silverSpoon\">@silverspoon</a> has started working on :) (in different, single colours for the fun of it)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/tc.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>") #t (u . "\n<p>In this post we will see how <a href=\"http://pinksquirrellabs.com/blog/2017/05/30/asi64/\">asi64</a> is more than your average macro assembler, by combining arbitrary disk io, functional programming techniques and code generation alongside your typical 6502 assembly code. The aim is to create a very simple sprite animation viewer, that writes the resulting C64 program by interleaving file parsing and machine code generation.</p>\n\n<p>Here&rsquo;s the program displaying some sprites that <a href=\"https://twitter.com/silverSpoon\">@silverspoon</a> has started working on :) (in different, single colours for the fun of it)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/tc.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n<!-- more-->\n\n<p>To read this post it would probably help to know some 6502 (though not essential), you can read the assembler syntax over at <a href=\"https://github.com/pezipink/Asi64\">asi64&rsquo;s github</a> or from an <a href=\"http://pinksquirrellabs.com/blog/2017/05/30/asi64/\">older post on it</a></p>\n\n<h2 id=\"sprites\">Sprites</h2>\n\n<p>The C64 has 8 hardware sprites it can utilise. This means the video hardware can display up to 8 sprites at once. To animate something, you would use a series of sprites that you change between. To design these sprites there are various tools available (not like the 80s where you had to draw them manually on graph paper!). I have been using <a href=\"http://www.spritemate.com/\">spritemate</a> which is a nice online tool.</p>\n\n<p>Spritemate is able to save the sprites in a variety of formats, including assembly code output for two of the popular C64 assemblers (KickAss and ACME).</p>\n\n<p>What I would like is a way whereby I can design a series of sprite animation frames in the tool, save a number of these files (each file containing n sprite-frames of animation for some entity), then have the assembler read them from disk and automatically display and animate each sprite on the C64 screen. This will provide a fast feedback loop to see what they look like on the machine, rather than having to mess around moving chunks of data and altering frame counts and animation code manually.</p>\n\n<p>To display sprites on the C64 you need to have a number of things in place. This post is not supposed to be a tutorial on how they work, so not everything will be explained.</p>\n\n<ul>\n <li>The actual sprite data itself must live somewhere the VIC graphics chip can see it.</li>\n <li>The last 8 bytes of screen memory indicate an offset into the sprite data telling the VIC which sprite to display for each of the 8 sprites.</li>\n <li>Sprite colours and positions are set with bunch of memory-mapped registers on the VIC.</li></ul>\n\n<p>The details on how to configure the VIC for this are out of the scope of this post. Suffice to say, for my needs, all the sprite data will be stored at $2000, my screen data lives at $0400, the last 8 bytes of it (the sprite pointers) are at $7fe8.</p>\n\n<p>The sprites are used in multi-colour mode, which means they each have 4 colours. 3 of the colours are shared by all sprites (background, colour 1 and colour 2) and the last colour is individual to each sprite, set within 8 more VIC registers. For the sake of simplicty, this post ignores the individual colour, assuming they are all the same.</p>\n\n<h2 id=\"file-formats\">File Formats</h2>\n\n<p>Since Asi64 extends Racket, it has the <a href=\"https://racket-lang.org/\">full arsenal of Racket at its disposal</a>, including its ridiculous macro system, multiple programming paradigms, extensive libraries and packages. We can quite easily mix this code in with 6502 assembler to help generate code in any way you would like.</p>\n\n<p>Let&rsquo;s look at one of Spritemate&rsquo;s output formats, for <a href=\"http://theweb.dk/KickAssembler/Main.html#frontpage\">KickAss</a> (which is a fantasic assmembler, and partly the inspiration for writing Asi64!)</p>\n\n<pre><code>// 4 sprites generated with spritemate on 9/14/2018, 9:03:32 PM\n// Byte 64 of each sprite contains multicolor (high nibble) &amp; color (low nibble) information\n\nLDA #$04 // sprite multicolor 1\nSTA $D025\nLDA #$06 // sprite multicolor 2\nSTA $D026\n\n\n// sprite 1 / multicolor / color: $0e\nsprite_1:\n.byte $0c,$00,$30,$0f,$00,$30,$0f,$ff\n.byte $f0,$03,$7d,$f0,$03,$ff,$c0,$01\n.byte $eb,$40,$00,$ff,$00,$01,$3c,$40\n.byte $00,$74,$00,$00,$54,$00,$00,$74\n.byte $00,$00,$fc,$00,$00,$fc,$00,$03\n.byte $ff,$0c,$03,$ff,$0c,$03,$ff,$0c\n.byte $0f,$ff,$cc,$0e,$fe,$cc,$3e,$fe\n.byte $f0,$3e,$fe,$f0,$3e,$fe,$f0,$8e\n\n// sprite 2 / multicolor / color: $0e\nsprite_2:</code></pre>\n\n<p>The interesting bits of this file are</p>\n\n<ul>\n <li>How many sprite frames are in the file (each sprite is a frame of animation)</li>\n <li>The sprite data itself, which of course is just a bunch of bytes</li>\n <li>Additional colour data which we are ignoring for this post.</li></ul>\n\n<p>Since Asi64 is also Racket, we can write a function that will extract the contents of one of these files into a little structure:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">asi64</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">sprite-data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">frame-count</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">extract-sprite</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"c1\">;read file as a sequence of lines</span>\n<span class=\"w\">         </span><span class=\"p\">[</span><span class=\"n\">lines</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._file-~3elines))\" style=\"color: inherit\">file-&gt;lines</a></span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"p\">)]</span>\n<span class=\"w\">         </span><span class=\"c1\">;count the amount of frames by looking at lines that end with :</span>\n<span class=\"w\">         </span><span class=\"p\">[</span><span class=\"n\">frames</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._length))\" style=\"color: inherit\">length</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._filter))\" style=\"color: inherit\">filter</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-suffix~3f))\" style=\"color: inherit\">string-suffix?</a></span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"s2\">\":\"</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"p\">))]</span>\n<span class=\"w\">         </span><span class=\"c1\">; extract the raw data as one big lump</span>\n<span class=\"w\">         </span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">~&gt;&gt;</span>\n<span class=\"w\">                </span><span class=\"n\">lines</span>\n<span class=\"w\">                </span><span class=\"c1\">; filter to .byte rows </span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._filter))\" style=\"color: inherit\">filter</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-prefix~3f))\" style=\"color: inherit\">string-prefix?</a></span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"s2\">\".byte\"</span><span class=\"p\">)))</span>\n<span class=\"w\">                </span><span class=\"c1\">; clean up text leaving raw hex values</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-replace))\" style=\"color: inherit\">string-replace</a></span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"s2\">\".byte \"</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">)))</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-replace))\" style=\"color: inherit\">string-replace</a></span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"s2\">\"$\"</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">)))</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-split))\" style=\"color: inherit\">string-split</a></span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"s2\">\",\"</span><span class=\"p\">)))</span>\n<span class=\"w\">                </span><span class=\"c1\">; flatten into one big list of numbers</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._flatten))\" style=\"color: inherit\">flatten</a></span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"c1\">; parse hex </span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._string-~3enumber))\" style=\"color: inherit\">string-&gt;number</a></span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))))])</span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">sprite-data</span><span class=\"w\"> </span><span class=\"n\">frames</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">)))</span>\n<span class=\"w\">              </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And now we can quite easily scan the sprites directory for all files (we&rsquo;ll assume there&rsquo;s no more than 8) and pass them through this function to yield a bunch of structures containing the sprite data that can be used to help write the assembly code.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">sprites</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">~&gt;&gt;</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/private/base..rkt)._directory-list))\" style=\"color: inherit\">directory-list</a></span><span class=\"w\"> </span><span class=\"s2\">\"..</span><span class=\"se\">\\\\</span><span class=\"s2\">sprites\"</span><span class=\"w\"> </span><span class=\"kd\">#:build?</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Manipulating_Paths.html#(def._((quote._~23~25kernel)._path-~3estring))\" style=\"color: inherit\">path-&gt;string</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._filter))\" style=\"color: inherit\">filter</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-suffix~3f))\" style=\"color: inherit\">string-suffix?</a></span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"s2\">\".txt\"</span><span class=\"p\">)))</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"n\">extract-sprite</span><span class=\"p\">)))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h2 id=\"6502\">6502</h2>\n\n<p>Now we can start to write the actual program. Before we do anything else, we want to dump the raw sprite data that was collected from all the files into memory starting at $2000.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">C64</span><span class=\"p\">{</span>\n\n<span class=\"w\">     </span><span class=\"c1\">; raw sprite data starts at $2000</span>\n<span class=\"w\">     </span><span class=\"n\">*=</span><span class=\"w\"> </span><span class=\"n\">$2000</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">write-values</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">~&gt;&gt;</span>\n<span class=\"w\">         </span><span class=\"n\">sprites</span>\n<span class=\"w\">         </span><span class=\"c1\">; extract the \"data\" field from the struct</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"n\">sprite-data-data</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._flatten))\" style=\"color: inherit\">flatten</a></span><span class=\"p\">)))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We simply extract out the &ldquo;data&rdquo; field from the structs created earlier, and flatten it all into one big list. The &ldquo;write-values&rdquo; here is an asi64 form that simply instructs the assembler to write whatever numbers it is given to the current location.</p>\n\n<p>The next part is a lot more interesting. We need to setup each of the sprite pointers to point at the first frame of animation for each file that was loaded (we assume in this example there were a maximum of 8 sprites - there are multiplexing techniques you can use to display more)</p>\n\n<p>With the way the VIC is currently setup, the 8 sprite pointers start at $07f8, and the correct index to store in the first one so that it will point at the first frame of data we stored at $2000 is $80. Then, for each successive set of sprite data, we must increase the offset by the number of frames from the previous set, thus arriving at the first frame of the next set, and store that into the next pointer.</p>\n\n<p>That is a bit of a mouthful, hopefully the code will help to make it clear. In asi64, everything between curly braces is 6502 assembler which you can nest anywhere:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">      </span><span class=\"c1\">; start our actual program at $1000</span>\n<span class=\"w\">      </span><span class=\"n\">*=</span><span class=\"w\"> </span><span class=\"n\">$1000</span>\n\n<span class=\"w\">      </span><span class=\"c1\">; enable all sprites</span>\n<span class=\"w\">      </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$FF</span>\n<span class=\"w\">      </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$d015</span>\n\n<span class=\"w\">      </span><span class=\"c1\">; turn on multicolour mode for all sprites</span>\n<span class=\"w\">      </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$FF</span>\n<span class=\"w\">      </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$d01c</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$04</span><span class=\"w\"> </span><span class=\"c1\">; sprite multicolor 1</span>\n<span class=\"w\">      </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$D025</span>\n<span class=\"w\">      </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$06</span><span class=\"w\"> </span><span class=\"c1\">; sprite multicolor 2</span>\n<span class=\"w\">      </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$D026</span>\n\n<span class=\"w\">      </span><span class=\"c1\">; set background colour to black</span>\n<span class=\"w\">      </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">      </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$d021</span>\n\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/fold))\" style=\"color: inherit\">for/fold</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"c1\">; points at $2000</span>\n<span class=\"w\">                 </span><span class=\"p\">[</span><span class=\"n\">data-index</span><span class=\"w\"> </span><span class=\"n\">$80</span><span class=\"p\">]</span><span class=\"w\"> </span>\n<span class=\"w\">                 </span><span class=\"c1\">; first sprite pointer </span>\n<span class=\"w\">                 </span><span class=\"p\">[</span><span class=\"n\">sprite-pointer</span><span class=\"w\"> </span><span class=\"n\">$07f8</span><span class=\"p\">]</span>\n<span class=\"w\">                 </span><span class=\"p\">[</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span><span class=\"p\">)])</span>\n<span class=\"w\">                </span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">sprites</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">new-code</span>\n<span class=\"w\">               </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"c1\">; set the sprite pointer to the first frame</span>\n<span class=\"w\">                </span><span class=\"c1\">; for this animation</span>\n<span class=\"w\">                </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@data-index</span>\n<span class=\"w\">                </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">sprite-pointer</span><span class=\"w\">            </span>\n<span class=\"w\">               </span><span class=\"p\">}])</span><span class=\"w\">    </span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sprite-data-frame-count</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">data-index</span><span class=\"p\">)</span>\n<span class=\"w\">                  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">sprite-pointer</span><span class=\"p\">)</span>\n<span class=\"w\">                  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span><span class=\"w\"> </span><span class=\"n\">new-code</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The for/fold function builds up a list containing chunks of 6502 code, bringing along another 2 accumulators to track the sprite pointer and frame offset.</p>\n\n<p>Racket&rsquo;s for/fold actually returns all three accumulators as Racket &ldquo;multiple values&rdquo;. However, because asi64 only cares about 6502 code, it simply ignores the first two results, but it will then see a list of 6502 code which it will happily assemble.</p>\n\n<p>Next up is to position the sprites on the screen. To do this, you have to set some more VIC registers. $d000 is Sprite 1&rsquo;s X, $d001 is Sprite 1&rsquo;s Y, and so on for each sprite.</p>\n\n<p>We want to line the sprites up together at a fixed Y co-ordinate, but of course without overlapping on the X co-ordinates. A sprite is 24 pixels wide, so we&rsquo;ll factor that in.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">      </span><span class=\"c1\">;position sprites</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)])</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$20</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">))</span>\n<span class=\"w\">          </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$d000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"c1\">; x</span>\n<span class=\"w\">          </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$D0</span>\n<span class=\"w\">          </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$d000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"c1\">; y</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is very easy since we can use all the bits of racket and the assembler together as one.</p>\n\n<h2 id=\"animation\">Animation</h2>\n\n<p>Each animation has a set number of frames which we have extracted. What we will need to do is the following:</p>\n\n<ul>\n <li>Wait for some time so the animations aren&rsquo;t ridiculously fast</li>\n <li>Animate each sprite by changing its sprite pointer to the next frame, or wrapping back to the start</li></ul>\n\n<p>How do we know where each animation currently is? Well, we know which sprite we are dealing with, and we can read its current pointer value. With a bit of maths we can work out where its base pointer is, therefore which frame it is currently in, and what the pointer value will be when it is at the last frame.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">         </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/Delayed_Evaluation.html#(form._((lib._racket/promise..rkt)._delay))\" style=\"color: inherit\">delay</a></span><span class=\"w\"> </span><span class=\"n\">$5</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/Delayed_Evaluation.html#(form._((lib._racket/promise..rkt)._delay))\" style=\"color: inherit\">delay</a></span>\n<span class=\"w\">         </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$42</span>\n\n<span class=\"n\">:loop</span>\n<span class=\"w\">         </span><span class=\"c1\">; wait for the raster to hit the bottom of the screen</span>\n<span class=\"w\">         </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">$d012</span>\n<span class=\"w\">         </span><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"w\">         </span><span class=\"n\">bne</span><span class=\"w\"> </span><span class=\"n\">loop-</span>\n<span class=\"w\">         </span><span class=\"c1\">; decrease our delay by one</span>\n<span class=\"w\">         </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"n\">$42</span>\n<span class=\"w\">         </span><span class=\"n\">dex</span>\n<span class=\"w\">         </span><span class=\"c1\">; if it is zero, branch out</span>\n<span class=\"w\">         </span><span class=\"n\">beq</span><span class=\"w\"> </span><span class=\"n\">change+</span>\n<span class=\"w\">         </span><span class=\"c1\">; otherwise store the new delay value and go back to waiting</span>\n<span class=\"w\">         </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"n\">$42</span>\n<span class=\"w\">         </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">loop-</span>\n<span class=\"n\">:change</span>\n<span class=\"w\">         </span><span class=\"c1\">; reset delay</span>\n<span class=\"w\">         </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/Delayed_Evaluation.html#(form._((lib._racket/promise..rkt)._delay))\" style=\"color: inherit\">delay</a></span>\n<span class=\"w\">         </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"n\">$42</span>\n\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/fold))\" style=\"color: inherit\">for/fold</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">base-offset</span><span class=\"w\"> </span><span class=\"n\">$80</span><span class=\"p\">]</span>\n<span class=\"w\">                    </span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"w\">                    </span><span class=\"p\">[</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span><span class=\"p\">)])</span><span class=\"w\">                   </span>\n<span class=\"w\">                   </span><span class=\"p\">([</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">sprites</span><span class=\"p\">])</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">new-code</span>\n<span class=\"w\">                  </span><span class=\"p\">{</span>\n<span class=\"w\">                   </span><span class=\"c1\">;load sprite pointer value</span>\n<span class=\"w\">                   </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$07f8</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"w\">                   </span><span class=\"c1\">;is it on the final frame?    </span>\n<span class=\"w\">                   </span><span class=\"n\">cpx</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">base-offset</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sprite-data-frame-count</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">                   </span><span class=\"n\">bne</span><span class=\"w\"> </span><span class=\"n\">skip+</span>\n<span class=\"w\">                   </span><span class=\"c1\">;reset to its first frame</span>\n<span class=\"w\">                   </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"n\">@base-offset</span>\n<span class=\"w\">                   </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$07f8</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"w\">                   </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">done+</span>\n<span class=\"w\">                   </span><span class=\"n\">:skip</span>\n<span class=\"w\">                   </span><span class=\"c1\">; move to next frame</span>\n<span class=\"w\">                   </span><span class=\"n\">inx</span>\n<span class=\"w\">                   </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$07f8</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"w\">                   </span><span class=\"n\">:done</span><span class=\"w\">                   </span>\n<span class=\"w\">                   </span><span class=\"p\">}])</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">base-offset</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sprite-data-frame-count</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">))</span>\n<span class=\"w\">                     </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span><span class=\"w\"> </span><span class=\"n\">new-code</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">))))</span>\n<span class=\"w\">         </span>\n<span class=\"w\">         </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">loop-</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Again here we are using our old friend for/fold to generate the code for us. Notice in this example, the generated code uses local labels of :skip and :done, it is able to do this since asi64 has a (fairly common) feature of being able to have many labels named the same thing. You tell it to jump to the nearest one it finds either in front or behid the current location by suffixing with + or - respectively.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>The full porgram has a few more features, but hopefully has exemplified the idea of mixing racket and 6502 together to help generating code. It is now very easy to dump some new files into the directory, regardless of how many frames they have, compile and run the program to see them animated in the emulator (or on the real machine!)</p>\n\n<p>If you want to know more about how the sprites work on the C64, check out <a href=\"http:///www.codebase64.org\">codebase</a> which is chock full of great information.</p>")) ((? . 9) f post (u . "Getting at non-public property setters in a nice way :)") (? . 9) 1488257682 (p+ #"C:\\repos\\pezipink.github.io\\blog/2012/04/25/getting-at-non-public-property-setters-in-a-nice-way/index.html" . windows) (u . "/blog\\2012\\04\\25\\getting-at-non-public-property-setters-in-a-nice-way/") (u . "2012-04-25T02:18:00") (? . 1) (? . 8) (c (u . "fsharp")) (u . "\n<p>I’m sure every seasoned .NET developer has been in the situation at one stage or another, probably in testing code, where they need to access a non-public setter of a property (or maybe a private member), and it can’t be mocked.&#160; We all know the (somewhat scary) reflection trick to get at the said setter method and invoke it.&#160;&#160; I just hit this problem today trying to mock some response messages from a Microsoft Dynamics XRM 2011 OrganizationService.&#160; Thankfully F# gives us cool things like Quotations and symbolic functions (custom operators) to make this process more succinct.&#160; Instead of writing a method to reflect on a type, get the relevant method, then finally invoke the method and pass in both the original object instance and the new value being set, we can do the following:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(&lt;~)</span><span class=\"w\"> </span><span class=\"n\">property</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">\t</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">property</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">\t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PropertyGet</span><span class=\"o\">(</span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">Value</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)),</span><span class=\"n\">ri</span><span class=\"o\">,_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">\t    </span><span class=\"n\">ri</span><span class=\"o\">.</span><span class=\"n\">GetSetMethod</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">).</span><span class=\"n\">Invoke</span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,[|</span><span class=\"n\">value</span><span class=\"o\">|])</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">\t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"unsupported expression\"</span>\n<span class=\"w\">    </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>") #t (u . "\n<p>I’m sure every seasoned .NET developer has been in the situation at one stage or another, probably in testing code, where they need to access a non-public setter of a property (or maybe a private member), and it can’t be mocked.&#160; We all know the (somewhat scary) reflection trick to get at the said setter method and invoke it.&#160;&#160; I just hit this problem today trying to mock some response messages from a Microsoft Dynamics XRM 2011 OrganizationService.&#160; Thankfully F# gives us cool things like Quotations and symbolic functions (custom operators) to make this process more succinct.&#160; Instead of writing a method to reflect on a type, get the relevant method, then finally invoke the method and pass in both the original object instance and the new value being set, we can do the following:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(&lt;~)</span><span class=\"w\"> </span><span class=\"n\">property</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">\t</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">property</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">\t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">PropertyGet</span><span class=\"o\">(</span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">Value</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)),</span><span class=\"n\">ri</span><span class=\"o\">,_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">\t    </span><span class=\"n\">ri</span><span class=\"o\">.</span><span class=\"n\">GetSetMethod</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">).</span><span class=\"n\">Invoke</span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,[|</span><span class=\"n\">value</span><span class=\"o\">|])</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span>\n<span class=\"w\">\t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"unsupported expression\"</span>\n<span class=\"w\">    </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n<!-- more-->\n\n<p>PropertyGet is an active pattern defined in the Quotations namespace that matches a piece of code that is accessing a property. The first value bound in the pattern (if it exists) is a tuple containing the object instance that the property was accessed on and its type.&#160; The second value bound (ri) is the PropertyInfo for the property in question from the System.Reflection namespace.&#160; Using this information we can simply obtain the Set method, and invoke it on the first item in the x tuple and pass in the new value as its argument.</p>\n\n<p>To use this is simple :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">&lt;@</span><span class=\"w\"> </span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Attributes</span><span class=\"w\"> </span><span class=\"o\">@&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;~</span><span class=\"w\"> </span><span class=\"n\">newAttributes</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Simply quote the property in question, and invoke the operator with the new value (that looks very closely like the assignment operator &lt;- ) :)</p>\n\n<p>Another little use for operators&#160; I embraced is to deal with potential null values on properties when you are accessing them (assuming you don’t go all out and wrap everything in the Option type – you might not have the option to do this though (pun intended)) – write a custom operator like that lets you provide a default value if the property evaluates to null :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(&gt;?)</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"k\">null</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">input</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now you can use this like so, instead of having to repeat the code above all over the place, or explicitly call a function :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Attributes</span><span class=\"w\"> </span><span class=\"o\">&gt;?</span><span class=\"w\"> </span><span class=\"o\">[||]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">tryFind</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">SchemaName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">Attribute</span><span class=\"o\">.</span><span class=\"n\">SchemaName</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>All in all, loving the custom operators you can define in F# especially as you can scope them however you like, even in nested functions :)</p>")) ((? . 19) f post (u . "Don Syme 2.0 : Cow Herding Edition Type Provider") (? . 19) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2016/08/23/don-syme-2-0-cow-herding-edition-type-provider/index.html" . windows) (u . "/blog\\2016\\08\\23\\don-syme-2-0-cow-herding-edition-type-provider/") (u . "2016-08-23T23:34:00") (? . 20) (? . 31) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>Though the mystery man Don Syme, Father of F#, is generally heralded for various software based innovations and other computer related things, it transpires he has talents in other unrelated areas&hellip;</p>") #t (u . "\n<p>Though the mystery man Don Syme, Father of F#, is generally heralded for various software based innovations and other computer related things, it transpires he has talents in other unrelated areas&hellip;</p>\n<!-- more-->\n\n<p>Specifically, Don is master cow herder (yes, as in moo-cows). Whilst this might seem unlikely, I present to you a legendary but scarce video, with Don in action whilst attempting to get to work across the treachrous cow infested fields of Cambridge. Behold! (Watch the whole thing for a bonus cow at the end, tired from the workout)</p>\n\n<p>\n <iframe src=\"https://www.youtube.com/embed/tYycYHIU_jc\" width=\"420\" height=\"315\"></iframe></p>\n\n<h1>Type Providers?</h1>\n\n<p>It has been quite some time since I wrote a sensible type provider, well overdue I would say. I decided I would give the Don Syme Type Provider a facelift to celebrate his lesser-known talents of cow herding.</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/blog/2014/02/21/the-don-syme-type-provider\">The original type provider</a> produces an endless stream of facts about the mystery man himself. This of course remains, but now you can also specify if you are interested only in more technical / geeky facts as is evidenced in this picture.</p>\n\n<p><img src=\"../../../../../img/old/don2.png\" alt=\"\" width=\"800\" height=\"200\" /></p>\n\n<p>(see the last section of this post for instructions on obtaining and running the type provider)</p>\n\n<h1>Cows!</h1>\n\n<p>The primary new feature, however, is a type system game where you can play as Don, attempting to herd the Cambridge Cows back into their cow sheds. Here is a picture of a game in progress:</p>\n\n<p><img src=\"../../../../../img/old/dcows.png\" alt=\"\" width=\"600\" height=\"200\" /></p>\n\n<p>Legend:</p>\n\n<p>\"C\" -&gt; A Cow</p>\n\n<p>\"░\" -&gt; empty field</p>\n\n<p>\"D\" -&gt; Don</p>\n\n<p>\"*\" -&gt; A cow in a cow shed</p>\n\n<p>\"۩\" -&gt; A cow shed</p>\n\n<p>\"█\" -&gt; Wall</p>\n\n<p></p>\n\n<p>The aim is to get the cows into their cow sheds. Don is able to push the cows around, but only if there is an empty space behind them! You will quickly see this is really quite difficult and will require some thought to succeed.</p>\n\n<h1>Sokoban!</h1>\n\n<p>The astute and well gamed reader may have noticed this is a remixed version of the popular game <a href=\"https://en.wikipedia.org/wiki/Sokoban\">Sokoban</a>. It is in fact is a full Sokoban implementation in a type provider, that uses the .slc Sokoban level format. Let's have a look at how it works.</p>\n\n<h2>Model</h2>\n\n<p>We can model the entire game in a couple of unions and records (you can read the source of this file <a href=\"https://github.com/pezipink/InteractiveProvider/blob/master/CowHerding/Cows.fs\">here</a>)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Cambridge</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Cow</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Field</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\">  </span><span class=\"c1\">// true if on a shed</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"c1\">// true if a cow is in the Shed</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wall</span>\n\n<span class=\"w\">  </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"k\">override</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">ToString</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Cow</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"░\"</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"D\"</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"*\"</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"۩\"</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"█\"</span><span class=\"w\"> </span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Direction</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">North</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">South</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">East</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">West</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">int</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">LevelData</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span>\n<span class=\"w\">    </span><span class=\"n\">Width</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"w\">    </span><span class=\"n\">Height</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"w\">    </span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">int</span><span class=\"o\">*</span><span class=\"n\">int</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cambridge</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">LevelCollection</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">Title</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span>\n<span class=\"w\">    </span><span class=\"n\">Description</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span>\n<span class=\"w\">    </span><span class=\"n\">Copyright</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span>\n<span class=\"w\">    </span><span class=\"n\">Levels</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LevelData</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h2>Level Files</h2>\n\n<p>The .slc files are simply XML files, containing a set of levels. We can use the XML type provider to do the hard work for us (yes, you can use type providers in other type providers). The current directory is scanned for .slc level collection files at compile time, and each one is turned into a Level Collection record.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">readLevels</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">:</span><span class=\"nn\">CowLevel</span><span class=\"p\">.</span><span class=\"n\">SokobanLevels</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"c1\">// reads an entire .slc sokoban level collection</span>\n<span class=\"w\">  </span><span class=\"c1\">// do we care about memory? of course not!</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">Title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Title</span>\n<span class=\"w\">   </span><span class=\"n\">Description</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Description</span>\n<span class=\"w\">   </span><span class=\"n\">Copyright</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">LevelCollection</span><span class=\"o\">.</span><span class=\"n\">Copyright</span>\n<span class=\"w\">   </span><span class=\"n\">Levels</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">LevelCollection</span><span class=\"o\">.</span><span class=\"n\">Levels</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">      </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">Id</span>\n<span class=\"w\">        </span><span class=\"n\">Height</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">Height</span>\n<span class=\"w\">        </span><span class=\"n\">Width</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">Width</span>\n<span class=\"w\">        </span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">          </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">Ls</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">             </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">chars</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">Ls</span><span class=\"o\">.[</span><span class=\"n\">row</span><span class=\"o\">].</span><span class=\"n\">ToCharArray</span><span class=\"bp\">()</span>\n<span class=\"w\">             </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"n\">chars</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">               </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                 </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">chars</span><span class=\"o\">.[</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39; &#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Field</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;#&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Wall</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;$&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Cow</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;.&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;*&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;@&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"sc\">&#39;+&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwithf</span><span class=\"w\"> </span><span class=\"s\">\"unexpected character &#39;%c&#39;\"</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">               </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">col</span><span class=\"o\">),</span><span class=\"n\">c</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">ofList</span><span class=\"w\"> </span><span class=\"o\">})</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Piece of cake, it basically writes itself!</p>\n\n<h2>Logic</h2>\n\n<p>Now for the most difficult part, which is the encoding of the game rules. The type provider will always allow Don to attempt to move in any direction. We must work out if the movement is valid, and update the game state if it is.</p>\n\n<p>First up, find Don's current location in the map, and whether he is \"standing\" on a shed or field</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">moveDon</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">),</span><span class=\"n\">don</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">pick</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">map</span>\n<span class=\"w\">  </span><span class=\"c1\">// Don can only ever be standing on a open field or shed tile</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">oldTile</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">don</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Field</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Next we will need to work out what tiles will be affected by the move. This will always potentially be the two tiles in the direction Don is attempting to move. We can do a bit of trickery here to calculate the indexes and extract the map tiles, and if the index is out of bounds we ignore it. This will return a list of 1 or 2 tiles we can then match on to see what happens.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">direction</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">North</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">;-</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">South</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">East</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">West</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,-</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"mi\">0</span><span class=\"o\">,-</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">tryPick</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">+</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">function</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We can say that if Don is attempting to move onto a field, that is always valid regardless of the second tile. The same holds true for empty cow sheds</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// Don can always move onto a dirt tile</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Field</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Field</span><span class=\"o\">;_]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">map</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">oldTile</span>\n<span class=\"w\">  </span>\n<span class=\"w\">  </span><span class=\"c1\">// same as above, for moving onto a field without a cow in it</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">;_]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">map</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">oldTile</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In these cases we simply place Don in the new location, and replace his old location with whatever tile he was \"standing\" on before.</p>\n\n<p>The slightly more complex cases are of pushing cows around. However, using the pattern matching, the solution to this problem, like a lot of this, basically writes itself.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"c1\">// Valid cow cases. We can move a cow forward if there is an empty space behind them.</span>\n<span class=\"w\">  </span><span class=\"c1\">// Shed true is also a cow but must then be replaced with a Don true</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Cow</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">),</span><span class=\"n\">Field</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">map</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">oldTile</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Cow</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">   </span>\n<span class=\"w\">  </span><span class=\"c1\">// Moving a cow from a shed onto a field</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">),</span><span class=\"n\">Field</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">map</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">oldTile</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Cow</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">   </span>\n<span class=\"w\">  </span><span class=\"c1\">// moving a cow from a shed or field to a shed</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">),</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">map</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">oldTile</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">        </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"n\">Cow</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">),</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">map</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dx</span><span class=\"o\">,</span><span class=\"n\">dy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">oldTile</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span><span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Shed</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Don</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">    </span>\n<span class=\"w\">  </span><span class=\"c1\">// all other cases are invalid.</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And that is the entire game done, except a couple of auxillary functions to determine if the game has been won, to print the level and so forth.</p>\n\n<h1>Providing Bovine Based Types</h1>\n\n<p>Like all my type provider games, this is implemented using my <a href=\"http://pinksquirrellabs.com/post/2014/05/01/BASIC%E2%80%99s-50th-Anniversary-%E2%80%A6-and-more-crazy-F-type-providers!.aspx\">Interactive Provider</a> which allows easy creation of type providers without having to write any horrible provided types code. I have this simple union that determines the menu structure of the type provider</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">MenuTypes</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Introduction</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FactSelect</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Facts</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">bool</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CollectionSelect</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LevelSelect</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">LevelCollection</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Game</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">LevelData</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>then each one has a InteractiveState object associated with it, that determines the text that appears in Intellisense, the options displayed as properties, and a callback to handle the results. These call each other to navigate through the menus and recursively to display the endless amazing facts or the currently playing level of cow herding. I will show the fact states here, but you can look at the full implementation if you want to see how the cow herding works.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">factCycle</span><span class=\"w\"> </span><span class=\"n\">factType</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">      </span><span class=\"o\">[</span><span class=\"s\">\"Learn another amazing fact\"</span><span class=\"o\">,</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">getFact</span><span class=\"w\"> </span><span class=\"n\">factType</span>\n<span class=\"w\">    </span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">factCycle</span><span class=\"w\"> </span><span class=\"n\">factType</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"o\">_</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Facts</span><span class=\"w\"> </span><span class=\"n\">factType</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">factTypeSelect</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">      </span><span class=\"o\">[</span><span class=\"s\">\"All\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"w\">       </span><span class=\"s\">\"Technical\"</span><span class=\"o\">,</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">      </span><span class=\"s\">\"Select a fact category\"</span>\n<span class=\"w\">    </span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">resp</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">      </span><span class=\"n\">factCycle</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">:?&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"o\">_</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FactSelect</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>(the fact generator works by calling a webservice and parsing the results using the JSON type provider)</p>\n\n<h1>To Get Herding</h1>\n\n<p>(NOTE. You MUST change your tooltip font to a monospace font. I suggest Lucida Console in at least 16pt.)</p>\n\n<p><a href=\"https://github.com/pezipink/InteractiveProvider\">Grab the InteractiveProvider from my github here</a>, build it, then create a script file and reference the type provider. Since the InteractiveProvider dynamically loads assemblies that contain types implementing the interfaces it is looking for, you will have to tell it as a static parameter the directory that the cow herding dll resides in.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"c:\\repos\\InteractiveProvider\\InteractiveProvider\\bin\\Debug\\InteractiveProvider.dll\"</span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">PinkSquirrels.Interactive</span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">GamesType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InteractiveProvider</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"s\">@\"c:\\repos\\InteractiveProvider\\Cowherding\\bin\\Debug\\\"</span><span class=\"o\">&gt;</span>\n<span class=\"n\">games</span><span class=\"o\">.</span><span class=\"n\">``Start DonSyme``</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Credit where credit's due, I have included 3 .slc files of Sokoban levels from the <a href=\"http://www.sourcecode.se/sokoban/levels\">website found here</a>. If you are really bored at work, there are some forty thousand levels of cow herding action for you to download!</p>\n\n<p>Note this is designed to work in Visual Studio. Emacs will probably mess up the popups depending on your settings, and I have no idea what it will do in VSCode.</p>\n\n<p></p>\n\n<h1>MOOOOO! HAPPY HERDING!</h1>\n\n<p></p>")) ((? . 12) f post (u . "Lexical scoping and redefining function application") (? . 12) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2017/08/10/lexical-scoping-and-redefining-function-application/index.html" . windows) (u . "/blog\\2017\\08\\10\\lexical-scoping-and-redefining-function-application/") (u . "2017-08-10T17:17:04") (? . 11) (? . 2) (c (u . "scurry") c (u . "drey") c (u . "racket") c (u . "macros") c (u . "programming languages") c (u . "compilers")) (u . "\n<p><a href=\"http://pinksquirrellabs.com/blog/2017/08/04/racket-macros-scurry/\">The previous post</a> layed the foundations of creating a language and &ldquo;compiler&rdquo; using Racket macros.</p>\n\n<p>This is all very nice, but utimately it is just a bunch of macros. The &ldquo;language&rdquo; itself doesn&rsquo;t have any form of enforced semantics. You can introduce whatever syntax and macros you want, and use them however you like, even if it makes no sense at all.</p>\n\n<p>Whilst this is nice in a way (and can lead to some .. interesting .. &ldquo;features&rdquo;) it is often more of a pain than it&rsquo;s worth. Most of the errors we make in our day to day programming are picked up immediately by the background compiler, or the full compilation. Silly things like &ldquo;clipboard inheritance&rdquo; or typos attempting to use bindings that aren&rsquo;t in scope are high on the list of culprits here.</p>\n\n<p>In this post we will see how Racket can be used to help out by doing some lexical scope &ldquo;analysis&rdquo; in a slightly different way from a traditional compiler. We will also see how Racket can redefine its entire notion of function application, which will allow us to introduce some very nifty new syntax into Scurry itself.</p>") #t (u . "\n<p><a href=\"http://pinksquirrellabs.com/blog/2017/08/04/racket-macros-scurry/\">The previous post</a> layed the foundations of creating a language and &ldquo;compiler&rdquo; using Racket macros.</p>\n\n<p>This is all very nice, but utimately it is just a bunch of macros. The &ldquo;language&rdquo; itself doesn&rsquo;t have any form of enforced semantics. You can introduce whatever syntax and macros you want, and use them however you like, even if it makes no sense at all.</p>\n\n<p>Whilst this is nice in a way (and can lead to some .. interesting .. &ldquo;features&rdquo;) it is often more of a pain than it&rsquo;s worth. Most of the errors we make in our day to day programming are picked up immediately by the background compiler, or the full compilation. Silly things like &ldquo;clipboard inheritance&rdquo; or typos attempting to use bindings that aren&rsquo;t in scope are high on the list of culprits here.</p>\n\n<p>In this post we will see how Racket can be used to help out by doing some lexical scope &ldquo;analysis&rdquo; in a slightly different way from a traditional compiler. We will also see how Racket can redefine its entire notion of function application, which will allow us to introduce some very nifty new syntax into Scurry itself.</p>\n<!-- more-->\n\n<h1 id=\"lexical-scoping\">Lexical Scoping</h1>\n\n<p>Scurry supports local bindings, lambdas and closures. This means that a given section of code can only &ldquo;see&rdquo; bindings that are in scope for it. The virtual machine itself of course manages this, but I can tell you it&rsquo;s not much fun having to compile a program, load it in the VM and run it only to discover that you spelt &ldquo;john&rdquo; or &ldquo;x&rdquo; wrong.</p>\n\n<p>A traditional compiler will lex/parse the code and produce an asbtract syntax tree. It will then perform a semantic analysis pass where it checks to make sure everything &ldquo;makes sense&rdquo;. This includes type checking and lexical scoping, amongst possibly other things. I don&rsquo;t care about type checking for this language, but it would be nice to make sure bindings that are being used are in scope! Unlike a normal compiler though, the &ldquo;compilation&rdquo; here is happening within the racket compiler via macro expansion. This puts us in a unique position where we are &ldquo;there as it happens&rdquo; rather than &ldquo;looking at it afterwards&rdquo;.</p>\n\n<p>A macro itself can also execute Racket code just like it can at runtime.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((lib._racket/private/misc..rkt)._writeln))\" style=\"color: inherit\">writeln</a></span><span class=\"w\"> </span><span class=\"s2\">\"at <a href=\"http://docs.racket-lang.org/reference/eval.html#(def._((quote._~23~25kernel)._compile))\" style=\"color: inherit\">compile</a> time\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((lib._racket/private/misc..rkt)._writeln))\" style=\"color: inherit\">writeln</a></span><span class=\"w\"> </span><span class=\"s2\">\"at runtime\"</span><span class=\"p\">)])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This means we can do some interesting stuff such as track what is going on during compilation by writing whatever code we want. In this case, we can emulate what the VM does by keeping track of what bindings are in scope. The data structure for this is a stack of sets, where the stack represents layers of scopes and the sets are the names of bindings.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin-for-syntax))\" style=\"color: inherit\">begin-for-syntax</a></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">scoped-bindings-stack</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._box))\" style=\"color: inherit\">box</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._mutable-set))\" style=\"color: inherit\">mutable-set</a></span><span class=\"p\">))))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">push-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._unbox))\" style=\"color: inherit\">unbox</a></span><span class=\"w\"> </span><span class=\"n\">scoped-bindings-stack</span><span class=\"p\">)]</span>\n<span class=\"w\">           </span><span class=\"p\">[</span><span class=\"n\">new-lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._mutable-set))\" style=\"color: inherit\">mutable-set</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"p\">)])</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span><span class=\"w\"> </span><span class=\"n\">scoped-bindings-stack</span><span class=\"w\"> </span><span class=\"n\">new-lst</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pop-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._unbox))\" style=\"color: inherit\">unbox</a></span><span class=\"w\"> </span><span class=\"n\">scoped-bindings-stack</span><span class=\"p\">)]</span>\n<span class=\"w\">           </span><span class=\"p\">[</span><span class=\"n\">new-lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))\" style=\"color: inherit\">cdr</a></span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"p\">)])</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span><span class=\"w\"> </span><span class=\"n\">scoped-bindings-stack</span><span class=\"w\"> </span><span class=\"n\">new-lst</span><span class=\"p\">)))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">peek-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">lst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._unbox))\" style=\"color: inherit\">unbox</a></span><span class=\"w\"> </span><span class=\"n\">scoped-bindings-stack</span><span class=\"p\">)])</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))\" style=\"color: inherit\">car</a></span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"p\">)))</span>\n<span class=\"w\">            </span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">add-scoped-binding</span><span class=\"w\"> </span><span class=\"n\">stx-name</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"n\">stx-name</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">peek-scoped-stack</span><span class=\"p\">)])</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set-member~3f))\" style=\"color: inherit\">set-member?</a></span><span class=\"w\"> </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((lib._racket/private/misc..rkt)._writeln))\" style=\"color: inherit\">writeln</a></span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span><span class=\"w\"> </span><span class=\"s2\">\"warning: <a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a> is already in scope at ~a\"</span>\n<span class=\"w\">                 </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Source_Locations.html#(def._((lib._syntax/srcloc..rkt)._source-location-~3estring))\" style=\"color: inherit\">source-location-&gt;string</a></span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set-add!))\" style=\"color: inherit\">set-add!</a></span><span class=\"w\"> </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in-scope?</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span><span class=\"w\">  </span>\n<span class=\"w\">        </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty~3f))\" style=\"color: inherit\">empty?</a></span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"no\">#f</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set-member~3f))\" style=\"color: inherit\">set-member?</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))\" style=\"color: inherit\">car</a></span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))\" style=\"color: inherit\">cdr</a></span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"p\">))]))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._unbox))\" style=\"color: inherit\">unbox</a></span><span class=\"w\"> </span><span class=\"n\">scoped-bindings-stack</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You&rsquo;ll notice the first thing is <code>begin-for-syntax</code> this elevates the <a href=\"http://docs.racket-lang.org/guide/phases.html\">phase-level</a> by one, which makes this set of bindings accessible from the macros, meaning this stuff will happen at compile time.</p>\n\n<p>You can see I am using mutable sets and (effectively mutable) lists for this implementation. Racket is a functional language and I&rsquo;m sure there&rsquo;s nicer ways to do this at compile time, but this is (currently) easy to reason about and it works just fine, so it will do for the time being!</p>\n\n<p>Most of this is not very interesting - it does what you would expect and provides functions for pushing / popping new scopes, adding a binding name to the current scope, and a function that walks up the stack looking for a binding with a particular name.</p>\n\n<p>One part that is interesting is inside <code>add-scoped-binding</code> - you can see it takes a syntax object <code>stx</code> which it can use to present a warning to the user if they have shadowed a binding, along with the location in the source file where it occured.</p>\n\n<p>Let&rsquo;s introduce a new syntax class like the <code>binding</code> one from the last post, with a key difference.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin-for-syntax))\" style=\"color: inherit\">begin-for-syntax</a></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._define-syntax-class))\" style=\"color: inherit\">define-syntax-class</a></span><span class=\"w\"> </span><span class=\"n\">scoped-binding</span>\n<span class=\"w\">    </span><span class=\"kd\">#:description</span><span class=\"w\"> </span><span class=\"s2\">\"identifier in scope\"</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._pattern))\" style=\"color: inherit\">pattern</a></span><span class=\"w\"> </span><span class=\"n\">x:id</span>\n<span class=\"w\">             </span><span class=\"kd\">#:with</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"w\">             </span><span class=\"kd\">#:when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in-scope?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">))))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is identical to the other syntax class, except it has a <code>when</code> clause that says the stringified version of it must be <code>in-scope?</code>.</p>\n\n<p>Since all uses of bound identifiers as arguments must at some point or another come through the <code>eval-arg</code> macro, we can make a small tweak from this:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">eval-arg</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">id:binding</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldvar</span><span class=\"w\"> </span><span class=\"ss\">id.name</span><span class=\"p\">))</span>\n\n<span class=\"w\">   </span><span class=\"c1\">; rest of macro</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>to this:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">eval-arg</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">id:scoped-binding</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#''</span><span class=\"p\">((</span><span class=\"ss\">ldvar</span><span class=\"w\"> </span><span class=\"ss\">id.name</span><span class=\"p\">))</span>\n\n<span class=\"w\">   </span><span class=\"c1\">; rest of macro</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And that&rsquo;s it. We will now get compile errors <em>anywhere in the entire language</em> that we try to use an identifier that is not bound. Of course, we are missing a piece, which is modifiying the macros that introduce bindings and scopes to call the relevant functions. Here&rsquo;s def:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">def</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">id:binding</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">add-scoped-binding</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">id.name</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._this-syntax))\" style=\"color: inherit\">this-syntax</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"ss\">stvar</span><span class=\"w\"> </span><span class=\"ss\">id.name</span><span class=\"p\">))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<div class=\"figure\"><img src=\"../../../../../img/scurry/scurry-1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Notice here the background compiler has picked up this error in Emacs! This is because the error occurs at macro expansion time.</p>\n\n<p>Here is lambda:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">s-lambda</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg:binding</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">push-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">add-scoped-binding</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">arg.name</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._this-syntax))\" style=\"color: inherit\">this-syntax</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._with-syntax))\" style=\"color: inherit\">with-syntax</a></span>\n<span class=\"w\">     </span><span class=\"p\">([</span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-label</span><span class=\"p\">)])</span>\n<span class=\"w\">     </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"w\">           </span>\n<span class=\"w\">         </span><span class=\"c1\">;tell the assembler to create this later</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\">pending-function</span><span class=\"w\">             </span>\n<span class=\"w\">           </span><span class=\"ss\">label</span><span class=\"w\">            </span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"ss\">stvar</span><span class=\"w\"> </span><span class=\"ss\">arg.name</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"o\">,</span><span class=\"n\">body</span>\n<span class=\"w\">           </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">pop-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"ss\">ret</span><span class=\"p\">))</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span><span class=\"w\"> </span><span class=\"ss\">label</span><span class=\"p\">)))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice in lambda I am using <code>,(pop-scoped-stack)</code> which should not work since it&rsquo;s at a different phase level (since it&rsquo;s in the syntax being returned). I used a little trick here where I simply define a macro with the same name that it CAN see, that returns an empty list (there&rsquo;s probably a nicer way to do this, I have not much clue what I am doing yet).</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">pop-scoped-stack</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">pop-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#''</span><span class=\"p\">()])</span>\n\n<span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">push-scoped-stack</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">push-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#'`</span><span class=\"p\">()])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Regardless, this is quite cool! The actual compiled bytecode of the lambda itself is re-arranged by the assembler much later and put at the bottom of the binary file. The scoping doesn&rsquo;t care about this though as it only deals with what happens at <em>expansion time</em>. In this case, <code>,body</code> gets expanded first, then the scope is popped during expansion of <code>,(pop-scoped-stack)</code>, which means in the source definition of the lambda you will only have access to things bound lexically above you :)</p>\n\n<p>Of course this is not limited to lambdas, it means now you can create macros that suggest scope, and have it enforced for you by the compiler. For example, Scurry is part functional part imperative, so it follows one of the most-used tools is <code>foreach</code> which allows you to bind each element of a list to some identifier and then use it in the body. I have now placed the scoping functions at the relavent places and the compiler will stop you attempting to use the bound identifier outside of the <code>foreach</code> scope.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foreach</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span><span class=\"w\"> </span><span class=\"n\">stx</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">var:binding</span><span class=\"w\"> </span><span class=\"n\">list-expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/syntax-util.html#(form._((lib._racket/syntax..rkt)._with-syntax*))\" style=\"color: inherit\">with-syntax*</a></span>\n<span class=\"w\">       </span><span class=\"p\">([</span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-label</span><span class=\"p\">)]</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">continue</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-label</span><span class=\"p\">)]</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new-var</span><span class=\"p\">)]</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">start</span>\n<span class=\"w\">         </span><span class=\"o\">#'`</span><span class=\"p\">(</span>\n<span class=\"w\">             </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">list-expr</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"c1\">;test there are items otherwise skip</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">p_len</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">ldval</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">beq</span><span class=\"w\"> </span><span class=\"ss\">continue</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">ldval</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">stvar</span><span class=\"w\"> </span><span class=\"ss\">idx</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">label</span><span class=\"w\"> </span><span class=\"ss\">ldvar</span><span class=\"w\"> </span><span class=\"ss\">idx</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">p_index</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">stvar</span><span class=\"w\"> </span><span class=\"ss\">var.name</span><span class=\"p\">))]</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">end</span>\n<span class=\"w\">         </span><span class=\"o\">#'`</span><span class=\"p\">(</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">p_len</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">ldvar</span><span class=\"w\"> </span><span class=\"ss\">idx</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">inc</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">p_stvar</span><span class=\"w\"> </span><span class=\"ss\">idx</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">bne</span><span class=\"w\"> </span><span class=\"ss\">label</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">continue</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">(</span><span class=\"ss\">pop</span><span class=\"p\">)</span><span class=\"w\">             </span>\n<span class=\"w\">             </span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">pop-scoped-stack</span><span class=\"p\">))])</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">push-scoped-stack</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">add-scoped-binding</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">var.name</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">))]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here is an example of using foreach, where we shadow the binding <code>i</code> and get a warning for it, then try to use it again outside of the scope and get an error.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/scurry/scurry-2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"figure\"><img src=\"../../../../../img/scurry/scurry-3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h1 id=\"property-accessors\">Property Accessors</h1>\n\n<p>The core datatype in Scurry, much like JavaScript or Lua, is a string-&gt;object dictionary.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">def-obj</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"s2\">\"name\"</span><span class=\"w\"> </span><span class=\"s2\">\"juan\"</span><span class=\"p\">]</span>\n<span class=\"w\">                 </span><span class=\"p\">[</span><span class=\"s2\">\"coins\"</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In order to use a property you must use the somewhat verbose <code>get-prop</code> syntax</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">money</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">get-prop</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"s2\">\"coins\"</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is very flexible as you can determine the object and the key with expressions, however, a lot of the time you just want to pass a property to some function call. As you can imagine, this can quickly get annoying. Even worse, if you want to add 10 to the player&rsquo;s money, you&rsquo;d have to do this</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">set-prop</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"s2\">\"coins\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">get-prop</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"s2\">\"coins\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Nasty! Since this is so common, I wrote some macros so you can do the following</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">prop+=</span><span class=\"w\"> </span><span class=\"n\">player</span><span class=\"w\"> </span><span class=\"s2\">\"coins\"</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Better, but still not very satisfing.</p>\n\n<p>What I would really like is a sytax like Lua where i can write <code>obj.prop</code> as shorthand to refer to a property. Let&rsquo;s see if we can write a syntax class to help do exactly that</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin-for-syntax))\" style=\"color: inherit\">begin-for-syntax</a></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._define-syntax-class))\" style=\"color: inherit\">define-syntax-class</a></span><span class=\"w\"> </span><span class=\"n\">prop-accessor</span>\n<span class=\"w\">    </span><span class=\"kd\">#:description</span><span class=\"w\"> </span><span class=\"s2\">\"property accessor\"</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html#(form._((lib._syntax/parse..rkt)._pattern))\" style=\"color: inherit\">pattern</a></span><span class=\"w\"> </span><span class=\"n\">x:id</span>\n<span class=\"w\">             </span><span class=\"kd\">#:when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-contains~3f))\" style=\"color: inherit\">string-contains?</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"kd\">#:with</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))\" style=\"color: inherit\">car</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-split))\" style=\"color: inherit\">string-split</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"p\">))</span>\n<span class=\"w\">             </span><span class=\"kd\">#:when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in-scope?</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">ident</span><span class=\"p\">))</span>\n<span class=\"w\">             </span><span class=\"kd\">#:with</span><span class=\"w\"> </span><span class=\"n\">prop</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cadr))\" style=\"color: inherit\">cadr</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-split))\" style=\"color: inherit\">string-split</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-e))\" style=\"color: inherit\">syntax-e</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"p\">))</span>\n<span class=\"w\">             </span><span class=\"p\">)))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here we check if the bidning has a \".\" in it and then split it into two halves. We also check the left half is <code>in-scope?</code> whilst we are at it, and return the left and right sides as <code>ident</code> and <code>prop</code>.</p>\n\n<p>(apologies for the redundant bits of code here, I&rsquo;ve not worked out how to sort that out yet!)</p>\n\n<p>Now we can add a new &rsquo;lil case to the old faithful <code>eval-arg</code> macro:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">id:prop-accessor</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">get-prop</span><span class=\"w\"> </span><span class=\"n\">id.ident</span><span class=\"w\"> </span><span class=\"n\">id.prop</span><span class=\"p\">)]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And we are done. Now, we can use the shorthand property acessor anywhere in the whole language that accepts an argument! As an extra bonus, it will give you a compile error if you get your identifier wrong.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/scurry/scurry-4.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Fantastic! What about the other problem though? Wouldn&rsquo;t it be really nice if you could write this, in completely non-lisp style?</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">john.coins</span><span class=\"w\"> </span><span class=\"n\">+=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">john.coins</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Of course, Lisp generally only accepts the prefix style, where the first element in the list must be a macro or function name. This would mean that <code>join.coins</code> would have to be a macro or function - that would be silly though, obviously!</p>\n\n<p>One of the coolest tools in the Racket toolbox is the ability to override the way it applies functions themselves. It gives you the ability to &ldquo;get in there first&rdquo; and match on the whole pice of syntax and re-arrange it before it carries on (if it has not already matched the name to a macro, as far as I understand). There is a little logistical work to enable this which I won&rsquo;t cover here, but essentially you end up re-defining the special form <code>#%app</code></p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span><span class=\"w\"> </span><span class=\"n\">stx</span>\n<span class=\"w\">    </span><span class=\"kd\">#:datum-literals</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">+=</span><span class=\"w\"> </span><span class=\"n\">-=</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">f:prop-accessor</span><span class=\"w\"> </span><span class=\"n\">+=</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">prop+=</span><span class=\"w\"> </span><span class=\"n\">f.ident</span><span class=\"w\"> </span><span class=\"n\">f.prop</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">f:prop-accessor</span><span class=\"w\"> </span><span class=\"n\">-=</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">prop-=</span><span class=\"w\"> </span><span class=\"n\">f.ident</span><span class=\"w\"> </span><span class=\"n\">f.prop</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">f:prop-accessor</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">set-prop</span><span class=\"w\"> </span><span class=\"n\">f.ident</span><span class=\"w\"> </span><span class=\"n\">f.prop</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"c1\">; process everything else as normal</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this very cool piece of code, we pattern match on the syntax just like any other macro, except this time we are matching on <em>all applications</em>. You can see here I use the <code>prop-accessor</code> syntax class in the head position, followed by one of the three literals = += and -=. If these match, they are rewritten to their relevant scurry forms, otherwise, we allow the application to carry on as it normally would.</p>\n\n<p>Now, this code works, and we still get the in-scope check :)</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">scurry</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def-obj</span><span class=\"w\"> </span><span class=\"n\">john</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"s2\">\"coins\"</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">]))</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">dbgl</span><span class=\"w\"> </span><span class=\"s2\">\"john has\"</span><span class=\"w\"> </span><span class=\"n\">john.coins</span><span class=\"w\"> </span><span class=\"s2\">\" coins\"</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">john.coins</span><span class=\"w\"> </span><span class=\"n\">+=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">dbgl</span><span class=\"w\"> </span><span class=\"s2\">\"john now has\"</span><span class=\"w\"> </span><span class=\"n\">john.coins</span><span class=\"w\"> </span><span class=\"s2\">\" coins\"</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Imagine the possibilies with this!</p>\n\n<p>In fact, here&rsquo;s a very cool one. Since Scurry is a mixture of compile time macros and lambda function applications, I had to have a macro to perform the function application:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">~</span><span class=\"w\">  </span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#'`</span><span class=\"p\">(</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"p\">((</span><span class=\"o\">,</span><span class=\"p\">(</span><span class=\"n\">eval-arg</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/private/base..rkt)._apply))\" style=\"color: inherit\">apply</a></span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is great, but it gets very annoying having to write <code>(~ f arg)</code> everywhere, and it&rsquo;s easy to forget. Wouldn&rsquo;t it be nice if Racket just assumed everyhing that wasn&rsquo;t a macro must need a scurry function application?</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"c1\">; process everything else as a scurry function appication</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)]</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Done! Now the entire language no longer needs explicit function application.</p>\n\n<p>That&rsquo;s it for this time around, I hope this shows you some more of what Racket is capable of.</p>")) ((? . 20) f post (u . "Introducing - The Mixin Type Provider") (? . 20) 1488171288 (p+ #"C:\\repos\\pezipink.github.io\\blog/2015/03/01/introducing-the-mixin-type-provider/index.html" . windows) (u . "/blog\\2015\\03\\01\\introducing-the-mixin-type-provider/") (u . "2015-03-01T12:28:00") (? . 24) (? . 19) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>I am very excited to finally share the first version of my latest type provider, the Mixin Provider! This post is quite long but you should read it all, this only scratches the surface really.</p>") #t (u . "\n<p>I am very excited to finally share the first version of my latest type provider, the Mixin Provider! This post is quite long but you should read it all, this only scratches the surface really.</p>\n<!-- more-->\n\n<h1>Background</h1>\n\n<h2></h2>\n\n<h2>Code Generation in F#</h2>\n\n<p>Code generation in any language is a double edged sword. It is an extremely powerful technique used all over the place, often to great effect. It can also turn into a complete nightmare with millions of often unnecessary and bloated lines of code, hard to find bugs, and hard to manage templates.</p>\n\n<p>F# goes a long way to eliminating the need for a lot of boilerplate code with the use of its amazing Erasing Type Providers, of which you may know I am a big fan and have wrote <a href=\"https://github.com/fsprojects/SQLProvider/tree/master/src/SQLProvider\">many useful</a> and <a href=\"https://skillsmatter.com/skillscasts/6126-where-no-type-has-gone-before#video\">even more useless examples</a> of.</p>\n\n<p>However, that does not mean that F# has no need of code generation or boilerplate &ndash; erasing type providers ace and all, but I have still found myself on numerous occasions writing some dodgy F# script that pumps out a load of (incorrectly indented) code using some metadata to save me the legwork of writing and maintaining it manually, and I&rsquo;m sure a lot of you have too, or certainly could have a use for being able to generate F# code in a controlled manner if there was a relatively easy way to do it.</p>\n\n<p>The code generation story for F# is basically non existent. The only thing I am aware of other than just doing it yourself, are generative type providers &ndash; which are extremely limited, hard to write and not very appealing in general. In particular, generative type providers can only generate simple types and are not able to generate arbitrary code or any of the special F# types such as record types, discriminated unions, computation expressions, type providers, or even types that use .NET generics.</p>\n\n<h2>The Mixin</h2>\n\n<p>The concept of Mixin means different things in different languages. I am taking my inspiration from the very awesome D programming language which I have been learning recently. <a href=\"http://dlang.org/mixin.html\">The D mixin</a> is extremely powerful, it can accept any compile-time program, and during compilation it is passed through a D interpreter and the results are inserted into that very location in the program. This is not a pre-compile step. Now, whilst I can&rsquo;t achieve that kind of power, this knowledge along with my many many crazy experiments with type providers led me to the realization that I could do a similar thing.</p>\n\n<h1>The Mixin Type Provider</h1>\n\n<h2>! Type Provider Police !</h2>\n\n<p>If such a thing exists, I am going to be #1 on their most wanted list for this one! (If I wasn&rsquo;t already!). Forget the <a href=\"https://github.com/fsprojects/FSharp.TypeProviders.StarterPack/blob/master/src/ProvidedTypes.fs\">notorious provided types API</a> and type erasure. In fact, the Mixin TP in many ways is not a type provider at all! It is mostly some *ahem* creative use of the fact that a type provider is really a plugin or extension point for the F# compiler we can hook into to do fun stuff which were probably not supposed to.</p>\n\n<h2>Mixin Lite</h2>\n\n<p>Let&rsquo;s take a look at the simplest example of the Mixin provider in action, in what I like to call Lite mode. When used in this fashion, the Mixin TP acts very much like a generative type provider, with most of the same limitations that are inherited from using the Type Provider infrastructure.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">MixinProvider</span><span class=\"w\"> </span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">FirstTest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mixin_gen</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"s\">\"\"\"let generate() = \"let x = 42\" \"\"\"</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span>\n<span class=\"nn\">FirstTest</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"c1\">// 42</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>What&rsquo;s happening here? A type alias called <em>FirstTest</em>is created, referencing the type provider <em>mixin_gen</em>. The static parameter passed to <em>mixin_gen</em> is a F# <em>metaprogram</em>. This program can be any valid F# interactive program (and would not usually be specified inline in this manner). Mixin Metaprograms have only one rule &ndash; they must have an accessible function called <em>generate</em>which will be called at compile time and is expected to return <em>another</em> F# program that will be compiled into an assembly, written to disk, and then have its types injected back through the <em>FirstTest</em>alias.</p>\n\n<p>Phew, that was a bit of a mouthful. Let&rsquo;s see what&rsquo;s happening step by step:</p>\n\n<ol>\n <li>During compilation the type provider creates an FSI session and loads in the code <em>let generate() = \"let x = 42\"</em></li>\n <li>The FSI session evaluates <em>generate()</em>which in turn returns the string <em>\"let x = 42\"</em></li>\n <li>The type provider wraps the resulting program in a module named <em>FirstTest</em></li>\n <li>The type provider takes the completed program text, and compiles it with the F# compiler</li>\n <li>The resulting assembly is written to a location on the disk named <em>FirstTest.dll</em></li>\n <li>The type provider infrastructure is leveraged to provide you access to the generated code directly through the <em>FirstTest</em> type alias.</li></ol>\n\n<h2></h2>\n\n<h3></h3>\n\n<h2>Metaprogram files and parameters</h2>\n\n<p>Let&rsquo;s look at how we can take this concept further. Mostly you will not want to write inline programs, but instead specify .fsx files that contain them. You are also able to extend your generate function so that it accepts parameters, which can be passed in as static parameters to <em>mixin_gen.</em></p>\n\n<p>Here&rsquo;s an example metaprogram, ConnectionString.fsx</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">generate</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"John\"</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">DateTime</span><span class=\"p\">.</span><span class=\"nn\">Now</span><span class=\"p\">.</span><span class=\"n\">DayOfWeek</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">DayOfWeek</span><span class=\"p\">.</span><span class=\"n\">Monday</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"s\">\"let [&lt;Literal&gt;] connectionString = </span><span class=\"se\">\\\"</span><span class=\"s\">JohnMon!</span><span class=\"se\">\\\"</span><span class=\"s\"> \"</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"John\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Dave\"</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"s\">\"let [&lt;Literal&gt;] connectionString = </span><span class=\"se\">\\\"</span><span class=\"s\">normal :(</span><span class=\"se\">\\\"</span><span class=\"s\"> \"</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwithf</span><span class=\"w\"> </span><span class=\"s\">\"user %s is not allowed a connection string!\"</span><span class=\"w\"> </span><span class=\"n\">user</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this metaprogram we use both a parameter passed in and some environmental data to calculate what our connection string should be. Notice how the two good branches both generate a [] string called connectionString. If the user is not Dave or John, the Mixin provider will refuse to generate any code.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ConnectionString_Test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mixin_gen</span><span class=\"o\">&lt;</span><span class=\"s\">\"connectionstring.fsx\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">metaprogramParameters</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">John</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"n\">ConnectionString</span><span class=\"o\">=</span><span class=\"nn\">ConnectionString_Test</span><span class=\"p\">.</span><span class=\"n\">connectionString</span><span class=\"o\">&gt;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Awesome! In this example, a compile time program is used to work out which connection string is required, and because the output is a literal, it can be fed straight into a static parameter of <em>another</em> type provider, in this case the erasing SQL provider. This is an immediate and powerful fusion of the Mixin type provider with erasing type providers, and solves a real problem a lot of people experience when forced to use literals as static parameters. We also use a mixin static parameter here that is passed through to the generate function. You might be thinking, that somewhat mitigates the benefit gained by generating the connection string, and you&rsquo;d be right! I just wanted to show it&rsquo;s you are able to, and can open some very powerful possibilities.</p>\n\n<h2>Mixin Full</h2>\n\n<p>You might have noticed that in the previous examples I didn&rsquo;t actually generate any types, and you&rsquo;d be right. In fact the Mixin provider used an odd sort of form of <em><a href=\"http://en.wikipedia.org/wiki/Compile_time_function_execution\">compile time function execution</a></em> . This lets you calculate stuff up front rather than at runtime. The obvious candidates here are lookup tables and heavy math crunching, though once you get a metaprogram mindset going you will realise a lot more potential for it.</p>\n\n<p>Types, on the other hand, are probably what most people will want from a code generator. I deliberately left types out of the above examples, because when the Mixin provider is used in the above manner, it is basically the same as a generative type provider &ndash; that is, though you can generate any code you like, you will not &ldquo;see&rdquo; F# specific types for what they are, rather they will be presented to you as normal .NET types (you can still use generics and stuff though!)</p>\n\n<h2>A change of mindset</h2>\n\n<p>To harness the full power of the Mixin Provider, a change of mindset is going to be required. Forget this is even a type provider at all &ndash; in fact is isn&rsquo;t really - it is a code generator hooked into the compile pipeline with some powerful features and libraries to go with it. If you reference the libraries it produces from another program, you will have none of the aforementioned limitations, and you will be able to generate everything from records to type providers.</p>\n\n<p>If that sounds like it&rsquo;s going to be a pain, it really isn&rsquo;t. Create a code generator project that contains all your metaprograms and the Mixin provider reference. You are able to tell the provider where to write its assemblies, and you make that your shared \\lib\\ directory. After the first time you generate the assemblies, reference them in your other projects are you are done &ndash; as long as your code generation project builds first, all the dependent libraries will see any updated assemblies. This, in my mind, is a very small trade off for the power gained :) (by the way, there are switches that can tell the Mixin provider to never generate, always generate, or generate when something changed)</p>\n\n<h2>Strings Suck!</h2>\n\n<p>Yeah yeah, I know. Almost all code generators (macro expansion style aside) suffer from this problem in one form or another. It&rsquo;s the tradeoff you have to make. I could argue that dealing with massive expression trees is also not much fun, even if it is &ldquo;safer&rdquo;. In fact, strings make some things really easy that would be very tough in expression trees. For F#, things are even worse, as being a whitespace sensitive language, it is at minimum a pain to get the indentation right, and in many cases can be really quite tricky. (By the way, if you are thinking &ldquo;Quotations!&rdquo; at this point, <a href=\"https://github.com/eiriktsarpalis/QuotationCompiler\">Erik&rsquo;s excellent Quotation Compiler</a> can be used in conjunction with the Mixin TP, but quotations are very limited and can&rsquo;t deal with a whole bunch of stuff including type declarations.)</p>\n\n<h3></h3>\n\n<h3></h3>\n\n<h2>A compositional code generation DSL (<a href=\"https://github.com/pezipink/MixinProvider/blob/master/src/MixinProvider/SquirrelGen.fs\">SquirrelGen</a>!)</h2>\n\n<p>I was thinking about how I could make code generation easier. The two main problems to deal with are to reduce the amount of strings to a minimum, and somehow tackle the indentation in a nice way that would be largely transparent to the user. Being a big fan of <a href=\"http://www.quanttec.com/fparsec/\">FParsec</a>, I thought it should be possible to do basically the opposite, where we start with small string creation functions and gradually compose them together into bigger and bigger functions that are able to generate various F# constructs. This approach is very powerful in many ways, partial function application here means we can almost entirely remove the problem of worrying about indentation &ndash; the downside is the library source is quite complicated to understand at first if you have not done a lot of compositional heavy work (neither have I!). However, you don&rsquo;t really need to understand it fully to use it effectively!</p>\n\n<p><strong>(NOTE! This generation DSL is very young, the product of a few train journeys! it is subject to complete change at any point!)</strong></p>\n\n<p>Let&rsquo;s look at a new metaprogram that will introduce several new ideas.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"FSharp.Data.SqlProvider.dll\"</span><span class=\"w\"> </span>\n<span class=\"o\">#</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"s\">\"SquirrelGen.fs\"</span>\n\n<span class=\"o\">[&lt;</span><span class=\"n\">Literal</span><span class=\"o\">&gt;]</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">peopleCs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">@\"Driver={Microsoft Excel Driver (*.xls)};DriverId=790;Dbq=I:\\people.xls;DefaultDir=I:\\;\"</span>\n\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">FSharp.Data.Sql</span><span class=\"w\"> </span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">MixinProvider</span><span class=\"w\"> </span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">System.Text</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">ODBC</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">peopleCs</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">generate</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"c1\">// create a person record type </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">personType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"n\">crecord</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"s\">\"Person\"</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">[</span><span class=\"s\">\"firstName\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"string\"</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"s\">\"lastName\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"string\"</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"s\">\"age\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"int\"</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"bp\">[]</span>\n\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">createPersonRecord</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">fullName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sprintf</span><span class=\"w\"> </span><span class=\"s\">\"%s%s\"</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"c1\">// create record instantation </span>\n<span class=\"w\">   </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">record</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">instRecord</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"o\">[</span><span class=\"s\">\"firstName\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"s\">\"lastName\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"s\">\"age\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"c1\">// create let expression </span>\n<span class=\"w\"> </span><span class=\"n\">cleti</span><span class=\"w\"> </span><span class=\"n\">fullName</span><span class=\"w\"> </span><span class=\"n\">record</span>\n\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">peopleRecords</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[].[SHEET1$]``</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">person</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"n\">createPersonRecord</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">FIRSTNAME</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">LASTNAME</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">AGE</span><span class=\"o\">))</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span>\n\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">StringBuilder</span><span class=\"bp\">()</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"c1\">// create a module with all our stuff in it </span>\n<span class=\"w\"> </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"n\">cmodule</span><span class=\"w\"> </span><span class=\"s\">\"People\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">personType</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">peopleRecords</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this example the metaprogram <em>itself</em>uses the SQL type provider. This time, it is used in ODBC mode connecting to a spreadsheet that has some information about people in it. A record type <em>Person</em>is created to hold the information and then an instance for each person is created, and finally it is all wrapped in a module named <em>People</em>. This produces the following code</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">[&lt;</span><span class=\"n\">AutoOpen</span><span class=\"o\">&gt;]</span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"nn\">Excel_Test</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"nn\">People</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Person</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">DaveJones</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Dave\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Jones\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">21</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">JohnJuan</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"John\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Juan\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">RossMcKinlay</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Ross\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"McKinlay\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">JuanJuanings</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Juan\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">lastName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Juanings\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We can harness the huge power of the erasing type providers as in input to the generation DSL and very easily create code. This is a trivial example of course, a real example might create types from metadata and have implementations that also use runtime erasing type providers! The code generation DSL is very young in changing a lot, but notice how you do not have to care about indentation at all, it just sorts it out for you based on an initial number that was passed into <em>cmodule</em>(1 in this case, as I know the Mixin provider wants to wrap the results with another module). It contains (or will) functions to create most F# types and common constructs, and if it&rsquo;s missing something or you want to compose further pieces, you can simply build up your own functions on top of it.</p>\n\n<h3></h3>\n\n<h2>A head exploder</h2>\n\n<p>In the last example, I used the SQL type provider <em>inside</em> the metaprogram. What if I wanted work out the connection string of the spreadsheet at compile time, like in the earlier example? Fret not, I made it so that you can use the Mixin type provider recursively, <em>inside</em>the Mixin metaprograms!</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"FSharp.Data.SqlProvider.dll\"</span><span class=\"w\"> </span>\n<span class=\"o\">#</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"s\">\"SquirrelGen.fs\"</span><span class=\"w\"> </span>\n<span class=\"o\">#</span><span class=\"n\">r</span><span class=\"s\">@\"MixinProvider.dll \"</span>\n\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">FSharp.Data.Sql</span><span class=\"w\"> </span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">MixinProvider</span><span class=\"w\"> </span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">System.Text</span>\n\n<span class=\"o\">[&lt;</span><span class=\"n\">Literal</span><span class=\"o\">&gt;]</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">cstringMetaProgram</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"\"\"let generate() = </span>\n<span class=\"s\">  if System.Environment.MachineName = \"PEZI\" then </span>\n<span class=\"s\">    \"[&lt;Literal&gt;]let peopleCs = \\\"localConnection\\\"\" </span>\n<span class=\"s\">  else </span>\n<span class=\"s\">    \"[&lt;Literal&gt;]let peopleCs = \\\"otherConnection\\\"\" \"\"\"</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">CString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mixin_gen</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">cstringMetaProgram</span><span class=\"w\"> </span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">ODBC</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nn\">CString</span><span class=\"p\">.</span><span class=\"n\">peopleCs</span><span class=\"o\">&gt;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>&hellip;.</p>\n\n<h2>Stuff to watch out for</h2>\n\n<p>As you might imagine, I had to jump through many flaming hoops to get the Mixin type provider to work, and as such it is not without a few issues and should be treated as an early alpha. In particular, look out for :</p>\n\n<ol>\n <li>If you use the F# power tools extension or another extension that uses FSharp.Compiler.Services, the Mixin provider might be confused with which version to use &ndash; this should not be a problem if your other extensions are using a recent version of the compiler services</li>\n <li>This has not been tested at all in IDEs other that Visual Studio and almost certainly not work in Mono without some tweaks, though they should be simple (let me know if you&rsquo;d like to do this!)</li>\n <li>Type providers are notorious for locking assemblies and the Mixin provider is worse than normal. This is why it is recommended to have a separate project for &ldquo;Full&rdquo; mode. However, even in Lite mode you might run into some locking problems whilst you are messing with the generation. Simply restart visual studio to fix this &ndash; but be aware that as soon as you have code on the screen that uses mixin_gen, the assemblies it generates often be locked by the background compiler / intellisense. Not much I can do about this. You might like to make sure the source files in the editor are closed before you restart, as it is mostly the background compiler that causes the problem.</li>\n <li>The provider will try to report errors from the FSI evaluation and compiler into intellisense. You can look at the .fs file it generated if it got that far, it will be in the same location as the output dll.</li>\n <li>At the moment, the source metaprograms must be in in a location relative to the location of the mixin provider assembly, so mark your fsx metaprgoram files so they are copied to the output directory and you should be good.</li></ol>\n\n<h2></h2>\n\n<h2>To get going</h2>\n\n<p>If you want to try out the Mixin provider, <a href=\"https://github.com/pezipink/MixinProvider\">you can get it at my github here</a>. I have not pushed a package for it yet. There is not really any documentation for it yet either so you will mostly be on your own experimenting with it. The code generation DSL does not have a ton of capabilities and it not very well tested. I&rsquo;d be happy to help with any problems though, and would like to know if you do anything cool with it! Let me on twitter @pezi_pink or you can email me at pezi_pink [at] pinksquirrellabs com</p>\n\n<h2>Final Words</h2>\n\n<p>The Mixin type provider brings a powerful code generation story to F#, and I hope you find it useful. Over the coming months it should see more features implemented and some proper documentation, packages and so forth added. I will also be talking at the <a href=\"https://skillsmatter.com/conferences/6724-f-exchange\">F# exchange in April</a> on the Mixin Type provider if you can make it down :)</p>")) ((? . 21) f post (u . "The amazing Squirrelify type provider") (? . 21) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/02/01/the-amazing-squirrelify-type-provider/index.html" . windows) (u . "/blog\\2014\\02\\01\\the-amazing-squirrelify-type-provider/") (u . "2014-02-01T01:26:00") (? . 4) (? . 28) (c (u . "fsharp") c (u . "squirrels") c (u . "type providers")) (u . "\n<p>Introducing my latest top-o-the-line type provider that everyone wants and needs. The Squirrelify provider! This very useful type provider will create an INFINITE type system and show you random pictures of ASCII art in intellisense.</p>\n\n<p>It turns out that intellisense was not really designed for this and it struggles with various formatting and layout, but the provider tries the best it can. It also doesn't have many images as I couldn't find a webservice for them and had to do it manually.</p>\n\n<p>\"Wow Ross!\" I hear you cry. \"How can we get started with this??\"</p>\n\n<p>It's easy! simply go and build the source from <a href=\"https://github.com/pezipink/SquirrelifyProvider\">here</a>, then reference the library it produces in a script file as shown in the picture below. Once you have done that, you will need to alias a type and call create() on it. The resulting type will have an infinite series of properties named``Squirrelify!``which will display said ASCII art.</p>\n\n<p>Note that this is the LITE version of the type provider. They PRO pay-for version includes a static parameter \"keyword\" which is used to search google images, convert said images to ASCII and display them.</p>\n\n<p>edit - this is not just squirrels. You can expect other delights such as unicorns, snowmen, and various other things you will not be able to identify</p>\n\n<p><img src=\"../../../../../img/old/Squirrelify!.png\" alt=\"\" /></p>") #t (u . "\n<p>Introducing my latest top-o-the-line type provider that everyone wants and needs. The Squirrelify provider! This very useful type provider will create an INFINITE type system and show you random pictures of ASCII art in intellisense.</p>\n\n<p>It turns out that intellisense was not really designed for this and it struggles with various formatting and layout, but the provider tries the best it can. It also doesn't have many images as I couldn't find a webservice for them and had to do it manually.</p>\n\n<p>\"Wow Ross!\" I hear you cry. \"How can we get started with this??\"</p>\n\n<p>It's easy! simply go and build the source from <a href=\"https://github.com/pezipink/SquirrelifyProvider\">here</a>, then reference the library it produces in a script file as shown in the picture below. Once you have done that, you will need to alias a type and call create() on it. The resulting type will have an infinite series of properties named``Squirrelify!``which will display said ASCII art.</p>\n\n<p>Note that this is the LITE version of the type provider. They PRO pay-for version includes a static parameter \"keyword\" which is used to search google images, convert said images to ASCII and display them.</p>\n\n<p>edit - this is not just squirrels. You can expect other delights such as unicorns, snowmen, and various other things you will not be able to identify</p>\n\n<p><img src=\"../../../../../img/old/Squirrelify!.png\" alt=\"\" /></p>\n<!-- more-->")) ((? . 22) f post (u . "Choose Your Own Adventure Type Provider") (? . 22) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2013/07/29/choose-your-own-adventure-type-provider/index.html" . windows) (u . "/blog\\2013\\07\\29\\choose-your-own-adventure-type-provider/") (u . "2013-07-29T01:21:00") (? . 14) (? . 23) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>That's right.. the type provider everyone has been waiting for, the choose your own adventure type provider!</p>\n\n<p>This is completely pointless and silly, something I just wrote this afternoon. I had various discussions with <a href=\"http://trelford.com/blog/\">Phil Trelford</a> about this and finally decided to do it.</p>\n\n<p>Unfortunately none of the real CYOA books are out of copyright and there appears to be very little in the way of other free ones that I can find. I did however find this one<a href=\"https://www.smashwords.com/books/view/108782\">rather silly story on smashwords</a> which is free, it's not quite normal CYOA fare and you can't lose, but it serves to illustrate the provider.</p>\n\n<p><img src=\"../../../../../img/old/cyoa1.png\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/cyoa2.png\" alt=\"\" /></p>\n\n<p>The provider reads a data file which contains the contents of each page on a line, the index of the page and any choices the page has on it along with the index that each choice points to. This then creates a type system with properties that you can navigate via intellisense.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\dropbox\\CYOAProvider\\CYOAProvider\\bin\\Debug\\CYOAProvider.dll \"</span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">adventure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">CYOAProvider</span><span class=\"p\">.</span><span class=\"n\">CYOAProvider</span><span class=\"o\">&amp;</span><span class=\"n\">lt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\dropbox\\CYOAProvider\\data.dat\"</span><span class=\"o\">&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">adventure</span><span class=\"bp\">()</span>\n\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">Intro</span><span class=\"w\">  </span><span class=\"c1\">// start your adventure here!</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can find this ridiculous type provider on GitHub <a href=\"https://github.com/pezipink/CYOA\">here</a>.</p>\n\n<p>To create the data file I wrote an amazing C# GUI, if you want to create a file yourself and would like the program to work with then mail me :)</p>") #t (u . "\n<p>That's right.. the type provider everyone has been waiting for, the choose your own adventure type provider!</p>\n\n<p>This is completely pointless and silly, something I just wrote this afternoon. I had various discussions with <a href=\"http://trelford.com/blog/\">Phil Trelford</a> about this and finally decided to do it.</p>\n\n<p>Unfortunately none of the real CYOA books are out of copyright and there appears to be very little in the way of other free ones that I can find. I did however find this one<a href=\"https://www.smashwords.com/books/view/108782\">rather silly story on smashwords</a> which is free, it's not quite normal CYOA fare and you can't lose, but it serves to illustrate the provider.</p>\n\n<p><img src=\"../../../../../img/old/cyoa1.png\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/cyoa2.png\" alt=\"\" /></p>\n\n<p>The provider reads a data file which contains the contents of each page on a line, the index of the page and any choices the page has on it along with the index that each choice points to. This then creates a type system with properties that you can navigate via intellisense.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\dropbox\\CYOAProvider\\CYOAProvider\\bin\\Debug\\CYOAProvider.dll \"</span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">adventure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">CYOAProvider</span><span class=\"p\">.</span><span class=\"n\">CYOAProvider</span><span class=\"o\">&amp;</span><span class=\"n\">lt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\dropbox\\CYOAProvider\\data.dat\"</span><span class=\"o\">&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">adventure</span><span class=\"bp\">()</span>\n\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">Intro</span><span class=\"w\">  </span><span class=\"c1\">// start your adventure here!</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can find this ridiculous type provider on GitHub <a href=\"https://github.com/pezipink/CYOA\">here</a>.</p>\n\n<p>To create the data file I wrote an amazing C# GUI, if you want to create a file yourself and would like the program to work with then mail me :)</p>\n<!-- more-->")) ((? . 24) f post (u . "Secret Santa challenge in D") (? . 24) 1538362894 (p+ #"C:\\repos\\pezipink.github.io\\blog/2015/02/08/secret-santa-challenge-in-d/index.html" . windows) (u . "/blog\\2015\\02\\08\\secret-santa-challenge-in-d/") (u . "2015-02-08T00:01:00") (? . 42) (? . 20) (c (u . "D")) (u . "\n<p>I attended the first London meetup group for the D programming language last week with my friend David. Near the end we had a chance to try and solve a cool programming problem called the secret santa challenge.</p>\n\n<p><em>disclaimer &ndash; I am a complete D 'lol newb' so there might be nicer stuff I could do with syntax etc! Also I have not yet fixed my syntax highlighter to include auto, mixin, assert, and others</em></p>") #t (u . "\n<p>I attended the first London meetup group for the D programming language last week with my friend David. Near the end we had a chance to try and solve a cool programming problem called the secret santa challenge.</p>\n\n<p><em>disclaimer &ndash; I am a complete D 'lol newb' so there might be nicer stuff I could do with syntax etc! Also I have not yet fixed my syntax highlighter to include auto, mixin, assert, and others</em></p>\n<!-- more-->\n\n<h2>The Challenge</h2>\n\n<p>The secret santa problem is deceptively simple. You are given a list of names like so.</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nb\">string</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span>\n<span class=\"p\">[</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"Vicky Pollard\"</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"Keith Pollard\"</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"Ian Smith\"</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"Dave Pollard\"</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"Maria Osawa\"</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"Mark Kelly\"</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"John Pollard\"</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"s\">\"Sarah Kelly\"</span><span class=\"w\"> </span>\n<span class=\"p\">];</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Each person must give and receive a present. A person may not give to themselves, nor may they give to anyone else in their family as determined by their last names.</p>\n\n<p>Clearly, this problem can easily be brute forced, but that would not be at all efficient and would not work with large sets of data.</p>\n\n<p>We did not have a lot of time for this, and initially David and I designed an way to try and ensure that when sorted, family members would not appear next to each other. This would allow us to then perform one pass over the array and assign a present to each neighbour with a special wrap-around case at the end. To achieve this we assigned weights to the members, and where there were more than one family member, the weight would increase by some arbitrarily large amount, to split them away from the others.</p>\n\n<p>This algorithm worked for the data in question (which is not the same as above, I have added some to it) but I later realised that our algorithm had 2 fatal flaws.</p>\n\n<ol>\n <li>It relies on having some families with around the same amount of members in each. If you have one big family and several loners, it would dump most of the family members together at the end of the array</li>\n <li>There was no way to guarantee the start and end members would not be from the same family</li></ol>\n\n<p>It should be possible to still use a weighting approach if you calculated some ratios, but I thought there might be a simpler way.</p>\n\n<h2>A revised algorithm</h2>\n\n<p>After thinking about this on the train home from work a few days ago, and trying lots of different stuff in my head, I eventually realised the the real problem here is the biggest family. If x is how big a family is, and you sort the data by x, you can guarantee that by skipping ahead max(x) positions that you will never encounter another of the same family member (unless the problem is unsolvable).</p>\n\n<p>D is a multi-paradigm language and with this algorithm I have used a mainly imperative style, allowing me to make the minimum amount of passes on the data.</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"n\">person</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"nb\">string</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"nb\">string</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"p\">};</span>\n\n<span class=\"nb\">string</span><span class=\"w\"> </span><span class=\"n\">distribute</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"nb\">string</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">%</span><span class=\"mi\">2</span><span class=\"p\">==</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"p\">[</span><span class=\"nb\">string</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">familyCount</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"n\">person</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">people</span><span class=\"p\">;</span>\n\n<span class=\"w\"> </span><span class=\"c1\">// create people and max family count </span>\n<span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">maxFamilyMembers</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">;</span><span class=\"n\">names</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">==</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">person</span><span class=\"p\">(</span><span class=\"n\">split</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">split</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span>\n<span class=\"w\">   </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">familyCount</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">++</span><span class=\"n\">familyCount</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">];</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"p\">}</span>\n<span class=\"w\">   </span><span class=\"k\">else</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">familyCount</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"p\">}</span>\n<span class=\"w\">   </span>\n<span class=\"w\">   </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"n\">maxFamilyMembers</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">maxFamilyMembers</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"p\">}</span>\n<span class=\"w\">   </span>\n<span class=\"w\">   </span><span class=\"n\">people</span><span class=\"w\"> </span><span class=\"p\">~=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span><span class=\"c1\">// sort by family count </span>\n<span class=\"w\"> </span><span class=\"n\">people</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">!((</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"n\">p2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">familyCount</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"n\">familyCount</span><span class=\"p\">[</span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">]);</span>\n\n<span class=\"w\"> </span><span class=\"nb\">string</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"c1\">// assign presents using max count as an offset </span>\n<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">&amp;</span><span class=\"n\">lt</span><span class=\"p\">;</span><span class=\"n\">people</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">++)</span>\n<span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">people</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">people</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">+</span><span class=\"n\">maxFamilyMembers</span><span class=\"p\">)%</span><span class=\"n\">people</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">];</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">~=</span><span class=\"w\"> </span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"s\">\" \"</span><span class=\"p\">,</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">,</span><span class=\"s\">\" -&gt; \"</span><span class=\"p\">,</span><span class=\"n\">dest</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"s\">\" \"</span><span class=\"p\">,</span><span class=\"n\">dest</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">,</span><span class=\"s\">\"\\n\"</span><span class=\"p\">]);</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">distribute</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">readln</span><span class=\"p\">();</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You will see in the first section I mix the splitting of strings and creating people, counting the families and remembering the biggest family in the same pass. The data is then sorted by the family counts, and finally presents are distributed using the maxFamilyCount as an offset and modulus wrap-around logic.</p>\n\n<p>Clearly, it isn&rsquo;t very random in its gift giving &ndash; and your hands are quite tied on this as you must make sure opposing family members cancel each other out before you start using loners to pair with trailing family members. However, you could quite easily random sort each family in place. It is also possible to go in opposite direction within the present-giving part, or even go forwards and backwards together at the same time. Whilst the pairs would be the same, the giver/receiver would be reversed in the other direction.</p>\n\n<h2>Metaprogramming 1</h2>\n\n<p>I am mainly interested in D for its awesome metaprogramming features, and given I know a list of names at compile time I should be able to turn this into a metaprogram and have the compiler work this out instead of it happening at runtime, right? How can I go about that? Brace yourselves, it is quite difficult.</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">distribute</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">readln</span><span class=\"p\">();</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>D has a rather nifty feature called <em>Compile Time Function Evaluation (CTFE)</em> which essentially lets you call any compatible function (with obvious constraints) either at runtime or compile time, and this is determined <em>at the call site</em>! So here I simply change <em>auto</em> to <em>static</em> and the compiler executed the same function during compilation and inlined the result for me. Pretty cool!</p>\n\n<h2>Metaprogramming 2</h2>\n\n<p>D has a very powerful constructed called a <em>mixin</em> which is different from the same-named construct in other languages. During compilation, D will interpret strings passed to a mixin, and assuming they are interpretable (the D compiler hosts a D interpreter!), the compiler will insert their definitions as if you had written them in the source code yourself. You can think T4 code gen on acid and steroids simultaneously. Whilst you might be thinking &ldquo;strings! surely not&rdquo;. Whilst the strings are a bit, will, stringy, they lead themselves to easy and interesting manipulation techniques (as opposed to splicing quoted code expressions or similar) and they are still evaluated at compile time, so you do something wrong, you will know about it up-front.</p>\n\n<p>Let&rsquo; see how we can use a mixin to generate some code. I have decided that I would like a struct created for each person, and each struct will have a method <em>giveTo()</em>that will return a string with some text that shows which person they are giving to this year. To achieve this I will modify the distribute function to create the equivalent code strings instead:</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"nb\">string</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"c1\">// assign presents using max count as an offset </span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">&amp;</span><span class=\"n\">lt</span><span class=\"p\">;</span><span class=\"n\">people</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">++)</span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">people</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">people</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">+</span><span class=\"n\">maxFamilyMembers</span><span class=\"p\">)%</span><span class=\"n\">people</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">];</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">myName</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">]);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">theirName</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">dest</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"s\">\" \"</span><span class=\"p\">,</span><span class=\"n\">dest</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">]);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">code</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">~=</span><span class=\"w\"> </span><span class=\"s\">\"struct \"</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">~</span><span class=\"w\"> </span><span class=\"n\">myName</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">~</span><span class=\"w\"> </span><span class=\"s\">\"{ string giveTo() { return \\\"This year I am giving to \"</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">~</span><span class=\"w\"> </span><span class=\"n\">theirName</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">~</span><span class=\"w\"> </span><span class=\"s\">\"\\\"; } \"</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">~</span><span class=\"w\"> </span><span class=\"s\">\"}\\n\"</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now in the main program I can write</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">mixin</span><span class=\"p\">(</span><span class=\"n\">distribute</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">));</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">vp</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">VickyPollard</span><span class=\"p\">();</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"n\">vp</span><span class=\"p\">.</span><span class=\"n\">giveTo</span><span class=\"p\">());</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">readln</span><span class=\"p\">();</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this way I am using the CTFE to feed the mixin code-generation facility, which in turn verifies and inserts the code as if it had been written where the mixin statement is. This means I can now access the <em>VickyPollard</em> struct and call her <em>giveTo()</em>method. This is not dynamic &ndash; all statically checked at compile time! Combining these CTFE and mixins can be extremely powerful for generating code. D has another feature called <em>mixin templates</em> that let you define commonly used code blocks to insert into other places, which is more like the <em>mixin</em>from some other languages, except this is just a scope of code that can contain almost anything at all. (I think, I am still new to this!)</p>\n\n<h2>One more thing</h2>\n\n<p>D has single inheritance, interfaces and a really a long stream of other nice bits such as <em>Uniform Function Call Syntax (UFCS)</em> which is basically like automatic extension methods. What I would like to show in this post however is a feature called <em>alias this.</em> You can write a bunch of these in your classes / structs, the effect it has is that the compiler can then treat your class as if it was the same type of <em>member.</em>This allows almost multiple inheritance but is also very useful when combined with the metaprogramming features (although perhaps this will not be apparent from this silly example)</p>\n\n<p>Lets say I would like each of my new structs to also be a person. I could use inheritance this for but lets not do that &ndash; instead I will create a static immutable person object inside each one than then <em>alias this</em>it. I have changed the string-code to output the equivalent of the following</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"n\">VickyPollard</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">private</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">immutable</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">person</span><span class=\"p\">(</span><span class=\"s\">\"Vicky\"</span><span class=\"p\">,</span><span class=\"s\">\"Pollard\"</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"nb\">string</span><span class=\"w\"> </span><span class=\"n\">giveTo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"This year I am giving to Mark Kelly\"</span><span class=\"p\">;}</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">alias</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"k\">this</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>and now I can fire up any of my mixin generated types and pass them anywhere that accepts <em>person</em> even though they are not a <em>person</em> at all.</p>\n\n<div class=\"brush: d\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">printPerson</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"s\">\"this is person \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"s\">\" \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">mixin</span><span class=\"p\">(</span><span class=\"n\">distribute</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">));</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">vp</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">VickyPollard</span><span class=\"p\">();</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">printPerson</span><span class=\"p\">(</span><span class=\"n\">vp</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"n\">vp</span><span class=\"p\">.</span><span class=\"n\">giveTo</span><span class=\"p\">());</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">readln</span><span class=\"p\">();</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Pretty cool! This post just explored a couple of the features in D I have played around with so far, but I am working on a roguelike game - the traditional thing I do when learning new languages - so I may write about other interesting language features as I make use of them.</p>")) ((? . 18) f post (u . "\"Fixed\" Memory Pool Design") (? . 18) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2018/01/31/-fixed-memory-pool-design/index.html" . windows) (u . "/blog\\2018\\01\\31\\-fixed-memory-pool-design/") (u . "2018-01-31T13:05:53") (? . 2) (? . 17) (c (u . "drey") c (u . "C")) (u . "\n<p>This post describes a memory allocation strategy I call a &ldquo;fixed&rdquo; size memory pool.</p>\n\n<p>Recently I decided to re-write my virtual machine Drey almost completely in the C programming language, using no external libraries except for the networking via ZeroMQ. This is mostly for fun, to see if I can remember how to program in C again and write a load of low-level stuff (apologies if my C is currently terrible!.)</p>\n\n<p>Drey executes programs written in a much higher level language (typically Scurry), its purpose being to remove all low level details and provide an experience for the author focused on game logic only. As such, the virtual machine implementation must manage the memory itself, not knowing how much of what size memory it will need up front.</p>\n\n<p>Since the system calls malloc/free are relatively slow and will fragment the heap, especially for lots of small object allocations, a memory management system will be required.</p>\n\n<p>(actually, I could probably get away with using malloc since performance doesn&rsquo;t really matter in Drey, but where&rsquo;s the fun in that!)</p>") #t (u . "\n<p>This post describes a memory allocation strategy I call a &ldquo;fixed&rdquo; size memory pool.</p>\n\n<p>Recently I decided to re-write my virtual machine Drey almost completely in the C programming language, using no external libraries except for the networking via ZeroMQ. This is mostly for fun, to see if I can remember how to program in C again and write a load of low-level stuff (apologies if my C is currently terrible!.)</p>\n\n<p>Drey executes programs written in a much higher level language (typically Scurry), its purpose being to remove all low level details and provide an experience for the author focused on game logic only. As such, the virtual machine implementation must manage the memory itself, not knowing how much of what size memory it will need up front.</p>\n\n<p>Since the system calls malloc/free are relatively slow and will fragment the heap, especially for lots of small object allocations, a memory management system will be required.</p>\n\n<p>(actually, I could probably get away with using malloc since performance doesn&rsquo;t really matter in Drey, but where&rsquo;s the fun in that!)</p>\n<!-- more-->\n\n<h2 id=\"requirements\">Requirements</h2>\n\n<p>At the very core of the new memory management system are (currently) two allocators that are the building blocks for other data structures.</p>\n\n<ol>\n <li>fixed/static sized memory pool</li>\n <li>dynamic sized memory pool</li></ol>\n\n<p>In both cases the terminology of static/fixed/dynamic is a little unclear; Usually &ldquo;fixed&rdquo; or &ldquo;static&rdquo; means the size of the pool can never change. A requirement of both pools is that they are able to resize themselves at runtime - since I have no idea what program the VM might be running - but I was at a loss of what else to call them.</p>\n\n<p>The usage of realloc() to resize OS allocated memory means the addresses of the pools might change, thus they will have to be relocatable in some manner.</p>\n\n<p>The dynamic pool is able to allocate, free, extend and reallocate/resize arbitarily sized chunks of memory, whilst the fixed is tied to a size and simply allocates and frees blocks.</p>\n\n<p>This post concentrates on the fixed size pool, which must meet the following requirements</p>\n\n<ol>\n <li>Deals only in fixed sized blocks of memory</li>\n <li>Can be dynamically resized via realloc() without breaking everything</li>\n <li>Must be extremely fast at allocating and freeing blocks (cos why not)</li>\n <li>Must use no additional storage to track free blocks of data (otherwise - how do you manage THAT memory!)</li></ol>\n\n<h2 id=\"overall-design\">Overall Design</h2>\n\n<p>The fixed sized pool is initialized by allocating a chunk of memory via malloc(), the very start of which contains a few bytes of control data (we will see this shortly).</p>\n\n<p>The memory pool uses a relative positioning system that ensures relocatability. Upon initialization, a free list is setup within the unallocated memory, where each free block holds the offset from the base address to the next free block. As an example, here is a pool initialized with a block size of 8 bytes, initially with 4 unallocated blocks in it. This is a 32bit progam, thus the memory addresses are 32 bits (4 bytes) each.</p>\n\n<p>Note that the requirement of the offset to be 4 bytes means the minumim block size for this pool is also 4 bytes.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/fixed-pool/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>You can see here the first block has an offset of 0x8, the second 0x10 and so forth, with the last block having the special value of &ndash;1 to indicate the end of the list. You will notice this is an absolute offset rather than the &ldquo;index&rdquo; into the memory array via the block number. When accessing an element, we need only add the offset to the base address of the data, without having to also multiply it by the element size.</p>\n\n<p>The control data contains information on the block size, element count, the owner of the pool (more on this later) and the offset of the first free block.</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MemoryPool_Fixed</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MemoryPool_Fixed</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">owner</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">free_offset</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">element_size</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">element_count</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">MemoryPool_Fixed</span><span class=\"p\">;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h2 id=\"allocation\">Allocation</h2>\n\n<p>Allocating a block is fairly simple. The control data contains the offset of the first free block. The algorithm jumps to it, replaces the first free block offset with the one it finds at that location, and returns the offset of the block to the caller. (ignoring the case where there&rsquo;s no free block for now.)</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">fixed_pool_alloc</span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">element</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>It doesn&rsquo;t get much faster than that! Here&rsquo;s what it looks like after the first two blocks have been allocated</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/fixed-pool/2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Notice that when the last block is allocated, the first free block will point at 0xFFFFFFFF (&ndash;1), the special value indicating we&rsquo;re out of blocks.</p>\n\n<h2 id=\"freeing\">Freeing</h2>\n\n<p>Freeing a block is equally simple. Since we know the blocks are all the same size, our pool is never subject to any kind of fragmentation, and it does not matter what order the blocks are allocated. There is either a block available, or there isn&rsquo;t. For this reason, no matter where the block to be released is, we can simply replace it as the new first free offset, and insert into its place whatever the first free offset was.</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">fixed_pool_free</span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Again, this is blazingly fast with a minimum of overhead. After freeing the first block of memory, it now looks like</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/fixed-pool/3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"accessing\">Accessing</h2>\n\n<p>Given the memory location and an offset, obtaining a pointer to the actual data should be fairly obvious;</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">fixed_pool_get</span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This level of indirection slows it down a tiny fraction (this function will of course also be inlined), not to mention being a bit cumbersome to actually use directly, but it gurantees you will get the correct block of data, even if the memory pool had to move in its entirety. The only thing you must be sure of is where the base of the pool is. You will need to be careful with the returned pointer, it is possible that whilst holding it, if you allocate something else to this pool that causes it to be relocated, your old pointer is going to be wrong. More on how to manage this in another post.</p>\n\n<h2 id=\"relocation\">Relocation</h2>\n\n<p>When the pool is first initialized, you must pass it a pointer to a pointer that will hold the base address of the pool. If the pool has to be moved for some reason, it simply updates your pointer to its new location, and the rest of your program goes merrily on its way accessing its allocated memory via offsets, not knowing any difference.</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">fixed_pool_init</span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">owner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">element_size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">initial_element_count</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">actualElementSize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">element_size</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">initial_element_count</span><span class=\"p\">);</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">actualSize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">actualElementSize</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">actualSize</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"o\">-&gt;</span><span class=\"n\">element_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_size</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"o\">-&gt;</span><span class=\"n\">element_count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">initial_element_count</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"o\">-&gt;</span><span class=\"n\">owner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">owner</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">//setup free list</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">initial_element_count</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\">          </span>\n<span class=\"w\">    </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">element_size</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">element_size</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">//assign owner to the new address</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">owner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This does impose the restriction that only one pointer can know about the location of the memory pool - this is fine, and as a fundamental low level building block, we would not want to be sharing these pointers around anyway, as all memory allocation will come indirectly from a memory manager and / or higher level data structures.</p>\n\n<p>Let&rsquo;s see how the resizing algorithm works. Essentially, it attempts to double its size via an OS call to realloc(). The nature of realloc() will cause it to extend the existing memory blck if it can, and if it can&rsquo;t it will copy the entire block to a new location, free the old one and return a pointer to the new location. All that&rsquo;s left for us to do then is setup the new memory with the offset free list, and update the owner&rsquo;s pointer to the new location. This all happens in the alloc() call if the offset value is &ndash;1, the special value indicating the end of the list.</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">fixed_pool_alloc</span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">oldCount</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">element_count</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">newCount</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oldCount</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">newElementSize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">newCount</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">element_size</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">newSize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">newElementSize</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"p\">);</span><span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"out of memory, reallocating as size %i</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">newSize</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MemoryPool_Fixed</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">realloc</span><span class=\"p\">((</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">pool</span><span class=\"p\">,</span><span class=\"n\">newSize</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">element_count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">newCount</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">oldCount</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">element_size</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"c1\">//setup linked list in the new block</span>\n<span class=\"w\">      </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oldCount</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">newCount</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\">          </span>\n<span class=\"w\">          </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">element_size</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">element_size</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"p\">;</span>\n<span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"c1\">//rewrite owner&#39;s reference address</span>\n<span class=\"w\">      </span><span class=\"o\">*</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">owner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">        </span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">free_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">element</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>That&rsquo;s it - an extremely fast fixed size memory pool, with hardly any additional memory overhead, that resizes itself automatically and provides re-locatable memory via a relative offset system.</p>\n\n<p>The pool is not completely robust - I am not checking to see if malloc/realloc fail, for example. It is also not at all thread safe, but these are not concerns for the system I am building. I am also not aligning the data in any way - I don&rsquo;t think I will need to, it can be accommodated if required, though.</p>\n\n<p>Note that the decision to setup the free list in advance pays a price upon initialization and resizing. This can be mitigated by remembering the total amount of allocated blocks, and building the list as you go during allocations, which is slightly slower when allocating but effective for very large sized blocks of data. For my use I decided on pre-building the list, but both approaches are interesting to try out.</p>\n\n<p>This scheme is typically 30x+ faster than using malloc (not when resizing, obviously) and not subject to any memory fragmentation at all. I do not, however, include any mechanism with which to shrink or compact a block of mostly unused data.</p>\n\n<p>Next time we will see how the more complex dynamic memory pool is implemented.</p>")) ((? . 25) f post (u . "Asi64") (? . 25) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2017/05/30/asi64/index.html" . windows) (u . "/blog\\2017\\05\\30\\asi64/") (u . "2017-05-30T14:37:10") (? . 50) (? . 11) (c (u . "6502") c (u . "C64") c (u . "racket") c (u . "asi64")) (u . "\n<p>In my last few posts, I detailed some of my experience learning <a href=\"http://6502.org/\">6502</a> assembler for the Commodore 64. I started off using <a href=\"http://dasm-dillon.sourceforge.net/\">DASM</a>, which seems to be quite a nice assembler, severely lacking in documentation. Then I discovered the very awesome <a href=\"http://www.theweb.dk/KickAssembler/Main.html#frontpage\">KickAssembler</a>, which includes a full blown scripting language on top of java, lots of other very nice features, and great documentation. This made me realise what a powerful modern assembler could be like - and perhaps I could go one step further with it.</p>\n\n<p>Asi64 extends <a href=\"http://racket-lang.org/\">Racket</a> to become a 6502 assembler. No need for scripting languages or half baked macro systems here - you have literally all of Racket and its amazing macro system on your side. It also has direct support for <a href=\"http://vice-emu.sourceforge.net/\">Vice</a>, a popular Commodore 64 emulator, passing your labels and breakpoints along enabling a fluid programming and debugging cycle. Hats off to the fantasic KickAssembler, I have stolen many ideas from it :)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/asi0.png\" alt=\"\" />\n <p class=\"caption\"></p></div>") #t (u . "\n<p>In my last few posts, I detailed some of my experience learning <a href=\"http://6502.org/\">6502</a> assembler for the Commodore 64. I started off using <a href=\"http://dasm-dillon.sourceforge.net/\">DASM</a>, which seems to be quite a nice assembler, severely lacking in documentation. Then I discovered the very awesome <a href=\"http://www.theweb.dk/KickAssembler/Main.html#frontpage\">KickAssembler</a>, which includes a full blown scripting language on top of java, lots of other very nice features, and great documentation. This made me realise what a powerful modern assembler could be like - and perhaps I could go one step further with it.</p>\n\n<p>Asi64 extends <a href=\"http://racket-lang.org/\">Racket</a> to become a 6502 assembler. No need for scripting languages or half baked macro systems here - you have literally all of Racket and its amazing macro system on your side. It also has direct support for <a href=\"http://vice-emu.sourceforge.net/\">Vice</a>, a popular Commodore 64 emulator, passing your labels and breakpoints along enabling a fluid programming and debugging cycle. Hats off to the fantasic KickAssembler, I have stolen many ideas from it :)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/asi0.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n<!-- more-->\n\n<p>If you want to have a go, <a href=\"https://github.com/pezipink/Asi64\">you get can asi64 from my github here</a> or the racket package manager - see the github repo for a brief rundown of syntax and getting started. Currently, this is targetted at Windows - the assembler itself should work fine on any OS but it might need a small tweak in how it executes the emulator - PRs would be welcome!</p>\n\n<p>By way of introduction to some bits of the assembler (definetly not even touching on its potential) we will write a relatively simple demo effect, a very basic starfield. (note this is not attempting to teach 6502 or Racket!)</p>\n\n<h2 id=\"starfields\">Starfields!</h2>\n\n<p>To make a simple starfield we will use the C64&rsquo;s character graphics. In this mode, the VIC-II graphics chip will point at an area in memory where a character set of our design is stored. A character is defined as an 8x8 grid of pixels. In memory, this is stored sequentially as 8 bytes, where the bits of each byte represent a pixel, going from the top row of the character downwards.</p>\n\n<p>The VIC chip goes on its merry way rendering graphics. On every 8th scanline (known as a &ldquo;bad line&rdquo;) it will read the next row of video memory in and work out which characters it needs to display. This is fairly simple, the video memory is somewhere of our choosing and represents the 40*25 characters laid out sequentially. Each byte in the memory represents a character index from the character set to render. This means you can have 256 characters in a set, for a 2k total of memory.</p>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>First, let&rsquo;s get the boring stuff out of the way, which is telling the VIC chip where to look for the video and character memory. In this example, we will use $0c00 for the video memory, $2000 for the character memory, and stick our program at $1000.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">asi64</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">vic-control</span><span class=\"w\"> </span><span class=\"n\">$d018</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">C64</span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">*=</span><span class=\"w\"> </span><span class=\"n\">$1000</span>\n<span class=\"w\">\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@%00111000</span>\n<span class=\"w\">\t</span><span class=\"c1\">; screen at $0c00, characters at $2000</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">vic-control</span><span class=\"w\"> </span>\n<span class=\"w\">\t</span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">here</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">;infinite loop</span>\n<span class=\"p\">})</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>$d018 is the vic register which controls where it looks for things. Here we load the value 00111000 into it which <a href=\"http://codebase64.org/doku.php?id=base:vicii_memory_organizing\">sets things up how we want</a>. The combination of lda, sta is so common that we can get asi64 to provide us a little abstraction over it by using the <code>define-op</code> macro.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">asi64</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">vic-control</span><span class=\"w\"> </span><span class=\"n\">$d018</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">black</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">background</span><span class=\"w\"> </span><span class=\"n\">$d021</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define-op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">){</span>\n<span class=\"w\">\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">src</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">dst</span>\n<span class=\"p\">})</span>\n\n<span class=\"p\">(</span><span class=\"n\">C64</span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">*=</span><span class=\"w\"> </span><span class=\"n\">$1000</span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">@%00111000</span><span class=\"w\"> </span><span class=\"n\">vic-control</span><span class=\"p\">)</span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">@black</span><span class=\"w\"> </span><span class=\"n\">background</span><span class=\"p\">)</span>\n<span class=\"w\">\t</span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">here</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">;infinite loop</span>\n<span class=\"p\">})</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>From now on I will mostly omit code that&rsquo;s already been shown since assembly quickly gets large.</p>\n\n<h2 id=\"character-design\">Character Design</h2>\n\n<p>What we will do is have 5 characters in a row and rotate pixels through them on each screen refresh. Therefore, character 0 we will start off with a single pixel in the centre of it. The next 4 characters will simply be blank, waiting to recieve the pixel. Then, the video memory will be tiled with chracters 0 &ndash; 5 to give the illusion of a (terrible) star field.</p>\n\n<p>So let&rsquo;s go ahead and build our characters. We know the memory starts at $2000, therefore that address represents the top row of pixels for the first character.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$2000</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$2001</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$2002</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$2003</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$2005</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$2006</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$2007</span>\n\n<span class=\"w\">\t</span><span class=\"c1\">; a single pixel in the centre!</span>\n<span class=\"w\">\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@%00001000</span>\n<span class=\"w\">\t</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">$20004</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Well, this is boring. And we still need to do the next 4 characters. As ever in assembly you have to choose between writing loops or unrolling them - space vs speed - in this case we will stick to unrolled code. I think racket can help us out here though.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\"> \t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">\t</span><span class=\"c1\">;splat the first 5 characters </span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">))])</span>\n<span class=\"w\">\t  </span><span class=\"p\">{</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$2000</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)})</span>\n<span class=\"w\">\t</span><span class=\"c1\">; load our humble pixel</span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">@%00001000</span><span class=\"w\"> </span><span class=\"n\">$2004</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Much better. Ok, so we might have written over $2004 in the loop needlessly, but whatever, that could easily be rectified. Next up is to tile the screen with the 0&ndash;4 sequence. We could unroll some code to do this, or write a loop, but there is another option. We can simply write to the video memory directly as part of the assembly process.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t</span><span class=\"n\">*=</span><span class=\"w\"> </span><span class=\"n\">$0c00</span><span class=\"w\"> </span><span class=\"c1\">;asssemble at video memory location</span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">)])</span>\n<span class=\"w\">\t\t</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Don&rsquo;t know about you but I am already bored of keep writing this for .. in-range stuff. Let&rsquo;s knock up a quick macro to do it for us.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fori</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span><span class=\"w\"> </span><span class=\"n\">stx</span>\n<span class=\"w\">    </span><span class=\"p\">([</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">]</span>\n<span class=\"w\">     </span><span class=\"c1\">; breaking hygeine here, very sorry</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._with-syntax))\" style=\"color: inherit\">with-syntax</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">f2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-~3edatum))\" style=\"color: inherit\">syntax-&gt;datum</a></span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"n\">f</span><span class=\"p\">)])</span>\n<span class=\"w\">      </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)])</span>\n<span class=\"w\">                 </span><span class=\"n\">f2</span><span class=\"p\">)))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Yes, this is a terrible macro! It breaks hygeine and won&rsquo;t even work in some cases. I am just putting it here to show that you can!</p>\n\n<p>Now we can write</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">\t</span><span class=\"c1\">;splat the first 5 characters </span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"n\">fori</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$2000</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)})</span>\n<span class=\"w\">\t</span><span class=\"c1\">; load our humble pixel</span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">@%00001000</span><span class=\"w\"> </span><span class=\"n\">$2004</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>and</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t</span><span class=\"n\">*=</span><span class=\"w\"> </span><span class=\"n\">$0c00</span><span class=\"w\"> </span><span class=\"c1\">;asssemble at video memory location</span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"n\">fori</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Rawr!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/asi1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"move-it\">Move it!</h2>\n\n<p>I&rsquo;ll admit this looks like a pretty terrible star field. Even when moving it will look bad, but one problem at a time. Let&rsquo;s get it moving! The basic operation will be to rotate $2004 to the right. This will move the bit along one place, and if it falls off the end of the byte it will end up in the processor&rsquo;s carry bit. From there, if we rotate right the same row-byte of the next character ($200c) the bit will move from the carry into the most signficant bit of the next character&rsquo;s byte. we can repeat this process, with a special case for the last character since it needs to wrap around back to the first one if the carry is set.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">:update_starfield</span>\n<span class=\"w\">\t</span><span class=\"n\">clc</span><span class=\"w\"> </span><span class=\"c1\">; clear carry bit</span>\n<span class=\"w\">\t</span><span class=\"c1\">; ror our little guy through memory</span>\n<span class=\"w\">\t</span><span class=\"p\">(</span><span class=\"n\">fori</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">ror</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">$2004</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))})</span>\n<span class=\"w\">\t</span><span class=\"n\">bcc</span><span class=\"w\"> </span><span class=\"n\">end+</span><span class=\"w\">\t</span>\n<span class=\"w\">\t</span><span class=\"n\">ror</span><span class=\"w\"> </span><span class=\"n\">$2004</span>\n<span class=\"n\">:end</span><span class=\"w\">    </span>\n<span class=\"w\">\t</span><span class=\"n\">rts</span><span class=\"w\">\t</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>We will call this subroutine once each video frame. To achieve this we will burn cycles until the raster hits the bottom of the screen-ish (since we don&rsquo;t want to update whilst the VIC is rendering!), call this procedure, and then wait again. Usually you&rsquo;d do this with raster interrupts since obviously sitting waiting for the screen means you can&rsquo;t do anything else, but it will suffice for this example.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"n\">:loop</span><span class=\"w\"> \t\t</span><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">$d012</span><span class=\"w\"> </span><span class=\"c1\">; wait for line 256</span>\n<span class=\"w\">\t\t</span><span class=\"n\">bne</span><span class=\"w\"> </span><span class=\"n\">loop-</span>\n<span class=\"w\">\t\t</span><span class=\"n\">jsr</span><span class=\"w\"> </span><span class=\"n\">update_starfield+</span>\n<span class=\"w\">\t\t</span><span class=\"c1\">; do nothing for a while so </span>\n<span class=\"w\">\t\t</span><span class=\"c1\">; this doesn&#39;t trigger more than</span>\n<span class=\"w\">\t\t</span><span class=\"c1\">; once on the same frame!</span>\n<span class=\"w\">\t\t</span><span class=\"p\">(</span><span class=\"n\">fori</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">nop</span><span class=\"p\">})</span>\n<span class=\"w\">\t\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"w\">\t\t</span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">loop-</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/asi2.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"making-it-not-terrible\">Making it not terrible</h2>\n\n<p>As amazing as the single pixel going across the screen in a lockstep obviously repeated pattern is, we can probably do better. The obvious problems are:</p>\n\n<ul>\n <li>There is only one lonely pixel</li>\n <li>The pixels should travel at different speeds to produce a parallax effect</li>\n <li>The tiling should be broken up into different perumations on each row</li></ul>\n\n<p>If we had more pixels, it would mean more RORing of the relevant bytes. To make them move faster, we&rsquo;d have to repeat the whole ROR cycle more than once. Clearly, this quickly escalates into tons of boring and hard to change code. Instead, we will get racket to help us out by writing a function that can generate a starfield update to our specifications. We will pass it a memory location of the character set, the amount of characters to rotate through, a list of tuples that indicate which rows of the character need rotating and at what speed.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generate-starfield-updates-1</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">;location - charset location where the first starfield char is</span>\n<span class=\"w\">  </span><span class=\"c1\">;len      - how many chars to ROL through</span>\n<span class=\"w\">  </span><span class=\"c1\">;rows     - which rows of the character contain stars (no point ROLing them otherwise)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-location</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-rows</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">)])</span>\n<span class=\"w\">    </span><span class=\"c1\">;extract the row number and speed</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))\" style=\"color: inherit\">car</a></span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"n\">speed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cadr))\" style=\"color: inherit\">cadr</a></span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)])</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">speed</span><span class=\"p\">)])</span>\n<span class=\"w\">      \t</span><span class=\"c1\">;repeat the ror cycle for speed times</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"n\">clc</span><span class=\"w\"> </span><span class=\"c1\">; clear the carry bit!</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-len</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">))])</span>\n<span class=\"w\">           </span><span class=\"c1\">;now we just ror each character in turn</span>\n<span class=\"w\">           </span><span class=\"p\">{</span><span class=\"n\">ror</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)})</span>\n<span class=\"w\">         </span><span class=\"c1\">; special wrap-around case</span>\n<span class=\"w\">         </span><span class=\"n\">bcc</span><span class=\"w\"> </span><span class=\"n\">end+</span>\n<span class=\"w\">         </span><span class=\"n\">ror</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"n\">:end</span><span class=\"w\"> </span><span class=\"n\">rts</span><span class=\"w\"> </span><span class=\"p\">}))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is pretty cool. It basically writes the same code as we did manually last time except now it can do it for multiple rows at different speeds. This makes it really easy to tinker with the values to produce a nice looking starfield.</p>\n\n<p>What if we wanted to scroll the stars left instead of right? The basic principle is the same, we still need to rotate the pixels through memory, except we must rotate left, the wrap around goes from the first to the last character, and the characters must be processed in reverse. Since racket is allowing us to conditionally generate assembly code, we can interleave this as an option into our generator</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">generate-starfield-updates</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"w\"> </span><span class=\"n\">going-right?</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-location</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-rows</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">)])</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))\" style=\"color: inherit\">car</a></span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"n\">speed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cadr))\" style=\"color: inherit\">cadr</a></span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)])</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">speed</span><span class=\"p\">)])</span><span class=\"w\">        </span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"n\">clc</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"n\">going-right?</span>\n<span class=\"w\">                         </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-len</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">))</span>\n<span class=\"w\">                         </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-len</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">))])</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"n\">going-right?</span>\n<span class=\"w\">               </span><span class=\"p\">{</span><span class=\"n\">ror</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)}</span>\n<span class=\"w\">               </span><span class=\"p\">{</span><span class=\"n\">rol</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)}))</span>\n\n<span class=\"w\">         </span><span class=\"c1\">;finally wrap around if the carry is et</span>\n<span class=\"w\">         </span><span class=\"n\">bcc</span><span class=\"w\"> </span><span class=\"n\">end+</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"n\">going-right?</span>\n<span class=\"w\">             </span><span class=\"p\">{</span><span class=\"n\">ror</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)}</span>\n<span class=\"w\">             </span><span class=\"p\">{</span><span class=\"n\">rol</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">char-index</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank-len</span><span class=\"w\"> </span><span class=\"n\">starbank</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"p\">)})</span>\n<span class=\"w\">         </span><span class=\"n\">:end</span><span class=\"p\">}))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>It&rsquo;s pretty much the same code, it just produces rols instead of rors and processes the things backwards.</p>\n\n<p>You could extend this to also create the chracter memory for you, and have it return two functions that you can call and label somewhere in the program, one for generating and the other for updating. You can probably see how this could quickly become a build-your-own-tailored-compiler-kit if you wanted it to.</p>\n\n<p>The last part was to re-arrange to video memory so each row has a different permuatation of the 0 1 2 3 4 sequence. There&rsquo;s a number of ways we could do this of course. Randomness doens&rsquo;t work very well, so I messed around a bit until I found a good pattern, and hardcoded it at compile-time.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t</span><span class=\"n\">*=</span><span class=\"w\"> </span><span class=\"n\">$0c00</span><span class=\"w\"> </span><span class=\"c1\">;asssemble at video memory location</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">perm1</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"n\">perm2</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"n\">perm3</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"n\">perm4</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"w\">          </span><span class=\"p\">[</span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">                     </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">                     </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">                     </span><span class=\"mi\">1</span><span class=\"p\">)])</span>\n\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"p\">([</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._count))\" style=\"color: inherit\">count</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)])</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span><span class=\"w\"> </span><span class=\"n\">next</span>\n<span class=\"w\">            </span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">perm1</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">perm2</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">perm3</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">perm4</span><span class=\"p\">)]))))</span><span class=\"w\">                   </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Omitting the code to stick some more pixels in our character set,our new update code becomes</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t\t</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">sb1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">starbank</span><span class=\"w\"> </span><span class=\"n\">$2000</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))))</span>\n<span class=\"w\">\t\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"n\">:loop</span><span class=\"w\"> \t\t</span><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">$d012</span><span class=\"w\"> </span><span class=\"c1\">; wait for line 256</span>\n<span class=\"w\">\t\t</span><span class=\"n\">bne</span><span class=\"w\"> </span><span class=\"n\">loop-</span>\n<span class=\"w\">\t\t</span><span class=\"n\">jsr</span><span class=\"w\"> </span><span class=\"n\">update-starfield</span>\n<span class=\"w\">\t\t</span><span class=\"c1\">; do nothing for a while so </span>\n<span class=\"w\">\t\t</span><span class=\"c1\">; this doesn&#39;t trigger more than</span>\n<span class=\"w\">\t\t</span><span class=\"c1\">; once on the same frame!</span>\n<span class=\"w\">\t\t</span><span class=\"p\">(</span><span class=\"n\">fori</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">nop</span><span class=\"p\">})</span>\n<span class=\"w\">\t\t</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"w\">\t\t</span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">loop-</span>\n<span class=\"n\">:update-starfield</span>\n<span class=\"w\">\t\t</span><span class=\"p\">(</span><span class=\"n\">generate-starfield-updates</span><span class=\"w\"> </span><span class=\"n\">sb1</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"p\">)</span>\n<span class=\"w\">\t\t</span><span class=\"n\">rts</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The final result, I think you will agree is much better looking, even if it is still a bit rubbish! (actually, the gif is kinda terrible, it looks a lot better on the emulator and much better still on the real thing!)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/asi3.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Asi64 brings racket and 6502 together in a (hopefully!) glorious fusion. It is by no means finished, and will likely be rewritten again at least one more time. This is basically my first proper Racket project so I still have much to learn, but it is a lot more fun to program the Commodore 64 now ! (You could also use this to program the NES!). Comments are welcome.</p>\n\n<p>Here is a picture of the lovely starfield running on the real hardware :)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/asi4.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The full code for this example can be found at the github repo <a href=\"https://github.com/pezipink/asi64/blob/master/samples/starfield.rkt\">here</a></p>")) ((? . 26) f post (u . "Microsoft Dynamics CRM Type Provider preview") (? . 26) 1488256954 (p+ #"C:\\repos\\pezipink.github.io\\blog/2012/12/30/microsoft-dynamics-crm-type-provider-preview/index.html" . windows) (u . "/blog\\2012\\12\\30\\microsoft-dynamics-crm-type-provider-preview/") (u . "2012-12-30T03:50:00") (? . 34) (? . 27) (c (u . "fsharp") c (u . "type providers") c (u . "xrm")) (u . "\n<p>Are you tired of generating strongly typed classes with millions of lines of C# using crmsvcutil.exe that often crashes? Fed up with having to re-generate the classes every time something in the schema changes? Feeling restricted by the LINQ provider's limitations? Ever wonder why you should need to know what attribute joins to what in your relationships to perform your joins? F# to the rescue!</p>\n\n<p>I am working on a F# type provider than aims to solve a lot of these pains, and more besides! This is just a sneak preview with what is to come, I have not released any of this yet. First, here is an example of a rather silly but fairly complex query using the new type provider and the F# query syntax :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">XRM</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">XRM</span><span class=\"p\">.</span><span class=\"nn\">TypeProvider</span><span class=\"p\">.</span><span class=\"n\">XrmDataProvider</span><span class=\"o\">&lt;</span><span class=\"s\">\"http://something/Organization.svc\"</span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">dc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">XRM</span><span class=\"p\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">TestRecord</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"o\">;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"John%\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">q</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">dc</span><span class=\"o\">.</span><span class=\"n\">new_squirrel</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\">                            </span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">new_name</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;%</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">new_age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">``N:1 &lt;- new_new_forest_new_squirrel``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">``N:1 &lt;- owner_new_forest``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">new_colour</span><span class=\"w\"> </span><span class=\"o\">|=|</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"s\">\"Pink\"</span><span class=\"o\">;</span><span class=\"s\">\"Red\"</span><span class=\"o\">|])</span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">new_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Sherwood\"</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"PEZI THE OWNER!\"</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">new_name</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>") #t (u . "\n<p>Are you tired of generating strongly typed classes with millions of lines of C# using crmsvcutil.exe that often crashes? Fed up with having to re-generate the classes every time something in the schema changes? Feeling restricted by the LINQ provider's limitations? Ever wonder why you should need to know what attribute joins to what in your relationships to perform your joins? F# to the rescue!</p>\n\n<p>I am working on a F# type provider than aims to solve a lot of these pains, and more besides! This is just a sneak preview with what is to come, I have not released any of this yet. First, here is an example of a rather silly but fairly complex query using the new type provider and the F# query syntax :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">XRM</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">XRM</span><span class=\"p\">.</span><span class=\"nn\">TypeProvider</span><span class=\"p\">.</span><span class=\"n\">XrmDataProvider</span><span class=\"o\">&lt;</span><span class=\"s\">\"http://something/Organization.svc\"</span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">dc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">XRM</span><span class=\"p\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">TestRecord</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"o\">;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"John%\"</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">q</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">dc</span><span class=\"o\">.</span><span class=\"n\">new_squirrel</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\">                            </span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">new_name</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;%</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">new_age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">``N:1 &lt;- new_new_forest_new_squirrel``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">``N:1 &lt;- owner_new_forest``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">new_colour</span><span class=\"w\"> </span><span class=\"o\">|=|</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"s\">\"Pink\"</span><span class=\"o\">;</span><span class=\"s\">\"Red\"</span><span class=\"o\">|])</span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">new_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Sherwood\"</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"PEZI THE OWNER!\"</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">new_name</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n<!-- more-->\n\n<p>This example illustrates several cool features of the F# type provider ;</p>\n\n<ul>\n <li>No code generation here - these \"virtual\" types are magically created on the fly by the compiler, using the organization service's metadata capabilities. This provides full intellisense and only lazily loads the entity attributes and relationships on demand. If your schema changes and breaks something, the code will not compile.</li></ul>\n\n<div></div>\n\n<ul>\n <li>Where clauses can appear anywhere and be as complex as you want. the only restriction is that only one entity type is used in each clause - this is because mixing OR logic between entities is impossible to translate into the underlying QueryExpression tree.</li></ul>\n\n<div></div>\n\n<ul>\n <li>Relationships can be accessed via the SelectMany (for) syntax. In this example Squirrel is the ultimate child and the code is traversing up the relationships through its parents (forest, and then owner). Instead of needing to know or care about how these relationships are joined, this is handled for you in the magic. Additionally, should you care, the intellisense will show you exactly what attribute is being joined to what. It is also possible to start at a parent and traverse down the one-to-many relationships, as long as you don't branch off anywhere to more than one child as this is not supported in the underlying provider.</li></ul>\n\n<div></div>\n\n<p>Custom operators! F# lets you define your own operators. Currently I am supporting =% (like) &lt;&gt;% (not like) |=| (in) and |&lt;&gt;| (not in) however it will be very easy to add more of these, or extensions to the relevant types to implement the wealth of other, sometimes rather exotic, XRM condition operators, of which almost all are not currently accessible from the existing LINQ provider, including in and not in.</p>\n\n<div></div>\n\n<ul>\n <li>Projection expression - not only can you access attributes and perform any transformation, you may have noticed it allows you to select entire parent entities - you cannot do this in the current LINQ provider because the QueryExpression is only capable of returning an single entity type which has to be the ultimate child that you are selecting. Any attributes from parents are kind of shoehorned into the result entity with aliases - more magic in the type provider enables you to select all the entities out as real CRM entities :)</li></ul>\n\n<div>Joins are also still supported should you wish to use them explicitly for some reason. At runtime, these \"virtual\" entities get \"erased down\" to a XrmEntity which is a thin wrapper inheriting from Entity - this means the resulting objects you can use everywhere like you normally would in your CRM code.</div>\n\n<div></div>\n\n<div>Lots of stuff to come - paging, many LINQ execution methods, ordering, possibly even an auto conversion to fetchxml which will enable aggregate operations...</div>")) ((? . 28) f post (u . "The MineSweeper Type Provider") (? . 28) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/02/02/the-minesweeper-type-provider/index.html" . windows) (u . "/blog\\2014\\02\\02\\the-minesweeper-type-provider/") (u . "2014-02-02T05:06:00") (? . 21) (? . 29) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>Being able to play Mine Sweeper inside your IDE via intellisense, that is what you have always wanted right? Well, I&rsquo;m always willing to lend a hand! With this fantastic new type provider you can pretend you are working when really you are avoiding mines. To get started simply clone and build the provider from <a href=\"https://github.com/pezipink/MinesweeperProvider\">here</a>. Reference your new shiny type provider library from a script file and create a type alias and then an instance of it like so:</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_1.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_1.png\" alt=\"image\" width=\"663\" height=\"94\" border=\"0\" /></a></p>") #t (u . "\n<p>Being able to play Mine Sweeper inside your IDE via intellisense, that is what you have always wanted right? Well, I&rsquo;m always willing to lend a hand! With this fantastic new type provider you can pretend you are working when really you are avoiding mines. To get started simply clone and build the provider from <a href=\"https://github.com/pezipink/MinesweeperProvider\">here</a>. Reference your new shiny type provider library from a script file and create a type alias and then an instance of it like so:</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_1.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_1.png\" alt=\"image\" width=\"663\" height=\"94\" border=\"0\" /></a></p>\n<!-- more-->\n\n<p>The three parameters you can pass determine the grid width, height and amount of mines.</p>\n\n<p>Navigate to the &ldquo;Start&rdquo; property of your instance to begin the game. Intellisense will show a representation of the grid state on the top property marked &ldquo;# Mine Field&rdquo; and an additional property for each available move in the format of X:Y</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_2.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_2.png\" alt=\"image\" width=\"797\" height=\"237\" border=\"0\" /></a></p>\n\n<p>To play the game simply navigate to the property that represents the tile you would like to reveal.</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_3.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_3.png\" alt=\"image\" width=\"935\" height=\"300\" border=\"0\" /></a></p>\n\n<p>Unfortunately once again it seems that Microsoft simply didn&rsquo;t have this kind of thing in mind when they were designing intellisense, and it isn&rsquo;t very happy about making the text line up nicely. I have tried my best for it to not get too difficult.</p>\n\n<p>Disclaimer: Development managers, I am not responsible for any loss of productivity from your staff that this type provider may cause.</p>\n\n<p>EDIT: Props to <a href=\"https://twitter.com/ptrelford\">Phil Trelford</a> for the original minesweeper code from <a href=\"http://fssnip.net/cc\">fssnip</a>, which is largely intact here with a few modifications.</p>")) ((? . 30) f post (u . "Star Wars : Rogue One, Type Provider edition") (? . 30) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2017/01/19/star-wars-rogue-one-type-provider-edition/index.html" . windows) (u . "/blog\\2017\\01\\19\\star-wars-rogue-one-type-provider-edition/") (u . "2017-01-19T07:18:03") (? . 31) (? . 49) (c (u . "fsharp") c (u . "type providers")) (u . "\n<h2>A LONG TIME AGO, IN A GALAXY FAR AWAY…..</h2>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/r11.png\"><img title=\"r11\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 8px 0px 12px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"r11\" src=\"../../../../../img/old/r11_thumb.png\" width=\"640\" height=\"341\" /></a></p>") #t (u . "\n<h2>A LONG TIME AGO, IN A GALAXY FAR AWAY…..</h2>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/r11.png\"><img title=\"r11\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 8px 0px 12px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"r11\" src=\"../../../../../img/old/r11_thumb.png\" width=\"640\" height=\"341\" /></a></p>\n<!-- more-->\n\n<p>Having infiltrated the Empire’s data centre, you are not overly surprised to discover they are using some ancient system from the old republic days.&#160; A brief look around reveals a monstrous legacy Empire Enterprise system.&#160; It has a ORM you thought had died out millennia ago.&#160; You can immediately see no less than 13 layers of inheritance, 6 levels of dependency injection, and some complete bastard has spread the evil EmpireAutoLogger all over the place</p>\n\n<p> \n <p>Thankfully, being a Jedi fighting for the Rebellion, you have access to both the force and the latest database access technology, F# type providers.&#160; Using this power, you are able to access the remote database controls, where a large crane/arm can be manoeuvred in order to pickup the legacy hard drive containing the Death Star plans.</p> \n <p>There is one problem.&#160; The lag here is terrible, the Empire are onto you, and the location of the disk in questionable.&#160; In fact, it seems the longer you take to get the crane into position (IN REAL TIME!), the more likely the disk is to change position completely.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/r12.png\"><img title=\"r12\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 8px 0px 12px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"r12\" src=\"../../../../../img/old/r12_thumb.png\" width=\"462\" height=\"480\" /></a></p> \n <p>Can you grab the disk before it is too late?</p> \n <h3>TO HELP THE REBELLION!</h3> \n <p>(NOTE. You MUST change your tooltip font to a monospace font. I suggest Lucida Console in at least 16pt.)</p> \n <p><a href=\"https://github.com/pezipink/InteractiveProvider\">Grab the InteractiveProvider from my github here</a>, build it, then create a script file and reference the type provider. Since the InteractiveProvider dynamically loads assemblies that contain types implementing the interfaces it is looking for, you will have to tell it as a static parameter the directory that the rogue one dll resides in.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/r3.png\"><img title=\"r3\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"r3\" src=\"../../../../../img/old/r3_thumb.png\" width=\"1024\" height=\"169\" /></a></p> \n <p>May the force be with you, always.</p></p>")) ((? . 32) f post (u . "Fairylog") (? . 32) 1556090942 (p+ #"C:\\repos\\pezipink.github.io\\blog/2019/04/17/fairylog/index.html" . windows) (u . "/blog\\2019\\04\\17\\fairylog/") (u . "2019-04-17T15:02:55") (? . 46) (? . 13) (c (u . "fpga") c (u . "racket") c (u . "digital logic") c (u . "fairylog")) (u . "\n<p>Over the last few months I have been working on yet another new language, this time for programming FPGAs. This post will provide a short introduction to Fairylog by way of building some custom hardware to read a pair of Nintendo pads.</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">Realtime 24bit colour rotozoomer controlled by a NES pad. CPU, video hardware and assembler built in my various <a href=\"https://twitter.com/racketlang?ref_src=twsrc%5Etfw\">@racketlang</a> langs. Display from <a href=\"https://twitter.com/adafruit?ref_src=twsrc%5Etfw\">@adafruit</a>. Debugger and supporting tools <a href=\"https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#csharp</a> &amp; <a href=\"https://twitter.com/hashtag/fsharp?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#fsharp</a>. Complete with dramatic music! 😃 <a href=\"https://twitter.com/hashtag/fpga?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#fpga</a> <a href=\"https://t.co/8gVNfg4uLD\">pic.twitter.com/8gVNfg4uLD</a></p>&mdash; Ross McKinlay (@pezi_pink) <a href=\"https://twitter.com/pezi_pink/status/1103716209537794048?ref_src=twsrc%5Etfw\">March 7, 2019</a></blockquote>\n\n<script async=\"async\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>") #t (u . "\n<p>Over the last few months I have been working on yet another new language, this time for programming FPGAs. This post will provide a short introduction to Fairylog by way of building some custom hardware to read a pair of Nintendo pads.</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">Realtime 24bit colour rotozoomer controlled by a NES pad. CPU, video hardware and assembler built in my various <a href=\"https://twitter.com/racketlang?ref_src=twsrc%5Etfw\">@racketlang</a> langs. Display from <a href=\"https://twitter.com/adafruit?ref_src=twsrc%5Etfw\">@adafruit</a>. Debugger and supporting tools <a href=\"https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#csharp</a> &amp; <a href=\"https://twitter.com/hashtag/fsharp?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#fsharp</a>. Complete with dramatic music! 😃 <a href=\"https://twitter.com/hashtag/fpga?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#fpga</a> <a href=\"https://t.co/8gVNfg4uLD\">pic.twitter.com/8gVNfg4uLD</a></p>&mdash; Ross McKinlay (@pezi_pink) <a href=\"https://twitter.com/pezi_pink/status/1103716209537794048?ref_src=twsrc%5Etfw\">March 7, 2019</a></blockquote>\n\n<script async=\"async\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<!-- more-->\n\n<h3 id=\"fpga\">FPGA</h3>\n\n<p>After my last foray back into some electronics (see the previous post) I decided I&rsquo;d like to focus more on hardware again. This time around, I thought it was high time I examined and learned about FPGAs properly - not sure why I didn&rsquo;t do this years ago, but here we are.</p>\n\n<p>If you don&rsquo;t know what an FPGA is, it is essentially a huge grid of programmable logic cells that you can arrange in any way you like. This enables you to create a custom piece of hardware that is capable of becoming any digital system you can imagine. A good introduction can be found at <a href=\"https://www.youtube.com/watch?v=gUsHwi4M4xE\">this EEVBlog video</a></p>\n\n<p>In order to program one of these devices, you typically write code in a hardware description language like <a href=\"https://en.wikipedia.org/wiki/Verilog\">Verilog</a> or <a href=\"https://en.wikipedia.org/wiki/VHDL\">VHDL</a>. Now, I have never wrote any HDL code before, but after examining Verilog for a few hours I knew we were not going to be friends.</p>\n\n<p>Instead, I decided I would learn Verilog by writing my own source-to-source compiler and language for it. Probably not the best way to go about it, but it kept me out of trouble for a couple of weeks.</p>\n\n<h3 id=\"fairylog\">Fairylog</h3>\n\n<p>And so <a href=\"https://github.com/pezipink/fairylog\">Fairylog</a> was born. Fairylog is a <a href=\"https://racket-lang.org/\">Racket</a> language (of course) which aims to be quite like Verilog, with less redundant syntax, Racket macros, and several additional compile-time features that Verilog seems to be lacking.</p>\n\n<p>Fairylog <em>extends</em> Racket rather than replaces it, which means you can use all of Racket wherever you like in Fairylog code to help you generate stuff.</p>\n\n<p>Verilog is a fairly large language, which has two not-very-distinct sides to it. Ultimately, Verilog is compiled into something that is either run through a <em>simulator</em>, or <em>sythesised</em> and programmed onto real hardware. The language itself has some blurred lines around what is synthesisable and what is not, which is not at all obvious and differs between toolchains and chips.</p>\n\n<p>Fairylog is aimed at <em>synthesisable</em> Verilog code. I have not yet tried a simulator and don&rsquo;t plan on doing so for now, since I am much more interested in getting the stuff running straight on the hardware. For that reason, you won&rsquo;t find many of the simulation-only language constructs from Verilog in Fairylog. Since I didn&rsquo;t (and still don&rsquo;t) really understand which bits are relevant and which aren&rsquo;t, the language already has some redundant stuff in it and is still missing some areas of Verilog which I have not got around to playing with yet.</p>\n\n<p>It is fully capable, however, if still somewhat of a rough personal experiment for mostly my own use. I did manage to design and build a debuggable 32 bit computer with it, along with a 64x64 RGB LED matrix in 24 bit colour and dedicated video hardware - you can see a couple of videos here.</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">64x64 <a href=\"https://twitter.com/adafruit?ref_src=twsrc%5Etfw\">@adafruit</a> RGB LED matrix running on an FPGA programmed with my new language <a href=\"https://twitter.com/hashtag/fairylog?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#fairylog</a> - watch this space ! // <a href=\"https://twitter.com/racketlang?ref_src=twsrc%5Etfw\">@racketlang</a> <a href=\"https://t.co/ekaxKVZ5cZ\">pic.twitter.com/ekaxKVZ5cZ</a></p>&mdash; Ross McKinlay (@pezi_pink) <a href=\"https://twitter.com/pezi_pink/status/1095403160284352513?ref_src=twsrc%5Etfw\">February 12, 2019</a></blockquote>\n\n<script async=\"async\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">Realtime hardware plasma 😃3 bit colour, no cpu, no ram blocks <a href=\"https://twitter.com/hashtag/fpga?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#fpga</a> <a href=\"https://twitter.com/hashtag/Fairylog?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#Fairylog</a> <a href=\"https://t.co/9vQurYgMy2\">pic.twitter.com/9vQurYgMy2</a></p>&mdash; Ross McKinlay (@pezi_pink) <a href=\"https://twitter.com/pezi_pink/status/1095807544457678853?ref_src=twsrc%5Etfw\">February 13, 2019</a></blockquote>\n\n<script async=\"async\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">Remember the 3-bit hardware plasma? Here&#39;s a 24-bit colour version, this time in software. Running on a custom built CPU and video hardware, outputting to a 64x64 <a href=\"https://twitter.com/adafruit?ref_src=twsrc%5Etfw\">@adafruit</a> RGB LED matrix. Built from the ground up in my forthcoming language <a href=\"https://twitter.com/hashtag/fairylog?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#fairylog</a> // <a href=\"https://twitter.com/racketlang?ref_src=twsrc%5Etfw\">@racketlang</a> <a href=\"https://twitter.com/hashtag/FPGA?src=hash&amp;amp;ref_src=twsrc%5Etfw\">#FPGA</a> <a href=\"https://t.co/YDGPol2ORV\">pic.twitter.com/YDGPol2ORV</a></p>&mdash; Ross McKinlay (@pezi_pink) <a href=\"https://twitter.com/pezi_pink/status/1100132467707707395?ref_src=twsrc%5Etfw\">February 25, 2019</a></blockquote>\n\n<script async=\"async\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">My cpu now has a working call stack and separate data stack. To celebrate, I have wrote this small but colourful and all-realtime chessboard zoomer, which uses neither of them <a href=\"https://t.co/txLiqY42ZH\">pic.twitter.com/txLiqY42ZH</a></p>&mdash; Ross McKinlay (@pezi_pink) <a href=\"https://twitter.com/pezi_pink/status/1102937308771295232?ref_src=twsrc%5Etfw\">March 5, 2019</a></blockquote>\n\n<script async=\"async\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<h3 id=\"hello-world\">Hello World</h3>\n\n<p>To show you how Fairylog works, we need a project. Most hardware stuff gets big quite quickly, so as a small intro we&rsquo;ll write a piece of hardware that can read the data from two Nintendo gamepads.</p>\n\n<p>But first, the absolute basics. The hello world of the hardware world is, of course, flashing some LEDs. Grab your favourite FPGA and download Fairylog from the <a href=\"https://pkgs.racket-lang.org/package/Fairylog\">Racket package manager</a>. (note: it is out of scope to try and properly teach either Racket or Verilog here, hopefully you know some of both)</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">fairylog</span>\n\n<span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">blinky</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span><span class=\"w\">  </span><span class=\"c1\">; master clock signal</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"c1\">; leds on FPGA board</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]])</span>\n<span class=\"w\">    </span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">always</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"kd\">#:posedge</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">&amp;</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A Fairylog program is represented by a bunch of .rkt files, each of which may have several Verilog modules in it. By default, when you compile the program (usually from the REPL) Fairylog will produce a .v file for each .rkt file that it finds containing module code, into the same directory. You can then use these files as part of your project in the huge toolchain from whichever vendor&rsquo;s FPGA you own.</p>\n\n<p>As you can see, <code>vmod</code> creates a named module. It is followed by a list of input and output <em>ports</em>. Each port must be marked as <code>#:input</code>, <code>#:output</code> or <code>#:inout</code>. A port must also have a type - all of the standard Verilog ones are supported - here we are using the most common types of <code>#:wire</code> and <code>#:reg</code>. Finally, you are able to specify the size of the port in bits, along with a default value if it is of type <code>#:reg</code></p>\n\n<p>Verilog requires that you specify sizes for everything in the awkward syntax of <code>[msb : lsb]</code>. Since 95% of the time you simply want <em>n</em> bits, Fairylog provides the shorthand you see in the above code. However, it does support the full Verilog syntax as well should you want it:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">;these definitions are equivalent and define a 4-bit reg</span>\n<span class=\"p\">[</span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]]</span>\n<span class=\"p\">[</span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"c1\">;verilog style</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Next up is the module body itself. The <code>locals</code> form introduces locally scoped wires and regs. The syntax is the same as the port syntax except you can&rsquo;t specify directions.</p>\n\n<p>The <code>always</code> block has a number of uses in Verilog, although it can be quite confusing at times as to which you should use. Fairylog attempts to make this a bit simpler by not allowing code that doesn&rsquo;t make sense inside an <code>always</code> block.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">always</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"kd\">#:posedge</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span><span class=\"p\">])</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">&amp;</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this example you see <code>always</code> is followed by a Verilog <em>sensitivity list</em>. In this case it indicates that the code to follow should execute on the rising edge of the <code>clk_100mhz</code> signal. Because of this, all <em>assignments</em> that happen in the body will implicitly be <em>non-blocking</em> (the <code>&lt;=</code> operator in Verilog parlance) . The sensitivity list works as you would expect it to if you know Verilog - you can <code>or</code> stuff together and use <code>#:negedge</code> as well as <code>#:posedge</code>.</p>\n\n<p>If you want to use Verilog&rsquo;s other <code>always</code> form, <code>always @(*)</code>, you can use Fairylog&rsquo;s <code>(always * expressions ...)</code>. When inside this form, all <em>assignments</em> are implictitly <em>blocking</em> (using the <code>=</code> operator)</p>\n\n<p><strong><em>It is not possible to use incorrect mixed blocking/non-blocking operators in a Fairylog program</em></strong></p>\n\n<p>Finally, the body contains some familiar Racket forms like <code>begin</code>, <code>when</code> and <code>set</code>. You can also use other Racket style flow control such as <code>cond</code> <code>if</code> <code>unless</code> <code>case</code> and so on, as we will see. <code>(&amp; counter)</code> is an example of using one of Verilog&rsquo;s special unary operators known as a <em>reduction operator</em>. This one in particular, <code>&amp;</code>, tests if all the bits are set on the given operand. The whole suite of Verilog operators are supported, but in the prefix style as preferred by Lisp.</p>\n\n<p><em>note: because Verilog and Racket share some forms with the same name, if you explicitly need a Racket one in some ad-hoc code, they have been renamed to have a r: prefix, eg <em>(r:begin &hellip;) (r:case &hellip;)</em></em></p>\n\n<h3 id=\"macros\">Macros</h3>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">always</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"kd\">#:posedge</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">      </span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This code is so common in Verilog that it quickly becomes tiring to write it all the time. Thankfully we have Racket&rsquo;s macro system on hand to help:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"n\">always-pos</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">always</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"kd\">#:posedge</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">])</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p><code>macro</code> here is simply <a href=\"https://docs.racket-lang.org/syntax/Defining_Simple_Macros.html?q=define-syntax-parser#%28form._%28%28lib._syntax%2Fparse%2Fdefine..rkt%29._define-syntax-parser%29%29\">define-syntax-parser</a> in disguise, provided to you by Fairylog. You can of course bring in whatever Racket libraries you like and use the whole shooting match. The <code>always-pos</code> macro is already provided to you out of the non-existent box by Fairylog.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">fairylog</span>\n\n<span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">blinky</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">; master clock signal</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]])</span><span class=\"w\"> </span><span class=\"c1\">; leds on FPGA board</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]])</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">always-pos</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">&amp;</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">board_leds</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>That&rsquo;s a bit nicer. In case you were wondering, the compiled code looks like this:</p>\n\n<div class=\"brush: verilog\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">blinky</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">3</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"p\">);</span>\n<span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">23</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"p\">;</span>\n<span class=\"k\">always</span><span class=\"w\"> </span><span class=\"p\">@(</span><span class=\"k\">posedge</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">counter</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"> </span>\n<span class=\"k\">endmodule</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h3 id=\"number-literals-ranges-and-arrays\">Number literals, Ranges and Arrays</h3>\n\n<p>Verilog is very picky about its numbers. It does let you use decimal literals, which are always interpreted as 32 bit integers - you must be careful with these as they can lead to many bugs. Fairylog also supports decimal literals in the same manner. If you write a number simply as <code>42</code> then expect the same behavior.</p>\n\n<p>Other than that, Verilog expects you to fully qualify every number with both its radix and amount of bits followed by the actual literal, eg <code>8'h7</code> <code>8'b1</code> <code>10'd20</code> and so on. Fairylog supports this full syntax with the slightly more sane <code>size_radix_literal</code> eg</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">8_16_FF</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">8_2_10101010</span><span class=\"p\">])</span>\n<span class=\"w\">  </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>These literals are checked at compile time and will error if they don&rsquo;t make sense.</p>\n\n<p>Since you are often writing binary and hex values, Fairylog offers a shorthand literal syntax where the size will be inferred from the literal itself. These are very handy and mostly eliminate the need for the fully qualified syntax:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">$FF</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">%1010_1010</span><span class=\"p\">])</span>\n<span class=\"w\">  </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>For the hex literals, the inferred size will be the maximum based on the number of supplied characters, rather than the actual number. For example, <code>$FF</code> <code>$1f</code> and <code>$0f</code> are all inferred as a size of 8.</p>\n\n<p>Binary literals can have any amount of underscores in them to help visually separate numbers of bits.</p>\n\n<p>In general, most assignment expressions are compile time checked. Unlike most Verilog implementations, you will get warnings when stuff does not fit or would be truncated! Be sure to check your warnings, they will catch many a hard to spot Verilog bug. Not everything is checked yet, however &hellip;</p>\n\n<p>To extract a range of bits from an operand, treat the operand as if it were a function:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">locals</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">r:*</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]]</span><span class=\"w\">     </span><span class=\"c1\">; you can use any racket expressions in these!</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span><span class=\"w\">    </span><span class=\"c1\">; bit 1 of a</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)])</span><span class=\"w\"> </span><span class=\"c1\">; bits 7 to 5 of a</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And finally, use the following syntax to declare and access an array. The range syntax will also work for arrays, you must specify all dimensions followed by either a single index or range pair as normal - this will be checked at compile time.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">memory_array</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)]</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory_array</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span><span class=\"w\">  </span><span class=\"c1\">; first 32 bits</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory_array</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"c1\">; second bit of first 32 bits</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory_array</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)])</span><span class=\"w\"> </span><span class=\"c1\">; low byte of first 32 bits</span>\n<span class=\"w\">  </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h3 id=\"nintendo-pads\">Nintendo Pads</h3>\n\n<p>With the basics out of the way, let&rsquo;s try to do something useful. The NES pad is basically a <a href=\"https://en.wikipedia.org/wiki/Shift_register\">4021 shift register</a>. It takes a parallel interface (8 button signals) and turns them into a serial interface we can read using 3 pins rather than 8. The important pins are <strong>Latch</strong>, <strong>Clock</strong>, and <strong>Data</strong>. In order to read the state of the buttons, we must</p>\n\n<ol>\n <li>Pulse the <strong>Latch</strong> pin High to Low. This takes the current button states and latches them into the register.</li>\n <li>The state of button 0 will now appear on the <strong>Data</strong> line where we can grab it from.</li>\n <li>Pulsing the <strong>Clock</strong> line High to Low causes the next button state to appear at <strong>Data</strong></li>\n <li>Repeat until all eight buttons have been read, resulting in a byte that represents the pad state.</li></ol>\n\n<p>First, we&rsquo;ll have a go implementing this largely in the way you would if you are from a software background.</p>\n\n<p>Let&rsquo;s create a new file somewhere for this lovely re-usable module, <code>lib-nes.rkt</code></p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">fairylog</span>\n\n<span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">nes_pads</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">; master clock signal</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data1</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">; data line from pad 1</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data2</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">; data line from pad 2</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"c1\">; results register, both data combined in 16 bits</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">; the pad&#39;s CLK line</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">; the pad&#39;s LATCH line</span>\n<span class=\"w\">   </span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"c1\">; implementation ...</span>\n<span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I have a small module that brings two NES pads togther under one interface. That is, the <strong>Clock</strong> and <strong>Latch</strong> lines are tied together, and you can read the two values on <strong>Data1</strong> and <strong>Data2</strong>. The idea will be to read both pads and produce one 16-bit number with the two pad states.</p>\n\n<p>Digital electronic components are highly sensitive to accurate timing. You can find the minimum and maximum timing requirements for different operations for the various devices in their <a href=\"http://www.ti.com/lit/ds/symlink/cd4021b-q1.pdf\">datasheets</a>. Most modern 4021 shift registers have a minimum response time of 180ns. I am using a real NES pad from the early 80s and it doesn&rsquo;t seem to work at such high speeds - with some experimentation 640ns or more seems to work quite well - it can go faster but we are not in a rush.</p>\n\n<p>Our first problem, then, is timing. The board is providing a clock signal at 100mhz which is 1 cycle every 10ns - way too fast for what the poor pad can keep up with. What we need is to divide the clock and create a new, slower signal to base our logic around.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">clk_int</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"p\">])</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">always-pos</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">&amp;</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"n\">clk_int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">~</span><span class=\"w\"> </span><span class=\"n\">clk_int</span><span class=\"p\">)))</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">))</span>\n<span class=\"w\">   </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Since a 6-bit register can count up to 64 before wrapping around, this will give us the delay we need (64 * 10ns). The <code>clk_int</code> register is inverted each time the counter rolls over, giving us the new clock signal (we&rsquo;ll see another way to achieve this shortly)</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"w\"> </span><span class=\"n\">nes-state</span>\n<span class=\"w\">        </span><span class=\"n\">ready</span>\n<span class=\"w\">        </span><span class=\"n\">latching</span>\n<span class=\"w\">        </span><span class=\"n\">next-bits</span>\n<span class=\"w\">        </span><span class=\"n\">read-bits</span>\n<span class=\"w\">        </span><span class=\"n\">finish</span><span class=\"p\">)</span>\n<span class=\"w\">        </span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">nes-state.ready</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]])</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">always-pos</span><span class=\"w\"> </span><span class=\"n\">clk_int</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._match))\" style=\"color: inherit\">match</a></span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">nes-state</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">ready</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">; latch high to grab new data</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">    </span><span class=\"c1\">; zero out everything else</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">nes-state.latching</span><span class=\"p\">])]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">latching</span><span class=\"w\"> </span><span class=\"c1\">;first bit will be available</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">; latch low</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"n\">nes_data1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;grab first bits of data </span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"n\">nes_data2</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;begin clocking </span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">nes-state.read-bits</span><span class=\"p\">])]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">next-bits</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\">;end clock</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">nes-state.read-bits</span><span class=\"p\">])]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">read-bits</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nes_data1</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"c1\">;concat new data in</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nes_data2</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"c1\">;check to see if we have finished</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span><span class=\"w\"> </span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"w\">                       </span><span class=\"n\">nes-state.next-bits</span>\n<span class=\"w\">                       </span><span class=\"n\">nes-state.finish</span><span class=\"p\">)])]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">finish</span>\n<span class=\"w\">       </span><span class=\"c1\">;done, assign the final value and reset FSM</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"n\">data1</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">nes-state.ready</span><span class=\"p\">])])</span>\n<span class=\"w\">            </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Coming from a software perspective, in hardware code there&rsquo;s no such thing as loops, so we have to encode everything in state machines. Fairylog has a compile-time feature called <code>enums</code> . As you can see here, you can define an <code>enum</code> with a bunch of names (and optionally integer values). Then, <code>match</code> can be used with an enum to provide a switch-case style dispatch on the items. Most importantly, <strong><em>the compiler exhaustively checks match cases</em></strong> - that is, it will error if you do not supply all the of cases, which proves invaluable for maintenance since you&rsquo;ll be using a lot of state machines.</p>\n\n<p>It is also easy to fall into the trap here of reading the chains of <code>sets</code> as happening procedurally like they would in a language like C. This is not the case, since in hardware everything generally happens in parallel, at the same time. In this case, we are using an <code>always</code> block with our new slow clock signal <code>clk_int</code>, and everything inside is based on flip-flops that work in sync with the clock signal. New values are not available to read until the <em>next</em> clock cycle. That is why the conditional in <code>read-bits</code> that checks <code>(if (&lt; bits_shifted 6))</code> is not <code>7</code>, because the line above that increments <code>bits-shifted</code> hasn&rsquo;t actually happened yet!</p>\n\n<p>To use the module we&rsquo;ll have to instantiate it from somewhere else. Let&rsquo;s create a file called top.rkt</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">fairylog</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span><span class=\"w\"> </span><span class=\"s2\">\"lib-nes.rkt\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">top</span>\n<span class=\"w\">  </span><span class=\"p\">([</span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"c1\">;NES pad connections</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data1</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data2</span><span class=\"w\"> </span><span class=\"kd\">#:input</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"kd\">#:output</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]])</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]])</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">vmod</span><span class=\"w\"> </span><span class=\"n\">nes_pads</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"n\">nes_clk</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"n\">nes_lat</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data1</span><span class=\"w\"> </span><span class=\"n\">nes_data1</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data2</span><span class=\"w\"> </span><span class=\"n\">nes_data2</span><span class=\"p\">]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"n\">nes_data</span><span class=\"p\">])</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">assign</span><span class=\"w\"> </span><span class=\"n\">board_leds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">^</span><span class=\"w\"> </span><span class=\"n\">$f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You&rsquo;ll see here we include the <code>lib-nes.rkt</code> file just like you would in a normal Racket program. The ports for the <code>top</code> module include the hard signals from the FPGA board for the various pins of the NES controller (inputs and outputs), the main system clock, and 4 LEDs that I happen to have on the board.</p>\n\n<p>The inner <code>vmod</code> form is used for module instantiation. You must supply a list of port mappings for the target module&rsquo;s ports. In this case, they all happen to be called the same thing.</p>\n\n<p>You&rsquo;ll notice here that <code>nes_data</code> is defined as a <code>wire</code> type. This is because the data is actually stored in the other module - we only want a connection to it.</p>\n\n<p>The last form here is <code>assign</code> which we have not seen yet. This is Verilog&rsquo;s <em>combinatorial</em> logic - that is, stuff that happens outside of clock signals. These signals update as soon as something that affects them changes. In this case we connect our <code>board_leds</code> output wire to the last four bits of the <code>nes_data</code> wire, and XOR it with $f. In other words, the LEDs on the board will directly represent the last four buttons from pad 1. We do not need to explictly update anything, it will happen automatically.</p>\n\n<p>The XOR $f inverts the bits, since the pad outputs 0 for pressed and 1 for not pressed, and I&rsquo;d like the LEDs to light up as the buttons are pressed.</p>\n\n<div class=\"brush: verilog\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span>\n<span class=\"normal\">65</span>\n<span class=\"normal\">66</span>\n<span class=\"normal\">67</span>\n<span class=\"normal\">68</span>\n<span class=\"normal\">69</span>\n<span class=\"normal\">70</span>\n<span class=\"normal\">71</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"n\">nes_pads</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">reg</span><span class=\"w\">  </span><span class=\"n\">nes_clk</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">reg</span><span class=\"w\">  </span><span class=\"n\">nes_lat</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">nes_data1</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">input</span><span class=\"w\"> </span><span class=\"kt\">wire</span><span class=\"w\">  </span><span class=\"n\">nes_data2</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"k\">output</span><span class=\"w\"> </span><span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">15</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"p\">);</span>\n<span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"p\">;</span>\n<span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">7</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"p\">;</span>\n<span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">7</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"p\">;</span>\n<span class=\"kt\">reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"p\">;</span>\n<span class=\"kt\">reg</span><span class=\"w\">  </span><span class=\"n\">clk_int</span><span class=\"w\"> </span><span class=\"p\">;</span>\n<span class=\"k\">always</span><span class=\"w\"> </span><span class=\"p\">@(</span><span class=\"k\">posedge</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">counter</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">clk_int</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">clk_int</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"> </span>\n<span class=\"k\">always</span><span class=\"w\"> </span><span class=\"p\">@(</span><span class=\"k\">posedge</span><span class=\"w\"> </span><span class=\"n\">clk_int</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"mh\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c1\">// ready</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">      </span><span class=\"mh\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c1\">// latching</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">nes_data1</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">nes_data2</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">3</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">      </span><span class=\"mh\">2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c1\">// next-bits</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">3</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">      </span><span class=\"mh\">3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c1\">// read-bits</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"mh\">6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">nes_data1</span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"mh\">6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">nes_data2</span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mh\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">bits_shifted</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mh\">2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mh\">4</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">      </span><span class=\"mh\">4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c1\">// finish</span>\n<span class=\"w\">      </span><span class=\"k\">begin</span>\n<span class=\"w\">        </span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">data2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data1</span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mh\">0</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">end</span><span class=\"w\"> </span>\n\n<span class=\"w\">    </span><span class=\"k\">endcase</span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"> </span>\n<span class=\"k\">endmodule</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice how, in the compiled Verilog code, Fairylog has added helpful comments related to the states from the enum. I did this because you&rsquo;ll be spending a lot of time wondering what is going on in your state machines!</p>\n\n<h3 id=\"nes-paradigm-shift\">NES++ Paradigm Shift!</h3>\n\n<p>Whilst the above design works, it is not very idiomatic. In hardware you generally want to stay away from lots of flip-flop based state and complex conditional logic (not that this example is very complex!). Instead, we shoud aim to exploit the massively parallel nature of the circuitry and combine the combinatorial (pun intended) and clock-based approaches. This will lead to far fewer FPGA resources being consumed and better optimisation potential.</p>\n\n<p>Let&rsquo;s first see a different way of generating the divided clock signal:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">clk_int</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)])</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">always-pos</span><span class=\"w\"> </span><span class=\"n\">clk_100mhz</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here we have changed counter to be 7 bits instead of 6, and <code>clk_int</code> is no longer a reg but instead a wire that is high when bit 6 (0 based, the MSB) of <code>clk_int</code> is set and low if not. <em>(note: as in Verilog, using a default expression on a wire declaration like this is the same as later using <code>assign</code> with it)</em></p>\n\n<p>Because a 7 bit number can hold exactly double what a 6 bit number can, this has the affect of the clock signal being low right up until <code>%011_1111</code> and then high from <code>100_0000</code> to <code>111_1111</code>, effectively giving us the same clock period as before, without the extra logic to control it.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">locals</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">phase</span><span class=\"w\"> </span><span class=\"kd\">#:reg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">phase_latch</span><span class=\"w\"> </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._~3d~3d))\" style=\"color: inherit\">==</a></span><span class=\"w\"> </span><span class=\"n\">phase</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">phase_end</span><span class=\"w\">   </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._~3d~3d))\" style=\"color: inherit\">==</a></span><span class=\"w\"> </span><span class=\"n\">phase</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">phase_data</span><span class=\"w\">  </span><span class=\"kd\">#:wire</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/Experimental_Features.html#(form._((lib._typed-racket/base-env/base-types-extra..rkt)._!))\" style=\"color: inherit\">!</a></span><span class=\"w\"> </span><span class=\"n\">phase_latch</span><span class=\"p\">)])</span>\n<span class=\"w\">  </span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">assign</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_clk</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">phase_data</span><span class=\"w\"> </span><span class=\"n\">clk_int</span><span class=\"p\">)]</span>\n<span class=\"w\">   </span><span class=\"p\">[</span><span class=\"n\">nes_lat</span><span class=\"w\"> </span><span class=\"n\">phase_latch</span><span class=\"p\">])</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">always-pos</span><span class=\"w\"> </span><span class=\"n\">clk_int</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">phase</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">phase_latch</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">])]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">phase_end</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">nes_data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nes_data2</span><span class=\"p\">)</span>\n<span class=\"w\">                              </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nes_data1</span><span class=\"p\">))]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">phase</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">])]</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">phase_data</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set))\" style=\"color: inherit\">set</a></span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nes_data1</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data2</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">nes_data2</span><span class=\"p\">)])]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This next set of changes removes the old state machine completely. It is based on the observation that we need to do 8 things in sequence, and the state of the <strong>Latch</strong> and <strong>Clock</strong> pins can be determined by a combination of the current phase, and the clock.</p>\n\n<p>First, we setup some wires that state <code>phase_latch</code> is high when <code>phase</code> is equal to zero. <code>phase_end</code> is high when <code>phase</code> is equal to 7, and finally, <code>phase_data</code> is high whenever <code>phase_latch</code> isn&rsquo;t.</p>\n\n<p>The actual NES ports have been changed from <code>#:reg</code> to <code>#:wire</code> (not seen here) and are now driven by combinatorial expressions. <code>nes_lat</code> is now high only when <code>phase_latch</code> is. <code>nes_clk</code> is high only when both <code>phase_data</code> is AND the <code>clk_int</code> is high.</p>\n\n<p>If you think about this you will realise it has the effect on automating the signals completely for us, cycling in each bit of data as long as it is not latching.</p>\n\n<p>All that remains then, is to continually increase <code>phase</code>, assigning the results to <code>nes_data</code> during <code>phase_end</code> and concatenating new intermediate data during <code>phase_data</code>.</p>\n\n<p>Setting the data back to zero in <code>phase_latch</code> could also be removed completely since it will be overwritten anyway.</p>\n\n<p>This design leads to a 30%~ reduction in FPGA resources! Of course, in such a small design it is negligible but it soon mounts up in larger and more complex modules.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n\n<p>Now you can write Verilog code with <strong>RACKET MACROS</strong> what more needs to be said? As an example of what is possible, the CPU I designed that was programmed to produce the videos at the top of the post, was able to <em>mostly implement its own instruction set</em> through the use of macros.</p>\n\n<p>This led to way less problems, less code, and most importantly a lot more fun for me to program, givng me more time to work on the cool stuff (apologies Verilog programmers, if you enjoy writing all that then good for you!).</p>\n\n<p>Fairylog is far from complete however, and there are no docs. It does not yet support Verilog Tasks, and some other stuff which I don&rsquo;t know anything about yet. There might be other mistakes as well since I am new at all these HDL shenanigans.</p>\n\n<p>At this point it is still a tool mostly designed by me, for me, so you can expect it might change quite a bit at any time. Testament to Racket though, the original working version of Fairylog took me just 2 weeks to get going.</p>\n\n<p>As a parting entertaining anecdote, I have still managed to never write an actual Verilog program from scratch! Achievement unlocked :)</p>")) ((? . 33) f post (u . "A basic guide to F# functional techniques part 1") (? . 33) 1488171288 (p+ #"C:\\repos\\pezipink.github.io\\blog/2012/02/12/a-basic-guide-to-f-functional-techniques-part-1/index.html" . windows) (u . "/blog\\2012\\02\\12\\a-basic-guide-to-f-functional-techniques-part-1/") (u . "2012-02-12T22:14:00") (? . 36) (? . 1) (c (u . "fsharp")) (? . 48) #t (u . "<!-- more-->\n\n<h3>Intro</h3>\n\n<p>I have been using F# for a year and a half or so now for all sorts of things - general tools, scripts and utilities for work, XNA games / graphics / AI simulations, some async layers for rx-driven silverlight applications and so forth. I'm still pretty new to the functional paradigm, which I have been embracing (with a great deal of mind melting, and destruction of my OOP and procedural shackles). One thing I struggled with initially was the subject of function composition, and its relationship to partial function application and so forth. I understood the theory behind it but couldn't really see <em>WHY</em>I would want to use it.</p>\n\n<p>Recently I have been learning a bit of Haskell, using the excellent book <a href=\"http://www.amazon.co.uk/Haskell-Functional-Programming-International-Computer/dp/0201342758\">Haskell : The Craft of Functional Programming</a>. This really helped switch a lot of lights on with regards to functional programming, introducing function composition in chapter 1. The books follows a theme of building a simple \"Picture\" manipulation library based upon function composition, partial application and so forth. I thought it would be cool to covert these into F# and also have a crack at the various exercises presented in the book, and it has been fun. I share this experience with you in the hopes that some other novice functional programmers might have some \"light switched on!\" moments when thinking about functional techniques.</p>\n\n<p>It is assumed the reader will have a working knowledge of the F# language including all the basic syntax, data types, pattern matching, lambda expressions and pipelining. You already know why functional programming is cool and the benefits it offers, but are a bit mystified with how to apply these seemingly complex functional techniques. If you are a C# developer making the move to F# then you will want to go and learn all the basics of the language first, otherwise you are probably not going to be able to follow this all that well.</p>\n\n<h3>Setting the Scene!</h3>\n\n<p>Our representation of a \"picture\" is simply a 2-dimensional list of characters, where each character may be '.' or '#'. In F# this is simply defined as <em><strong>char list list</strong></em></p>\n\n<p>An example of a suitable picture is shown here, in a string format which is much easier to represent in the script file than a whole bunch of character lists:</p>\n\n<p><img style=\"border-style: initial; border-color: initial;\" src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-12+at+16.04.35.png\" alt=\"\" /></p>\n\n<p>Granted, it looks bugger all like a horse, but you can blame the Haskell book for that ;) We create a simple function that will parse this string, dumping whitespace found in the source file, and then converting each line into a list of characters</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">pictureOfString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">Split</span><span class=\"o\">([|</span><span class=\"sc\">&#39;\\n&#39;</span><span class=\"o\">|],</span><span class=\"w\"> </span><span class=\"nn\">StringSplitOptions</span><span class=\"p\">.</span><span class=\"n\">RemoveEmptyEntries</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">ofArray</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">Trim</span><span class=\"bp\">()</span><span class=\"o\">.</span><span class=\"n\">ToCharArray</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">ofArray</span><span class=\"o\">)</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>And another little function for showing printing the results</p>\n\n<p></p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">printPicture</span><span class=\"w\"> </span><span class=\"n\">picture</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">   </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">printer</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"s\">\"%c\"</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">picture</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"n\">printer</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>Here the inner function <em>printer</em>has inferred the argument <em>line</em>to<em></em>have a type of <em>char list</em>. This is because we have applied the <em>line</em>argument to a list processing higher-order function <em>List.iter</em>, so the type inference knows that <em>line</em>must be a list of some description, and we have then used printf \"%c\" on each item of the list. The \"%c\" notation tells printf to look for a <em>char</em>and thus the type of <em>line</em> must be <em>char list</em>. Notice we have not explicitly applied the printfn function to each character, this has been done automatically for us by the <em>List.iter</em>function. We will see why this works later. We could have equally written <em>line |&gt; List.iter( fun c -&gt; printf \"c%\" c )</em>. Similarly, the argument <em>picture</em>is inferred to have type <em>char list list</em>because we have used <em>List.iter</em>and applied our <em>printer</em>function to it, once again allowing the argument to be automatically applied to the<em>printer</em>function without explicitly applying it.</p>\n\n<p>With that being done, it is now possible to start writing some functions that will perform some processing on the picture. A desirable function would be one that takes an input picture, flips it along the horizontal plane, and returns a new picture object. We can think of this mirror flip simply as reversing the order of the outer lines. Therefore we can create this function as a direct alias to the List.rev library function.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">flipH</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>So, nothing too amazing has happened here. We have aliased the inbuilt library function that reverses the given list, and this will produce the behaviour we expect when we put it to the test.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">horse</span>\n<span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">pictureOfString</span><span class=\"w\"> </span>\n<span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">flipH</span><span class=\"w\"> </span>\n<span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">printPicture</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p><img style=\"border-style: initial; border-color: initial;\" src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-12+at+16.11.24.png\" alt=\"\" /></p>\n\n<p>Now, for something slightly more interesting. We wish to write a function that will flip a picture on the vertical plane. This is a similar operation to the previous one, except it is apparent that <em>the contents of each line</em>needs to be reversed. That is, rather than reversing the whole list of lines, instead we wish to transform each line in the list with a reverse operation. When thought about in this way, it should become apparent that the function List.map is appropriate, as it is designed to call some function on each entity of a given list and create a new list from the results (this is called Select in LINQ). The function we pass into map must be compatible with the type it will be operating on, and since our inner type is another list, we can use any function that takes a list as an input. The function we wish to use in the map command is simply List.rev again which will reverse each inner list, so that</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">flipV</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>or</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">flipV</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">rev</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Note here that once again we have not applied this new function to any arguments, we have just defined a new function by layering two existing functions, so that ultimately we have a function that still accepts an arbitrary list of lists of any type and produces a new value of the same type as the input (because List.rev obviously returns the same type as it was given as an input). All that we have really done here is provided a definition that will feed the result of one function straight into another one. This is a form of <em style=\"font-weight: bold;\">function composition</em>by way of using <em style=\"font-weight: bold;\">functions as first-class values</em>and it works because List.map is a <em style=\"font-weight: bold;\">higher-order function.</em>That is, a function that takes another function as a parameter and encapsulates executing some common pattern with that function. This is polymorphism in a functional language (or to be more precise, it is called <em>parametric polymorphism</em>which is the ability to write functions that execute identically regardless of data types). In the case of map it is executing the supplied function on each item of the input list and building a new list with the results. If you apply this function to lists with different types, you might notice that the type inference system has inferred the new function to have a type of '<em>a list list -&gt; 'a list list</em>and this is because the List.rev function takes a <em>'a list</em>and so it has determined that the map function must accept a list of lists of 'a. Pretty clever!</p>\n\n<p>The second version of the function above is written in what is called <em style=\"font-weight: bold; \">point-free style</em>(which has something to do with topology in maths I think). Essentially this is the application of arguments to functions without explicitly using the arguments - and in this case we are automatically applying the argument that will be passed in from <em>List.map</em>to<em>List.rev</em>. We have already seen this style in the <em>printPicture</em>function. We shall prefer the point-free style in these articles as it is the more compact and succinct version (and it's more flash! However, it can decrease the readability of a function definition).</p>\n\n<p>For the next function, we would like to be able to rotate the image. We can already accomplish this using our new functions defined above, as a rotation is the effect of applying a horizontal and vertical flip on an image. It is interesting to note that these functions can be applied in either order to exactly the same effect. In order to achieve this we could write the function in a variety of ways, including writing an explicitly defined function that take an input and then pipes or applies it into the two functions like so</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rotate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">flipH</span><span class=\"w\"> </span><span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">flipV</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>or</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rotate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">flipV</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">flipH</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>However, F# already has operators built in that do exactly the above in a more concise manner, and the ability to compose functions together with an operator can be a powerful technique as we will hopefully see later on. There are two built in function composition operators, <strong>&gt;&gt;</strong> and <strong>&lt;&lt;</strong>, the forward and backward composition operator respectively. You can think of these as identical to<strong>|&gt;</strong> and <strong>&lt;|</strong> but without applying arguments to the resulting functions. This means you can replace a long pipeline of <strong>|&gt;</strong> operators with <strong>&gt;&gt;</strong> operators if you remove the application of the argument to the first function in the pipeline.</p>\n\n<p>Therefore, f &gt;&gt; g means \"execute function f and call function g with its result\" and the result of this is <em>a new function</em>that accepts whatever the input argument of function f was and results in whatever the output of function g was. Because the result of f is passed to x, a constraint obviously exists in that the input of g must be the same as the output of f. The backwards composition operator is the same thing but in reverse, so that g &lt;&lt; f has the same meaning as f &gt;&gt; g</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rotate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">flipH</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">gt</span><span class=\"o\">;&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">flipV</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Let&rsquo;s test the new rotate function: <code>fsharp\n\nhorse\n|&amp;gt; pictureOfString\n|&amp;gt; rotate\n|&amp;gt; printPicture</code></p>\n\n<p><img style=\"border-style: initial; border-color: initial;\" src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-13+at+21.26.16.png\" alt=\"\" /></p>\n\n<p>The last two functions we will create in this article will deal with being able to create new pictures by taking two existing pictures and creating a new one out of them. One function will stack pictures vertically, and the other will put them alongside each other. First we will look at the stacking function as it is the easier of the two. Given two pictures, to stack them vertically, all we really need to do is append the two lists, which is easy! F# already has an operator for this, the @ operator. Therefore our definition to stack two pictures is simply this operator which we will alias onto our own function name:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">stack</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(@)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here we have wrapped the @ operator in parentheses. This tells the compiler that we want to use the @ operator as a function instead of an operator. Operators in F# are in fact just functions like everything else, the only difference being that you can apply arguments to the function by placing them on either side of the operator. Operators are sometimes called <em>symbolic functions</em>- that is, functions that use a symbol instead of a word, and you can define your own symbolic functions (which is awesome). This is different from the concept of <em>operator overloading</em>which you will be used to in an OOP language.</p>\n\n<p>The second function seems to be more tricky. If you think about it though, all we need to do is take two lists, and for each line in each list, join them together and output one combined list at the end. You can visualise this like so:</p>\n\n<p>List A List B</p>\n\n<p>\"........###....\" @ \"....####.......\"</p>\n\n<p>\"........###....\" @ \"....####.......\"</p>\n\n<p>\"........###....\" @ \"....####.......\"</p>\n\n<p>Looking at the wonderful inbuilt functions in the List module, you will see there is a function called List.map2 which has the following type signature <em>('T1 -&gt; 'T2 -&gt; 'U) -&gt; 'T1 list -&gt; 'T2 list -&gt; 'U list.</em>These type signatures can be confusing to read at first, but you should learn how to read them well because they can yield a great deal of information about what the function probably does. Here the first parameter<em>('T1 -&gt; 'T2 -&gt; 'U)</em>is a function that takes one element of type 'T1, another element of 'T2, performs some logic on them and results in a new value of type 'U. It then accepts two lists of type 'T1 and 'T2 and finally produces a list of 'U. This is exactly what we need to perform the side-by-side joining of our pictures. We can write this explicitly like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">sideBySide</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map2</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">item1</span><span class=\"w\"> </span><span class=\"n\">item2</span><span class=\"w\"> </span><span class=\"o\">-&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">item1</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">item2</span><span class=\"w\"> </span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Because we have used the @ operator, the type inference system will know that the items in both lists must be a list of something, but it will not care what type those lists are. In fact, we can shorten this even further by using the point free style again here like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">sideBySide</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map2</span><span class=\"w\"> </span><span class=\"o\">(@)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Which is much more elegant! Now let's some our functions together in a more complex pipeline. We will have to be slightly more careful now as the new <em>stack</em> and <em>sideBySide</em>functions will only work if the two input lists are of equal size.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">horse</span><span class=\"w\"> </span>\n<span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">pictureOfString</span><span class=\"w\"> </span>\n<span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">pic</span><span class=\"w\"> </span><span class=\"o\">-&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">sideBySide</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rotate</span><span class=\"w\"> </span><span class=\"n\">pic</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">pic</span><span class=\"w\"> </span>\n<span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">pic</span><span class=\"w\"> </span><span class=\"o\">-&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">pic</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">flipH</span><span class=\"w\"> </span><span class=\"n\">pic</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"o\">|&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">printPicture</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p><img style=\"border-style: initial; border-color: initial; \" src=\"/blogengine/image.axd?picture=2012%2f2%2fSnap+2012-02-14+at+14.33.55.png\" alt=\"\" /></p>\n\n<p>What's going on here? The second part of the pipeline calls <em>sideBySide</em>which is expecting two parameters. Obviously the pipeline operator is only passing one argument. What I wanted to do is use the same picture created from <em>pictureOfString</em>,<em></em>so to facilitate this I have used an <em>anonymous function</em>which captures the horse picture as the argument <em>pic.</em> I have then applied the unchanged <em>pic</em>as one argument to the <em>sideBySide</em>function, and I have called <em>rotate</em>on <em>pic</em>to produce the second argument to the<em>sideBySide</em>function. In the third stage of the pipeline I have done almost exactly the same thing, but using <em>stack</em>and <em>flipH</em>on the results of the previous stage of the pipeline.</p>\n\n<h3>Why does the \"point free\" style work?</h3>\n\n<p>In order to understand this, you must first understand that <em>in F#,</em><strong style=\"font-style: italic;\">every</strong><em></em><strong style=\"font-style: italic;\">function has only oneargument.</strong>When you apply arguments to a function, F# simply applies the first one, returns a new function which accepts the remaining arguments, then applies the next argument, and so on. This is called <em>partial function application</em><strong style=\"font-style: italic;\"></strong>and this can be used anywhere. It is totally valid syntax to apply only some arguments to a function, you will simply receive a few function in return which takes the remaining arguments. We can use this greatly to our advantage in many places.</p>\n\n<p>If we return to the <em>printPicture</em>function, and look at the definition of the inner function <em>printer.</em> Here we have used printf but we have not applied all of the arguments to it. If you execute the command (printf \"c%\") in F# interactive, it will returna type of (char -&gt; unit). What we have done here is partially applied the printf function with only its first argument, and it has returned us a new function that is expecting the remaining<em>char</em>argumentand returns a <em>unit</em>(equivalent to void). Now if you look at the definition of <em>List.iter</em>you will see its type is <em>('T -&gt; unit) -&gt; 'T list -&gt; unit.</em>The first argument is expecting a function of type <em>'T -&gt; unit</em>which is exactly what our partially applied printf function has given us! Therefore, when the iteration function executes, at some point it is going to take the passed in function and apply it to an item in the list, which satisfies the rest of the partially applied printf function we have passed in. You can also see this directly at work in the way we call the <em>printer</em>function in the last line. I hope that makes sense, it is a little awkward to try and explain.</p>\n\n<p>That's it for the first part of these articles, I hope it has helped show how the functional style can be very succinct and elegant. In the next part, we will create some more interesting functions for the picture library such as <em>superimpose</em>, <em>invertColour</em>, <em>scale</em>and also see how we can use the composition operators in a dynamic way to build up functions that compose themselves with themselves (!!)</p>\n\n<p>If you are really serious about functional programming, I highly recommend you have a go at learning a pure functional language, it will greatly help with the way you design your F# programs.</p>\n\n<p>Footnote: If any expert functional programmers are reading this, I might have messed up the definitions of some techniques, or got some stuff wrong. I'm far from being a master functional programmer, so go easy on me! :)</p>\n\n<p>I have attached an F# script file containing the code covered :</p>\n\n<p><a href=\"/blogengine/file.axd?file=2012%2f2%2fPicture.fsx\">Picture.fsx (1.25 kb)</a></p>")) ((? . 34) f post (u . "Monads to help with COM cleanup") (? . 34) 1488257204 (p+ #"C:\\repos\\pezipink.github.io\\blog/2012/12/01/monads-to-help-with-com-cleanup/index.html" . windows) (u . "/blog\\2012\\12\\01\\monads-to-help-with-com-cleanup/") (u . "2012-12-01T23:49:00") (? . 35) (? . 26) (c (u . "fsharp")) (u . "\n<p>I currently do a lot of Office type automation work where I scan a bunch of email from exchange, download excel attachments, open and transform a bunch of data from them, reconcile these against databases using FLinq, produce graphs and charts with the results using FSharpChart, and so forth.</p>\n\n<p>(p.s - as a side note, F# is <em>awesome</em>at doing this kind of thing, I can knock all kinds of stuff out super fast. p.p.s - Active patterns with Excel = win)</p>\n\n<p>As anyone who has done any office automation will know, cleaning up the COM objects is a right pain. Any object you bind to a value be it a workbook, sheet, cell, range or anything at all has to be explicitly freed with Marshal.FinalReleaseComObject. If you are not really careful with this you will end up with memory leaks, and EXCEL.EXE (or whatever) running forever in the background even once your program has shut down. The problem actually goes further than this, if you use the . . . notation to traverse the object models, all the intermediate objects are also bound and need freeing up. However, these ones as they were not explicitly bound you can get away with calling GC.Collect() andGC.WaitForPendingFinalizers().</p>\n\n<p>You can see any number of articles on the interwebs about this issue and all solutions are ugly. F# to the rescue! Here is a simple computation expression I use to deal with this problem. It is not optimal but the interop is horribly slow anyway so it makes no difference.</p>") #t (u . "\n<p>I currently do a lot of Office type automation work where I scan a bunch of email from exchange, download excel attachments, open and transform a bunch of data from them, reconcile these against databases using FLinq, produce graphs and charts with the results using FSharpChart, and so forth.</p>\n\n<p>(p.s - as a side note, F# is <em>awesome</em>at doing this kind of thing, I can knock all kinds of stuff out super fast. p.p.s - Active patterns with Excel = win)</p>\n\n<p>As anyone who has done any office automation will know, cleaning up the COM objects is a right pain. Any object you bind to a value be it a workbook, sheet, cell, range or anything at all has to be explicitly freed with Marshal.FinalReleaseComObject. If you are not really careful with this you will end up with memory leaks, and EXCEL.EXE (or whatever) running forever in the background even once your program has shut down. The problem actually goes further than this, if you use the . . . notation to traverse the object models, all the intermediate objects are also bound and need freeing up. However, these ones as they were not explicitly bound you can get away with calling GC.Collect() andGC.WaitForPendingFinalizers().</p>\n\n<p>You can see any number of articles on the interwebs about this issue and all solutions are ugly. F# to the rescue! Here is a simple computation expression I use to deal with this problem. It is not optimal but the interop is horribly slow anyway so it makes no difference.</p>\n<!-- more-->\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ComCleaner</span><span class=\"o\">(</span><span class=\"n\">cleanUp</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">objects</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Collections</span><span class=\"p\">.</span><span class=\"nn\">Generic</span><span class=\"p\">.</span><span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"kt\">obj</span><span class=\"o\">&gt;</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">mutable</span><span class=\"w\"> </span><span class=\"n\">isDisposed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">false</span>\n\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Zero</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IDisposable</span><span class=\"o\">).</span><span class=\"n\">Dispose</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Delay</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Bind</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Return</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">         </span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IDisposable</span><span class=\"o\">).</span><span class=\"n\">Dispose</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"k\">interface</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"n\">IDisposable</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">Dispose</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"ow\">not</span><span class=\"w\"> </span><span class=\"n\">isDisposed</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                </span><span class=\"n\">isDisposed</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">                </span><span class=\"n\">objects</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">Marshal</span><span class=\"p\">.</span><span class=\"n\">FinalReleaseComObject</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"o\">)</span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">cleanUp</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"w\">        </span>\n<span class=\"w\">                </span><span class=\"nn\">GC</span><span class=\"p\">.</span><span class=\"n\">Collect</span><span class=\"bp\">()</span>\n<span class=\"w\">                </span><span class=\"nn\">GC</span><span class=\"p\">.</span><span class=\"n\">WaitForPendingFinalizers</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I thought this was a fairly interesting use of the disposable pattern, by implementing it on the builder class itself. Any objects bound with let! are added to a object hashset. When Zero or Return is hit dispose is called. This also means the whole thing can be bound with the use keyword to ensure dispose really will get called even if an unhandled exception is raised. This is the simplest version - it is relatively easy to add support for combine, looping constructs and so on.</p>\n\n<p>The builder takes a parameter <em>cleanUp</em> - this is a optional function that can be passed in which will be executed on dispose. This facilitates building custom versions of the com cleanup monad, for example here is one I use for Excel.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">xlCom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// excel com cleaner that closes and frees all workbooks then quits and frees excel</span>\n<span class=\"w\">    </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">app</span><span class=\"o\">:</span><span class=\"nn\">Excel</span><span class=\"p\">.</span><span class=\"n\">Application</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">ComCleaner</span><span class=\"o\">(</span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">Workbooks</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"k\">null</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">Workbooks</span><span class=\"o\">.</span><span class=\"n\">Count</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">Workbooks</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"o\">&lt;</span><span class=\"n\">Workbook</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"o\">(</span><span class=\"k\">false</span><span class=\"o\">))</span>\n<span class=\"w\">            </span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">Quit</span><span class=\"bp\">()</span>\n<span class=\"w\">            </span><span class=\"nn\">Marshal</span><span class=\"p\">.</span><span class=\"n\">FinalReleaseComObject</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"o\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>As you can see this performs a whole shutdown of excel and forces proper cleanup of the application object. I also have a function that creates aComCleanerwith no function :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">com</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">ComCleaner</span><span class=\"o\">(</span><span class=\"n\">None</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">// com cleaner that performs no additional cleanup</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now the basic use for an entire excel data extraction looks like this</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">excelData</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">xl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">Excel</span><span class=\"p\">.</span><span class=\"n\">excelApp</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">xlc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xlCom</span><span class=\"w\"> </span><span class=\"n\">xl</span>\n<span class=\"w\">    </span><span class=\"n\">xlc</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">wb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xl</span><span class=\"o\">.</span><span class=\"n\">Workbooks</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">ws</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">Worksheets</span><span class=\"o\">.[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:?&gt;</span><span class=\"w\"> </span><span class=\"n\">Worksheet</span>\n<span class=\"w\">        </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">rows</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">Rows</span>\n<span class=\"w\">        </span><span class=\"k\">return</span>\n<span class=\"w\">            </span><span class=\"n\">rows</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"o\">&lt;</span><span class=\"n\">Range</span><span class=\"o\">&gt;</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">takeWhile</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">Cellsft</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>If you need to bind / free some stuff in one of the lambda functions then you can easily use the normal com cleaner inside like so</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">com</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\">  </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Things to be wary of are returning unevaluated sequences (obviously) and let! bindings to objects that are already in the hashset or not COM objects at all - in both cases you will get an exception but I prefer it this way as it's a good indicator you have done something very wrong! You will also need to be careful it if you need to return a COM object, you can do it but will need to not let! bind it and then make sure it is dealt with properly later on. Generally it should be avoided.</p>")) ((? . 23) f post (u . "The Erasing SQL type provider (codename John)") (? . 23) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2013/12/09/the-erasing-sql-type-provider-codename-john/index.html" . windows) (u . "/blog\\2013\\12\\09\\the-erasing-sql-type-provider-codename-john/") (u . "2013-12-09T08:31:00") (? . 22) (? . 3) (c (u . "fsharp") c (u . "type providers") c (u . "sqlprovider")) (u . "\n<p>Introducing my latest type provider, designed to query general SQL databases. This is very much an alpha cut, it is by no means feature complete, is still a mess in various areas and has only been tested on a very limited selection of databases. I will provide a brief overview of its main features and lack thereof, followed by a fairly detailed explanation of the most prominent features. There's other features not discussed here, hopefully there will be some followups to this in the coming weeks, along with some proper documentation in the github repository.</p>\n\n<h3>What the provider does</h3>\n\n<ul>\n <li>Provide an IQueryable interface over a SQL database&rsquo;s tables and views</li> \n <li>Supports the use of F# query expressions</li> \n <li>Erases types down to a common runtime type &ndash; there is no code generation here, which means you can connect it up to massive schemas</li> \n <li>The provider is designed around System.Data. The current single concrete implementation is for Microsoft SQL Server, however you can add additional providers by implementing the ISqlProvider interface and writing a bunch of code that will, on demand, extract the relevant schema data and generate a SQL query from a distilled version of the LINQ query in question &ndash; most databases will be able to use the Microsoft SQL Server implementation as a template for a solid starting point (most of the hard work has already been done). You can then select your database provider target with a static parameter.</li> \n <li>Schema exploration &ndash; instead of needing to know the database structure and constraints in order to write effective queries between objects, constraint information is displayed as relationships on entities. You can simply enumerate these, query off of them directly or use the select-many syntax. Join data is inferred for you. This makes your life way easier for both exploring unknown databases and removing the tedium of writing explicit joins everywhere.</li> \n <li>Individuals - The provider will additionally query the top x rows of each table and bring the data directly into the F# programming language. You are able to view said individuals in intellisense using your choice of column name. Once you have an individual you can use it just like any other entity including enumerating its relationships and querying from it.</li> \n <li>Basic stored procedure support. This has only just been added and is fairly weak presently, and pretty much not tested at all.</li> \n <li>Produces Highly Non-Optimised SQL &trade;</li> <!-- more--></ul>\n\n<h3>What the provider does not do (yet)</h3>\n\n<ul>\n <li>Make the tea</li>\n <li>Support updates to data</li>\n <li>Have lazy features (tip &ndash; don&rsquo;t select 100mb of data)</li>\n <li>Support any custom types or table value parameters</li>\n <li>Support OUT parameters on sprocs</li>\n <li>Have explicit support for nullable types</li>\n <li>Support grouping, System.Math functions, or outer joins (fret not though you can indeed outer join if you use the select-many syntax!)</li>\n <li>Have anything to do with Squirrels</li>\n <li>A bunch of other stuff</li></ul>\n\n<h2>But Why!</h2>\n\n<p>People from <a href=\"http://www.fsharp.org\">F#</a> land will know that there already exists an official SQL <a href=\"http://msdn.microsoft.com/en-us/library/hh156509.aspx\">type provider</a>. This begs the question, why am I crazy enough to tackle such a massive job, surely not just for the fun of it! The answer to this is several reasons, with the primary one being that the existing type provider uses SQLMetal.exe in the background to generate code. Unfortunately this means that you end up with the entire database schema in a huge amount of code files, which in extreme cases will not work at all. F# type providers give us the ability to provide <em>erased types</em>. You can think of these types as appearing to be real static types at compile-time, but at runtime they are erased down to some common type. This nets us all the benefits of static typing, with none of the overhead of the generated code - plus if the database schema changes, your program will no longer compile, in contrast to a generated code solution which would be unaware of schema changes unless the code is re-generated at every compilation, which is generally not a viable approach - and stale generated code can have disastrous consequences at runtime.</p>\n\n<p>In addition to this, the existing provider is not open source and it can only work with MS SQL Server (to my knowledge). Part of my aim with this work was to introduce an extensible and open source SQL type provider for the community which in the future can target SQL Lite, Oracle, Postgre and so on. Finally, I wanted to provide a much simpler way of navigating around an unknown database schema, which is surfaced in the ability to traverse the data based on the constraint metadata. I have spent too much time in the past having to dig around in SQL to find which tables join to what others and how, and having to explicitly provide all that information every time I write a query - only to forget it 2 months later and repeat the process. Simplifying the data access in this manner makes programming easier, faster and more maintainable.</p>\n\n<h2>First Steps</h2>\n\n<p>Once you have built the the shiny new dll from my <a href=\"https://github.com/pezipink/SqlProvider\">github</a>, you should create a new F# project and a fsx script file. You can then reference it like so</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\dropbox\\SqlProvider\\bin\\Debug\\FSharp.Data.SqlProvider.dll\"</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You might get a security dialog warning of impending doom but you can safely ignore that. The next stage is to create a type alias using a connection string.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"s\">\"Data Source=localhost;Initial Catalog=Northwind;Integrated Security=true;\"</span><span class=\"o\">&gt;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is moment of truth #1. If it blows up here with red squigglies, it&rsquo;s either a connection issue or something that I have messed up due to not being able to test it with many databases. For reference I have tested it with Northwind, both the AdventureWorks databases, and some simple databases that exist in my current place of employment. All servers were running 2008R2. I will use the Northwind schema for all examples henceforth.</p>\n\n<p>The base schema would have be generated from the connection string in the static parameter; to actually use the provider you will need to create a data context like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can pass in a runtime connection string to this method if it is different to the one in the static parameter (the static one must be constant and available at compile time)</p>\n\n<p>You will now be able to see all tables / views directly from the data context object, and also a property called Stored Procedures which is amazingly enough where the stored procs live.</p>\n\n<p>Note that I don&rsquo;t currently support any non-native sql types. For tables /views you just won&rsquo;t see those columns, and stored procs that have said types as parameters simply won&rsquo;t be generated. OUT parameters and table values types are also not supported &ndash; sprocs with those will also not appear.</p>\n\n<h2>Querying</h2>\n\n<p>At its simplest you can enumerate an entire table for all records like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">customers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>if you were to now index that array you should see strongly typed properties corresponding to the columns (and some other stuff)</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/clip_image002.jpg\"><img style=\"display: inline; border: 0px;\" title=\"clip_image002\" src=\"../../../../../img/old/clip_image002_thumb.jpg\" alt=\"clip_image002\" width=\"534\" height=\"267\" border=\"0\" /></a></p>\n\n<p>To actually query you use the query syntax as such</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">..</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I currently support the following LINQ functions; select, select many(for), join, distinct, where, take (top), exactlyOne (single), sortBy, sortByDescending, thenBy, thenByDescending</p>\n\n<p>Explicit joins look like this</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Orders]``</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CustomerID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">CustomerID</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Shippers]``</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipVia</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">ShipperID</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipName</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here the projection creates a tuple of company name and ship name; the provider supports arbitrarily complex projections, you can in theory do anything in the projection. The projection is also analysed to establish which fields to select for performance reasons &ndash; in this case the query will only select the two field names projected, if you select entire entities then it will select all their columns.</p>\n\n<p>The previous example showed an inner join. Outer joins are not currently supported in this syntax because that requires me to implement group join which is somewhat epic and I have been avoiding it wherever possible. You can however perform outer joins by using the select-many syntax. This syntax allows you to navigate around the database constraints without prior knowledge of its schema (woop!). You will see constraints (relationships) as properties of the table you are querying. You can simply &ldquo;for&rdquo; (select many) over them and the join information will be inferred for you &ndash; Intellisense will helpfully tell you the details about the relationship so you can understand which is the primary and foreign side.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Customers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Shippers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipName</span><span class=\"o\">,</span><span class=\"n\">emp</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can make these outer joins (which will perform a left or right join depending on which way around the relationship is) by using the (!!) operator before the table name.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">(!!)</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Customers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">(!!)</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Shippers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipName</span><span class=\"o\">,</span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">FirstName</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Criteria applied with where clauses can be used anywhere in the query subsequent to the relevant table identifiers being bound. Multiple where clauses in a query are AND&rsquo;d together. You should be able to use all logical operators and basic direct predicates that you would expect to work &ndash; you won&rsquo;t be able to call other functions inside a where clause though. The algorithm should be able to deal with any level of criteria complexity with multiple nested / bracketed AND / ORs. You can also use the following special operators : =% (like) &lt;&gt;% (not like) |=| (In) |&lt;&gt;| (Not In). With the In operators you must provide an inline array of options, eg [|&rdquo;John&rdquo;;&rdquo;Juan&rdquo;|] <code>fsharp\nquery{ for emp in ctx.``[dbo].[Employees]`` do\n       where (emp.Address =% \"%g%\")\n       join order in ctx.``[dbo].[Orders]`` on (emp.EmployeeID = order.EmployeeID)\n       where (emp.FirstName |=| [|\"Steven\";\"Janet\"|])\n       distinct\n       select (emp.Address, emp.FirstName + \" \" + emp.LastName, emp.BirthDate ) } |&gt; Seq.toArray</code></p>\n\n<h2>Individuals</h2>\n\n<p>If a table has a non-composite primary key, you are able to project its SQL entities directly into the IDE via its &ldquo;Individuals&rdquo; property. This will contain the first 1000 rows of the table (this is configurable via a static parameter). By default it will list them using whatever the primary key text is as such:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">nancy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Employees]``</span><span class=\"o\">.</span><span class=\"n\">Individuals</span><span class=\"o\">.</span><span class=\"n\">``1``</span><span class=\"o\">.</span><span class=\"n\">FirstName</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Obviously, with an integer as a primary key this is not very helpful in identifying / exploring the records, so instead, each column of the table has an associated property which when navigated to will re-project the individuals into Intellisense with the value of the chosen column name, eg</p>\n\n<p><img src=\"../../../../../img/old/nancy1.png\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/nancy2.png\" alt=\"\" /></p>\n\n<p>Note this will now fail to compile if someone changes Nancy&rsquo;s first name in the database! (cool huh!)</p>\n\n<p>Given any instance of a SQL entity, whether it be from an individuals property or some query, as long as it contains its primary key you can then navigate directly off the relationships used in the select many syntax (how awesome is this!) for example, you can find out Nancy&rsquo;s orders by simply doing this :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">nancy</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>this means you can defer execution of additional joins from a prior query, because you might want to only process further information on selected objects, perhaps at a much later time. Because this is creating another query behind the scenes, you can even query directly off a relationship like this</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">nancy</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">         </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">CustomerID</span><span class=\"w\"> </span><span class=\"o\">=%</span><span class=\"w\"> </span><span class=\"s\">\"V%\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>which I think we can agree is fairly awesome :)</p>\n\n<h2><strong>Stored Procs</strong></h2>\n\n<p>Sprocs have only just been added and are pretty much untested. It doesn't support complicated sprocs with multiple result sets or differing result sets depending on branching logic. It basically executes the proc with default parameters using the SchemaOnly command type, and infers a new type based on the return metadata. You will always be forced to supply all parameters even if they are optional. MS SQL Server 2012 supports some better mechanics for getting metadata about stored procedures, but I have not implemented support for those yet.</p>\n\n<h2>Final Words</h2>\n\n<p>Here&rsquo;s a final query that shows some of the other keywords for syntax reference</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Employees]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Shippers]``</span><span class=\"w\">  </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">ShipVia</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">ShipperID</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cust</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Customers</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\">  </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Order Subtotals]``</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">OrderID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">OrderID</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">LastName</span><span class=\"w\"> </span><span class=\"o\">=%</span><span class=\"w\"> </span><span class=\"s\">\"F%\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;%</span><span class=\"w\"> </span><span class=\"s\">\"%owl%\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">Subtotal</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">1629</span><span class=\"o\">.</span><span class=\"mi\">9M</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"n\">sortByDescending</span><span class=\"w\"> </span><span class=\"n\">cust</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span>\n<span class=\"w\">       </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">       </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">OrderID</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">OrderDate</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cust</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">LastName</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">Subtotal</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A word on nullable types &ndash; I do not currently support them :) what this means is that for a nullable column that has a null value, you will simply be given default of its type, with a special case for string allowing it to return string.Empty. Set phasers to null. (No nulls should be produced in the usage of this software)</p>\n\n<p>There's other stuff going on such as data binding, debugging event hooks that will show you the LINQ expressions triggering and the generated SQL that is to be executed, and various smaller things that I have probably long since forgotten about. The design is heavily based on my Dynamics CRM type provider so if you are lucky you might even find some references in the code to CRM :)</p>\n\n<p>Hopefully it doesn't immediately blow up for you, although I wouldn't be surprised given the very small amount of databases it has been tested against. The provider is large, complex, and LINQ is <em>really</em> crazy!</p>") #f (u . "\n<p>Introducing my latest type provider, designed to query general SQL databases. This is very much an alpha cut, it is by no means feature complete, is still a mess in various areas and has only been tested on a very limited selection of databases. I will provide a brief overview of its main features and lack thereof, followed by a fairly detailed explanation of the most prominent features. There's other features not discussed here, hopefully there will be some followups to this in the coming weeks, along with some proper documentation in the github repository.</p>\n\n<h3>What the provider does</h3>\n\n<ul>\n <li>Provide an IQueryable interface over a SQL database&rsquo;s tables and views</li> \n <li>Supports the use of F# query expressions</li> \n <li>Erases types down to a common runtime type &ndash; there is no code generation here, which means you can connect it up to massive schemas</li> \n <li>The provider is designed around System.Data. The current single concrete implementation is for Microsoft SQL Server, however you can add additional providers by implementing the ISqlProvider interface and writing a bunch of code that will, on demand, extract the relevant schema data and generate a SQL query from a distilled version of the LINQ query in question &ndash; most databases will be able to use the Microsoft SQL Server implementation as a template for a solid starting point (most of the hard work has already been done). You can then select your database provider target with a static parameter.</li> \n <li>Schema exploration &ndash; instead of needing to know the database structure and constraints in order to write effective queries between objects, constraint information is displayed as relationships on entities. You can simply enumerate these, query off of them directly or use the select-many syntax. Join data is inferred for you. This makes your life way easier for both exploring unknown databases and removing the tedium of writing explicit joins everywhere.</li> \n <li>Individuals - The provider will additionally query the top x rows of each table and bring the data directly into the F# programming language. You are able to view said individuals in intellisense using your choice of column name. Once you have an individual you can use it just like any other entity including enumerating its relationships and querying from it.</li> \n <li>Basic stored procedure support. This has only just been added and is fairly weak presently, and pretty much not tested at all.</li> \n <li>Produces Highly Non-Optimised SQL &trade;</li> <!-- more--></ul>\n\n<h3>What the provider does not do (yet)</h3>\n\n<ul>\n <li>Make the tea</li>\n <li>Support updates to data</li>\n <li>Have lazy features (tip &ndash; don&rsquo;t select 100mb of data)</li>\n <li>Support any custom types or table value parameters</li>\n <li>Support OUT parameters on sprocs</li>\n <li>Have explicit support for nullable types</li>\n <li>Support grouping, System.Math functions, or outer joins (fret not though you can indeed outer join if you use the select-many syntax!)</li>\n <li>Have anything to do with Squirrels</li>\n <li>A bunch of other stuff</li></ul>\n\n<h2>But Why!</h2>\n\n<p>People from <a href=\"http://www.fsharp.org\">F#</a> land will know that there already exists an official SQL <a href=\"http://msdn.microsoft.com/en-us/library/hh156509.aspx\">type provider</a>. This begs the question, why am I crazy enough to tackle such a massive job, surely not just for the fun of it! The answer to this is several reasons, with the primary one being that the existing type provider uses SQLMetal.exe in the background to generate code. Unfortunately this means that you end up with the entire database schema in a huge amount of code files, which in extreme cases will not work at all. F# type providers give us the ability to provide <em>erased types</em>. You can think of these types as appearing to be real static types at compile-time, but at runtime they are erased down to some common type. This nets us all the benefits of static typing, with none of the overhead of the generated code - plus if the database schema changes, your program will no longer compile, in contrast to a generated code solution which would be unaware of schema changes unless the code is re-generated at every compilation, which is generally not a viable approach - and stale generated code can have disastrous consequences at runtime.</p>\n\n<p>In addition to this, the existing provider is not open source and it can only work with MS SQL Server (to my knowledge). Part of my aim with this work was to introduce an extensible and open source SQL type provider for the community which in the future can target SQL Lite, Oracle, Postgre and so on. Finally, I wanted to provide a much simpler way of navigating around an unknown database schema, which is surfaced in the ability to traverse the data based on the constraint metadata. I have spent too much time in the past having to dig around in SQL to find which tables join to what others and how, and having to explicitly provide all that information every time I write a query - only to forget it 2 months later and repeat the process. Simplifying the data access in this manner makes programming easier, faster and more maintainable.</p>\n\n<h2>First Steps</h2>\n\n<p>Once you have built the the shiny new dll from my <a href=\"https://github.com/pezipink/SqlProvider\">github</a>, you should create a new F# project and a fsx script file. You can then reference it like so</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\dropbox\\SqlProvider\\bin\\Debug\\FSharp.Data.SqlProvider.dll\"</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You might get a security dialog warning of impending doom but you can safely ignore that. The next stage is to create a type alias using a connection string.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"s\">\"Data Source=localhost;Initial Catalog=Northwind;Integrated Security=true;\"</span><span class=\"o\">&gt;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is moment of truth #1. If it blows up here with red squigglies, it&rsquo;s either a connection issue or something that I have messed up due to not being able to test it with many databases. For reference I have tested it with Northwind, both the AdventureWorks databases, and some simple databases that exist in my current place of employment. All servers were running 2008R2. I will use the Northwind schema for all examples henceforth.</p>\n\n<p>The base schema would have be generated from the connection string in the static parameter; to actually use the provider you will need to create a data context like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can pass in a runtime connection string to this method if it is different to the one in the static parameter (the static one must be constant and available at compile time)</p>\n\n<p>You will now be able to see all tables / views directly from the data context object, and also a property called Stored Procedures which is amazingly enough where the stored procs live.</p>\n\n<p>Note that I don&rsquo;t currently support any non-native sql types. For tables /views you just won&rsquo;t see those columns, and stored procs that have said types as parameters simply won&rsquo;t be generated. OUT parameters and table values types are also not supported &ndash; sprocs with those will also not appear.</p>\n\n<h2>Querying</h2>\n\n<p>At its simplest you can enumerate an entire table for all records like so:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">customers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>if you were to now index that array you should see strongly typed properties corresponding to the columns (and some other stuff)</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/clip_image002.jpg\"><img style=\"display: inline; border: 0px;\" title=\"clip_image002\" src=\"../../../../../img/old/clip_image002_thumb.jpg\" alt=\"clip_image002\" width=\"534\" height=\"267\" border=\"0\" /></a></p>\n\n<p>To actually query you use the query syntax as such</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">..</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I currently support the following LINQ functions; select, select many(for), join, distinct, where, take (top), exactlyOne (single), sortBy, sortByDescending, thenBy, thenByDescending</p>\n\n<p>Explicit joins look like this</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Orders]``</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CustomerID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">CustomerID</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Shippers]``</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipVia</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">ShipperID</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipName</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here the projection creates a tuple of company name and ship name; the provider supports arbitrarily complex projections, you can in theory do anything in the projection. The projection is also analysed to establish which fields to select for performance reasons &ndash; in this case the query will only select the two field names projected, if you select entire entities then it will select all their columns.</p>\n\n<p>The previous example showed an inner join. Outer joins are not currently supported in this syntax because that requires me to implement group join which is somewhat epic and I have been avoiding it wherever possible. You can however perform outer joins by using the select-many syntax. This syntax allows you to navigate around the database constraints without prior knowledge of its schema (woop!). You will see constraints (relationships) as properties of the table you are querying. You can simply &ldquo;for&rdquo; (select many) over them and the join information will be inferred for you &ndash; Intellisense will helpfully tell you the details about the relationship so you can understand which is the primary and foreign side.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Customers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Shippers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipName</span><span class=\"o\">,</span><span class=\"n\">emp</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can make these outer joins (which will perform a left or right join depending on which way around the relationship is) by using the (!!) operator before the table name.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Customers]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">(!!)</span><span class=\"w\"> </span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Customers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">(!!)</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Shippers</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cus</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"n\">ord</span><span class=\"o\">.</span><span class=\"n\">ShipName</span><span class=\"o\">,</span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">FirstName</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Criteria applied with where clauses can be used anywhere in the query subsequent to the relevant table identifiers being bound. Multiple where clauses in a query are AND&rsquo;d together. You should be able to use all logical operators and basic direct predicates that you would expect to work &ndash; you won&rsquo;t be able to call other functions inside a where clause though. The algorithm should be able to deal with any level of criteria complexity with multiple nested / bracketed AND / ORs. You can also use the following special operators : =% (like) &lt;&gt;% (not like) |=| (In) |&lt;&gt;| (Not In). With the In operators you must provide an inline array of options, eg [|&rdquo;John&rdquo;;&rdquo;Juan&rdquo;|] <code>fsharp\nquery{ for emp in ctx.``[dbo].[Employees]`` do\n       where (emp.Address =% \"%g%\")\n       join order in ctx.``[dbo].[Orders]`` on (emp.EmployeeID = order.EmployeeID)\n       where (emp.FirstName |=| [|\"Steven\";\"Janet\"|])\n       distinct\n       select (emp.Address, emp.FirstName + \" \" + emp.LastName, emp.BirthDate ) } |&gt; Seq.toArray</code></p>\n\n<h2>Individuals</h2>\n\n<p>If a table has a non-composite primary key, you are able to project its SQL entities directly into the IDE via its &ldquo;Individuals&rdquo; property. This will contain the first 1000 rows of the table (this is configurable via a static parameter). By default it will list them using whatever the primary key text is as such:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">nancy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Employees]``</span><span class=\"o\">.</span><span class=\"n\">Individuals</span><span class=\"o\">.</span><span class=\"n\">``1``</span><span class=\"o\">.</span><span class=\"n\">FirstName</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Obviously, with an integer as a primary key this is not very helpful in identifying / exploring the records, so instead, each column of the table has an associated property which when navigated to will re-project the individuals into Intellisense with the value of the chosen column name, eg</p>\n\n<p><img src=\"../../../../../img/old/nancy1.png\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/nancy2.png\" alt=\"\" /></p>\n\n<p>Note this will now fail to compile if someone changes Nancy&rsquo;s first name in the database! (cool huh!)</p>\n\n<p>Given any instance of a SQL entity, whether it be from an individuals property or some query, as long as it contains its primary key you can then navigate directly off the relationships used in the select many syntax (how awesome is this!) for example, you can find out Nancy&rsquo;s orders by simply doing this :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">nancy</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>this means you can defer execution of additional joins from a prior query, because you might want to only process further information on selected objects, perhaps at a much later time. Because this is creating another query behind the scenes, you can even query directly off a relationship like this</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">nancy</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">         </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">CustomerID</span><span class=\"w\"> </span><span class=\"o\">=%</span><span class=\"w\"> </span><span class=\"s\">\"V%\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>which I think we can agree is fairly awesome :)</p>\n\n<h2><strong>Stored Procs</strong></h2>\n\n<p>Sprocs have only just been added and are pretty much untested. It doesn't support complicated sprocs with multiple result sets or differing result sets depending on branching logic. It basically executes the proc with default parameters using the SchemaOnly command type, and infers a new type based on the return metadata. You will always be forced to supply all parameters even if they are optional. MS SQL Server 2012 supports some better mechanics for getting metadata about stored procedures, but I have not implemented support for those yet.</p>\n\n<h2>Final Words</h2>\n\n<p>Here&rsquo;s a final query that shows some of the other keywords for syntax reference</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">query</span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Employees]``</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Employees</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Shippers]``</span><span class=\"w\">  </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">ShipVia</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">ShipperID</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cust</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">FK_Orders_Customers</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"n\">join</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\">  </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Order Subtotals]``</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">OrderID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">OrderID</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">LastName</span><span class=\"w\"> </span><span class=\"o\">=%</span><span class=\"w\"> </span><span class=\"s\">\"F%\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;%</span><span class=\"w\"> </span><span class=\"s\">\"%owl%\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">Subtotal</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">1629</span><span class=\"o\">.</span><span class=\"mi\">9M</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"n\">sortByDescending</span><span class=\"w\"> </span><span class=\"n\">cust</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span>\n<span class=\"w\">       </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">       </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">OrderID</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">OrderDate</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cust</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">LastName</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">CompanyName</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">Subtotal</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A word on nullable types &ndash; I do not currently support them :) what this means is that for a nullable column that has a null value, you will simply be given default of its type, with a special case for string allowing it to return string.Empty. Set phasers to null. (No nulls should be produced in the usage of this software)</p>\n\n<p>There's other stuff going on such as data binding, debugging event hooks that will show you the LINQ expressions triggering and the generated SQL that is to be executed, and various smaller things that I have probably long since forgotten about. The design is heavily based on my Dynamics CRM type provider so if you are lucky you might even find some references in the code to CRM :)</p>\n\n<p>Hopefully it doesn't immediately blow up for you, although I wouldn't be surprised given the very small amount of databases it has been tested against. The provider is large, complex, and LINQ is <em>really</em> crazy!</p>")) ((? . 36) f post (u . "John - The Birth!") (? . 36) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2009/07/14/john-the-birth/index.html" . windows) (u . "/blog\\2009\\07\\14\\john-the-birth/") (u . "2009-07-14T17:19:00") (? . 39) (? . 33) (c (u . "robotics") c (u . "electronics")) (u . "\n<p>\n <br />For my latest project, I've decided to make a tracked robot, cunningly named John. Tracks are really cool, and something I've not had on a robot before. Nice perhaps, but tedious to make, as hooking together 40+ segments of track with impossible to fasten pins makes for a pretty boring/annoying task..\n <br />\n <br />Anyways, so far I have the chassis built, tracks built and motors in. He's looking cool so far, like the bottom of a mini Johnny 5 :)\n <br />\n <br />The chassis is made from laser cut Lexan panels, with aluminium brackets. The tracks are heavy duty polypropylene and rubber, along with 7.2v 50:1 geared motors.\n <br />\n <br />Obviously, at this stage, he does pretty much bugger all. In order for him to even move I've still got to fit a motor controller and a cpu, plus write all the inital movement routines. I intend to use a BASIC Stamp 2 for the brains at the moment, but will switch it over to the Propeller when I've got one.\n <br />\n <br />Here be some initial pics:</p>\n\n<p><img src=\"../../../../../img/old/john-2.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/john-1.jpg\" alt=\"\" /></p>\n\n<p></p>\n\n<p><img src=\"../../../../../img/old/john-3.jpg\" alt=\"\" /></p>\n\n<p>\n <br />And here's a picture of an airborne cat:</p>\n\n<p><img src=\"../../../../../img/old/12752022_0e679f5665_m.jpg\" alt=\"\" /></p>") #t (u . "\n<p>\n <br />For my latest project, I've decided to make a tracked robot, cunningly named John. Tracks are really cool, and something I've not had on a robot before. Nice perhaps, but tedious to make, as hooking together 40+ segments of track with impossible to fasten pins makes for a pretty boring/annoying task..\n <br />\n <br />Anyways, so far I have the chassis built, tracks built and motors in. He's looking cool so far, like the bottom of a mini Johnny 5 :)\n <br />\n <br />The chassis is made from laser cut Lexan panels, with aluminium brackets. The tracks are heavy duty polypropylene and rubber, along with 7.2v 50:1 geared motors.\n <br />\n <br />Obviously, at this stage, he does pretty much bugger all. In order for him to even move I've still got to fit a motor controller and a cpu, plus write all the inital movement routines. I intend to use a BASIC Stamp 2 for the brains at the moment, but will switch it over to the Propeller when I've got one.\n <br />\n <br />Here be some initial pics:</p>\n\n<p><img src=\"../../../../../img/old/john-2.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/john-1.jpg\" alt=\"\" /></p>\n\n<p></p>\n\n<p><img src=\"../../../../../img/old/john-3.jpg\" alt=\"\" /></p>\n\n<p>\n <br />And here's a picture of an airborne cat:</p>\n\n<p><img src=\"../../../../../img/old/12752022_0e679f5665_m.jpg\" alt=\"\" /></p>\n<!-- more-->")) ((? . 37) f post (u . "Reversing - Kreker_V2.exe") (? . 37) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2019/07/21/reversing-kreker-v2-exe/index.html" . windows) (u . "/blog\\2019\\07\\21\\reversing-kreker-v2-exe/") (u . "2019-07-21T00:29:27") (? . 38) (? . 15) (c (u . "cracking") c (u . "reverse engineering")) (u . "\n<p>In this article we&rsquo;ll look at another crackme. This one was pretty difficult and has a bunch of cool stuff in it, including the injection and execution of obfsucated code into another process.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>") #t (u . "\n<p>In this article we&rsquo;ll look at another crackme. This one was pretty difficult and has a bunch of cool stuff in it, including the injection and execution of obfsucated code into another process.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n<!-- more-->\n\n<h2 id=\"crackme\">Crackme</h2>\n\n<p>The crackme in question <a href=\"https://crackmes.one/crackme/5c78df5533c5d4776a837d78\">is this one</a>, so stop reading now if you want to give it a go yourself!</p>\n\n<p>The crackme asks you to find the serial and / or patch the program.</p>\n\n<p>Initial analysis shows a C++ console program that asks for a password on the command line. It then displays a message box with the text &ldquo;Lose!!&rdquo;.</p>\n\n<h2 id=\"first-impressions\">First Impressions</h2>\n\n<p>With a bit of digging it is fairly easy to find the location where <code>cin</code> is being called. It reads numeric characters and stores the result at the hardcoded memory address of <code>406410</code>. Looking at the imported symbols at this point yields the following (well, some of it):</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>There are some potentially interesting functions imported from kernel32.dll, perhaps used for some anti-debugging. We can also find the call that shows the message box fairly easily:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>We can see that the message box string pointer is hardcoded to <code>406408</code>, and indeed pausing execution whilst looking at the memory shows the &ldquo;Lose!!&rdquo; text. Looking around at the surrounding code doesn&rsquo;t yield any obvious serial checks. Although both the message box string address and the user&rsquo;s input address are hardcoded, a search for code accessing either of those memory locations comes up with nothing. Instead, we can try to set a hardware breakpoint on those bits of memory to trigger when they are written to or read from, hopefully leading us to somewhere related to the serial checking.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/4.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Unfortunately, the hardware breakpoints do not seem to trigger anything! There are a few techniques to deal with hardware breakpoints, and looking at the special registers DR0&ndash;7 we can see the breakpoint is still in there - it seems the program is not detecting and removing them&hellip;</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/5.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"the-mystery-continues\">The Mystery Continues</h2>\n\n<p>Let&rsquo;s have a look at the first part of the function that is called after the password is entered:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/6.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>It seems to be loading lots of big hardcoded numbers into the floating point registers (xmm), copying them onto the stack and then looping around XORing them with stuff. XORing things is often a sign of decryption, so if we let the first loops run and then look at the stack in the memory dump we will see something interesting revealed &hellip;</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/7.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>&ldquo;kernel32.dll&rdquo; and &ldquo;GetProcessId&rdquo; strings - the name of a win32 library and function. Presumably the program is going to try and use this string with <code>GetProcAddress</code> and then call it. The strings are passed to a function that is a bit long to show here, but it does NOT use <code>GetProcAddress</code>! Instead, it implements its own version of it.</p>\n\n<p>First, it discovers the base module address of kernel32.dll. It does this by navigating through the Thread Information Block, always stored at <code>fs:[0]</code>. From there, it navigates to the Process Information Block, then the Loader Data, and finally to a doubly linked list InMemoryOrderModule. The third entry in here is always kernel32.dll. Here&rsquo;s the code, annotated for your viewing pleasure:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/8.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Now it has a handle to the base of the module, it can locate and search the module&rsquo;s function export table to locate a given function. It is too much code to show here, but essentially there is a function that:</p>\n\n<ul>\n <li>Takes a library name and function name</li>\n <li>Takes arguments for the function</li>\n <li>Finds the kernel32.dll base module handle (as above)</li>\n <li>Walks the export table to find LoadLibraryW in kernel32.dll</li>\n <li>Calls LoadLibraryW with the passed library name (even if it is also kernel32.dll)</li>\n <li>Walks the export table of the returned module to find the passed function name</li>\n <li>Calls the function with the given arguments</li></ul>\n\n<p>This is quite a sneaky piece of code since it avoids most of the normal methods of detecting libraries and functions that are dynamically loaded.</p>\n\n<p>With all this in place, the original piece of decrypted data was trying to call <code>GetProcessId</code>. It mysteriously hangs onto this id for quite some time whilst it busily decrypts a whole bunch more stuff. This time it is not a string - it looks more like opcode data - but we&rsquo;ll come back to that shortly. It writes the retrieved process id into a particular location within the decrypted data.</p>\n\n<p>The dynamic execute function is then used to do a bunch more stuff:</p>\n\n<ul>\n <li>Calls <code>SHGetSpecialFolderPath</code> in Shell32.dll, returning c:\\windows\\syswow64</li>\n <li>Calls <code>CreateProcess</code> appending <code>notepad.exe</code> to the above system path</li>\n <li>Calls <code>VirtualAllocEx</code>, creating some heap memory in the new notepad process</li>\n <li>Calls <code>WriteProcessMemory</code>, copying a block of data into the new heap memory (more on this in a moment)</li>\n <li>Some calls to <code>GetThreadContext</code> and <code>SetThreadContext</code>, causing the block of data to be executed</li>\n <li>Some cleanup code, closing handles</li></ul>\n\n<h2 id=\"the-injected-data\">The Injected Data</h2>\n\n<p>Let&rsquo;s have a look at the block of data that is copied into notepad.exe and executed. It is a simple matter to pause before the function is executed and note the start address and length parameters of the data to be copied</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/9.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here we can see the location of the data is <code>19FB68</code> of <code>340</code> length.</p>\n\n<p>If we view this in the disassembler we will see a decrypted program appear. It is a bit too long to list here, in essence it has some machinery similar to the parent program that allows it to locate kernel32.dll and find functions by their names. It calls a bunch of functions, which are dynamically executed much like in the parent process. In particular, they are:</p>\n\n<ul>\n <li><code>OpenProcess</code></li>\n <li><code>ReadProcessMemory</code></li>\n <li><code>WriteProcessMemory</code></li>\n <li><code>ExitProcess</code></li></ul>\n\n<p>Can you guess what it does? The process id from the parent earlier was written into this program. It opens the parent process, and reads the area of memory where the password was entered from <code>cin</code>. Because <code>ReadProcessMemory</code> is in another process, our hardware breakpoint does not trigger (I think!). It then performs a serial check and finally writes a result back to the parent process&rsquo; memory, in the location where the message box will read its text from, again not triggering our breakpoint. Let&rsquo;s look at a bit of it:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/10.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here you can see the actual serial check - it is simply the hardcoded number of <code>23D4</code>!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This was a really cool crackme, and was pretty tough! The author put in a lot of effort in order to obfsucate a simple hardcoded serial number. Sneaky tricks abound, I particularly like the program injection and writing back into the parent&rsquo;s memory.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse3/11.png\" alt=\"\" />\n <p class=\"caption\"></p></div>")) ((? . 39) f post (u . "John - Meeting Nintendo!") (? . 39) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2009/07/14/john-meeting-nintendo/index.html" . windows) (u . "/blog\\2009\\07\\14\\john-meeting-nintendo/") (u . "2009-07-14T02:25:00") (? . 40) (? . 36) (c (u . "electronics") c (u . "robotics")) (u . "\n<p>\n <br />I had today off work so I thought I'd work on something for John which doesn't require drastic hardware changes (ie trying to mount sensors near the front of the tracks) so I have decided to pursue some remote control for John using an ancient NES pad:</p>\n\n<p><img src=\"../../../../../img/old/nes_pad.jpg\" alt=\"\" />\n <br />\n <br />This kind of pulls away somewhat from full robotics, whereby the robot does everything on its own with no human input. This will be fun however, and I might learn something - sounds good to me. The first steps I took were to establish how the NES pad works exactly. I already know a bit about this from where I was going to use the pad for another project ages ago. Anyways just for fun I took the pad apart, to be presented with just one IC! (gone are the days of simple electronics eh)</p>\n\n<p><img src=\"../../../../../img/old/nes_pad_inside.jpg\" alt=\"\" /> <!-- more--> \n <br />\n <br />A rubbish picture I know, that's what you get for using a phone as a camera. Anyway that single IC is a 4021 shift register, a common device that takes parallel inputs and then can be commanded to shift each value out serially. This has a huge benefit, as in order to monitor 8 inputs (the NES has 8 buttons, A, B, Start, Select, Up, Down, Left Right) it would take a whopping 8 IO lines! The shift register effectively cuts this down to just three IO lines to be able to monitor all eight buttons. The downside is that it's relatively slow in the electronics world, but it's easily fast enough for occasional polling.\n <br />\n <br />In order to operate the register, you must of course provide it power and ground from the logic supply, and then you should be concerned with three pins, LATCH, CLOCK and DATA. Basically the DATA line will contain 0 or 1 that indicates the state of the current button (where LOW indicates button pressed). In order to cycle through the buttons, the LATCH line must be held low, and then each successive HIGH pulse on the CLOCK line will shift the next bit out onto the DATA line. Once this is repeated 7 times (DATA always holds the first value - the first CLOCK moves onto bit 2) LATCH is set HIGH again and the chip resets back to bit 0 on the DATA line again. As I said above the controller has 8 buttons which is perfect for a shift register as it the total button state can be represented in exactly a byte.\n <br />\n <br />In order to verify this behaviour I setup a test circuit to work out which button appears at which point in the shift sequence. Thankfully I have a diagram that shows how the pins on the controller connector are mapped to the IC:</p>\n\n<p><img src=\"../../../../../img/old/nes_pinout.jpg\" alt=\"\" /></p>\n\n<p>\n <br />With that I knocked up a simple circuit that can be used to poll the state of the buttons. For this I have a LED on the DATA line to show the output, and the CLOCK and LATCH lines are hooked to ground through a push button. The resistors on these two lines are known as pull-up resistors, they basically always ensure that the line</p>\n\n<p><img src=\"../../../../../img/old/nes_test_circuit.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/nes_test_sch.jpg\" alt=\"\" /></p>\n\n<p>is HIGH by default and prevents any noise or \"floating\" inputs. When a button is pressed the line is pulled to LOW.</p>\n\n<p>\n <br />Now, bearing in mind that the DATA line will always show the output of bit 0 even when the latch is HIGH, I quickly determined that bit 0 was button A, as pressing A made the LED switch off. Now, whilst holding the LATCH button, pressing the CLOCK button cycled through the button states. I held down the different buttons on the pad and cycled through to establish the buttons states were in the following order:\n <br />\n <br />0 - A\n <br />1 - B\n <br />2 - Select</p>\n\n<p>3 - Start\n <br />4 - Up\n <br />5 - Down\n <br />6 - Left\n <br />7 - Right</p>\n\n<p>\n <br />Nice! Phase two was to attempt to read this data in from the micro-controller (a basic STAMP 2). I modified the circuit so the DATA, LATCH and CLOCK lines were hooked up to BS2 instead of buttons / a LED.</p>\n\n<p><img src=\"../../../../../img/old/nes_bs2_test_sch.jpg\" alt=\"\" />\n <br />\n <br />The BS2 already has a nice function to read serial data in from external devices called SHIFTIN. This asks for a data and clock pin, and a variable with which to read the data into. Therefore the only thing I need to worry about is controlling the LATCH line which is very straightforward. I used the following simple program to read the button states in and display them in the debug terminal. Note that all inputs are HIGH by default and LOW when a button is pressed - this logic is a bit backward when coding so I XOR the result with 11111111 to produce a byte where a bit value of 1 means that button is pressed.\n <br />\n <br />' {$STAMP BS2}\n <br />' {$PBASIC 2.5} \n <br />DAT PIN 3 \n <br />CLOCK PIN 1</p>\n\n<p>LATCH PIN 2\n <br />\n <br />joyinput VAR Byte\n <br />\n <br />Main:\n <br />\n <br />'Attempt to r</p>\n\n<p>ead the contents on the shift register in\n <br />\n <br />LOW LATCH\n <br />\n <br />SHIFTIN DAT, CLOCK, MSBPRE, [joyinput]\n <br />\n <br />HIGH LATCH</p>\n\n<p>\n <br />'XOR the output to invert the bits\n <br />\n <br />joyinput = joyinput ^ %11111111</p>\n\n<p>\n <br />'Show results</p>\n\n<p>\n <br />DEBUG BIN8 joyinput\n <br />\n <br />PAUSE 100\n <br />\n <br />GOTO Main\n <br />\n <br />This worked very nicely, an example of output when button A and up are pressed is 10001000 as expected. I will be using the RF transmitter / receiver mentioned in a previous post to transmit this data to John for processing. Ideally I think I would have the NES circuit work out which direction to go and then send a nibble with a value in it indicating what's going on. This way it halves the amount of data being sent and eases up on some of the processing for John. For this test however I will just send the whole byte and have John do the processing.</p>\n\n<p>\n <br />What I want is for up / down to go forward and backward, left / right pivot left and right, and diagonal up/right up/left to turn right/left respectively. I'm not going to bother with backwards movement and turning for now. Button A will increase John's speed through Cautious, Cruise and Max, whilst button B does the reverse, and steps back through the speeds. Sending no movement commands will cause the movement to stop. For this to work properly certain states need a higher precedence, ie diagonally up/right should be checked before right on its own or up on its own, and if found then the others should not be checked. The other concern is that of the buttons - I'm sending radio pulses every 100ms, and when I press the button I want it to fire once and only once until I have let go of the button and pressed it again. One final precaution is to prevent any noise or rubbish data from suddenly making John do stuff I didn't ask - this is easily implemented by requiring two identical bytes to be recieved in sucession before acting on them.</p>\n\n<p>\n <br />All being said and done I now have a new version John's program that accepts a RF signal, then uses some bit masking to determine what the command was, which is then executed. I have also now added the output from the NES controller to be displayed across 8 of the LEDs in the development board. This is because the connection from the NES plug to the board is not very good (a few bits of wire), and can need some wiggling about when moved to get working properly. The LEDs act as real time debugging so I can see the circuit is working as it should be whilst away from the PC.\n <br />\n <br />Full schematics for John as it stands, and the NES controller:</p>\n\n<p><img src=\"../../../../../img/old/nes_sch.jpg\" alt=\"\" /></p>\n\n<p>NES</p>\n\n<p><img src=\"../../../../../img/old/nes_full.jpg\" alt=\"\" /></p>\n\n<p>\n <br />John\n <br />\n <br />I will post a video at some point. Happy to report John is working remotely via the NES pad - very cool! A nice use for a poor pad that thought it would never be used again -worth the &pound;1.50 it cost me from Gamestation :)</p>\n\n<p><a href=\"/blogengine/file.axd?file=2009%2f7%2fjohn_rf.doc\">john_rf.doc (48.50 kb)</a></p>") #f (u . "\n<p>\n <br />I had today off work so I thought I'd work on something for John which doesn't require drastic hardware changes (ie trying to mount sensors near the front of the tracks) so I have decided to pursue some remote control for John using an ancient NES pad:</p>\n\n<p><img src=\"../../../../../img/old/nes_pad.jpg\" alt=\"\" />\n <br />\n <br />This kind of pulls away somewhat from full robotics, whereby the robot does everything on its own with no human input. This will be fun however, and I might learn something - sounds good to me. The first steps I took were to establish how the NES pad works exactly. I already know a bit about this from where I was going to use the pad for another project ages ago. Anyways just for fun I took the pad apart, to be presented with just one IC! (gone are the days of simple electronics eh)</p>\n\n<p><img src=\"../../../../../img/old/nes_pad_inside.jpg\" alt=\"\" /> <!-- more--> \n <br />\n <br />A rubbish picture I know, that's what you get for using a phone as a camera. Anyway that single IC is a 4021 shift register, a common device that takes parallel inputs and then can be commanded to shift each value out serially. This has a huge benefit, as in order to monitor 8 inputs (the NES has 8 buttons, A, B, Start, Select, Up, Down, Left Right) it would take a whopping 8 IO lines! The shift register effectively cuts this down to just three IO lines to be able to monitor all eight buttons. The downside is that it's relatively slow in the electronics world, but it's easily fast enough for occasional polling.\n <br />\n <br />In order to operate the register, you must of course provide it power and ground from the logic supply, and then you should be concerned with three pins, LATCH, CLOCK and DATA. Basically the DATA line will contain 0 or 1 that indicates the state of the current button (where LOW indicates button pressed). In order to cycle through the buttons, the LATCH line must be held low, and then each successive HIGH pulse on the CLOCK line will shift the next bit out onto the DATA line. Once this is repeated 7 times (DATA always holds the first value - the first CLOCK moves onto bit 2) LATCH is set HIGH again and the chip resets back to bit 0 on the DATA line again. As I said above the controller has 8 buttons which is perfect for a shift register as it the total button state can be represented in exactly a byte.\n <br />\n <br />In order to verify this behaviour I setup a test circuit to work out which button appears at which point in the shift sequence. Thankfully I have a diagram that shows how the pins on the controller connector are mapped to the IC:</p>\n\n<p><img src=\"../../../../../img/old/nes_pinout.jpg\" alt=\"\" /></p>\n\n<p>\n <br />With that I knocked up a simple circuit that can be used to poll the state of the buttons. For this I have a LED on the DATA line to show the output, and the CLOCK and LATCH lines are hooked to ground through a push button. The resistors on these two lines are known as pull-up resistors, they basically always ensure that the line</p>\n\n<p><img src=\"../../../../../img/old/nes_test_circuit.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/nes_test_sch.jpg\" alt=\"\" /></p>\n\n<p>is HIGH by default and prevents any noise or \"floating\" inputs. When a button is pressed the line is pulled to LOW.</p>\n\n<p>\n <br />Now, bearing in mind that the DATA line will always show the output of bit 0 even when the latch is HIGH, I quickly determined that bit 0 was button A, as pressing A made the LED switch off. Now, whilst holding the LATCH button, pressing the CLOCK button cycled through the button states. I held down the different buttons on the pad and cycled through to establish the buttons states were in the following order:\n <br />\n <br />0 - A\n <br />1 - B\n <br />2 - Select</p>\n\n<p>3 - Start\n <br />4 - Up\n <br />5 - Down\n <br />6 - Left\n <br />7 - Right</p>\n\n<p>\n <br />Nice! Phase two was to attempt to read this data in from the micro-controller (a basic STAMP 2). I modified the circuit so the DATA, LATCH and CLOCK lines were hooked up to BS2 instead of buttons / a LED.</p>\n\n<p><img src=\"../../../../../img/old/nes_bs2_test_sch.jpg\" alt=\"\" />\n <br />\n <br />The BS2 already has a nice function to read serial data in from external devices called SHIFTIN. This asks for a data and clock pin, and a variable with which to read the data into. Therefore the only thing I need to worry about is controlling the LATCH line which is very straightforward. I used the following simple program to read the button states in and display them in the debug terminal. Note that all inputs are HIGH by default and LOW when a button is pressed - this logic is a bit backward when coding so I XOR the result with 11111111 to produce a byte where a bit value of 1 means that button is pressed.\n <br />\n <br />' {$STAMP BS2}\n <br />' {$PBASIC 2.5} \n <br />DAT PIN 3 \n <br />CLOCK PIN 1</p>\n\n<p>LATCH PIN 2\n <br />\n <br />joyinput VAR Byte\n <br />\n <br />Main:\n <br />\n <br />'Attempt to r</p>\n\n<p>ead the contents on the shift register in\n <br />\n <br />LOW LATCH\n <br />\n <br />SHIFTIN DAT, CLOCK, MSBPRE, [joyinput]\n <br />\n <br />HIGH LATCH</p>\n\n<p>\n <br />'XOR the output to invert the bits\n <br />\n <br />joyinput = joyinput ^ %11111111</p>\n\n<p>\n <br />'Show results</p>\n\n<p>\n <br />DEBUG BIN8 joyinput\n <br />\n <br />PAUSE 100\n <br />\n <br />GOTO Main\n <br />\n <br />This worked very nicely, an example of output when button A and up are pressed is 10001000 as expected. I will be using the RF transmitter / receiver mentioned in a previous post to transmit this data to John for processing. Ideally I think I would have the NES circuit work out which direction to go and then send a nibble with a value in it indicating what's going on. This way it halves the amount of data being sent and eases up on some of the processing for John. For this test however I will just send the whole byte and have John do the processing.</p>\n\n<p>\n <br />What I want is for up / down to go forward and backward, left / right pivot left and right, and diagonal up/right up/left to turn right/left respectively. I'm not going to bother with backwards movement and turning for now. Button A will increase John's speed through Cautious, Cruise and Max, whilst button B does the reverse, and steps back through the speeds. Sending no movement commands will cause the movement to stop. For this to work properly certain states need a higher precedence, ie diagonally up/right should be checked before right on its own or up on its own, and if found then the others should not be checked. The other concern is that of the buttons - I'm sending radio pulses every 100ms, and when I press the button I want it to fire once and only once until I have let go of the button and pressed it again. One final precaution is to prevent any noise or rubbish data from suddenly making John do stuff I didn't ask - this is easily implemented by requiring two identical bytes to be recieved in sucession before acting on them.</p>\n\n<p>\n <br />All being said and done I now have a new version John's program that accepts a RF signal, then uses some bit masking to determine what the command was, which is then executed. I have also now added the output from the NES controller to be displayed across 8 of the LEDs in the development board. This is because the connection from the NES plug to the board is not very good (a few bits of wire), and can need some wiggling about when moved to get working properly. The LEDs act as real time debugging so I can see the circuit is working as it should be whilst away from the PC.\n <br />\n <br />Full schematics for John as it stands, and the NES controller:</p>\n\n<p><img src=\"../../../../../img/old/nes_sch.jpg\" alt=\"\" /></p>\n\n<p>NES</p>\n\n<p><img src=\"../../../../../img/old/nes_full.jpg\" alt=\"\" /></p>\n\n<p>\n <br />John\n <br />\n <br />I will post a video at some point. Happy to report John is working remotely via the NES pad - very cool! A nice use for a poor pad that thought it would never be used again -worth the &pound;1.50 it cost me from Gamestation :)</p>\n\n<p><a href=\"/blogengine/file.axd?file=2009%2f7%2fjohn_rf.doc\">john_rf.doc (48.50 kb)</a></p>")) ((? . 40) f post (u . "John - Some Basics") (? . 40) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2009/07/14/john-some-basics/index.html" . windows) (u . "/blog\\2009\\07\\14\\john-some-basics/") (u . "2009-07-14T01:32:00") #f (? . 39) (c (u . "electronics") c (u . "robotics")) (u . "\n<p>\n <br />\n <br />Right it's been a little while since my last post, but John is now alive and functional, albeit with some drawbacks for the moment. Here's a few pics I took a minute ago of John as he stands:</p>\n\n<p><img src=\"../../../../../img/old/john_front.jpg\" alt=\"\" /></p>\n\n<p>\n <br />\n <br />In this next one you can just about see the motor controller board - it's sitting on the lower level</p>\n\n<p><img src=\"../../../../../img/old/john_back.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/john_front_high.jpg\" alt=\"\" /> <!-- more--> \n <br />\n <br />The brain is that of a BASIC STAMP 2 from Parallax (which is actually a PIC with some extra hardware to provide a easier interface to program), I'm using the board from my Toddler robot as I only have two stamps, and the other one is in my development board. The toddler board is great because it has a surface mount BS2, a prototype area (breadboard), several servo connections mapped internally to the stamp's IO pins, a reset button, three way power switch allowing you to not provide power to the servo connectors, and a programming connector (serial cable - rs232) all on one small board. Unfortunately the toddler takes a +6v supply which is then regulated to 5v within the stamp itself, leaving both +6v and +5v on different headers. Usually the 6v comes from the 3xAA battery holder in the toddler, I don't want to use that though so for now I've got my own 5v regulator on the toddler board which feeds the stamp from a 9v battery. I have a couple of cheap re</p>\n\n<p>mote control monster trucks that use a 6v source, and they have a battery pack and recharger, so I will be chopping one of those out to use soon. It's all about the rechargeable battery packs.\n <br />\n <br />The motors themselves are powered by a 7.2v Ni-Cd battery at 1800mA through a very nice dual H-Bridge, which I bought this time rather than making my own. Its a M22 made by Devantech, a English manufacturer, and it's got a whole bunch of nice features. You can't really see it in those pics above so here's a picture of it:</p>\n\n<p><img src=\"../../../../../img/old/m22.jpg\" alt=\"\" /> &lt;-- rawr!\n <br />\n <br />This can take motors that require up to 50v and up to 5A per motor without a heat sink. Fine for John's requirements. It is capable of multiple different modes of operation, including straight analog control over each motor, RC mode which allows the motors to act like servos ( speed set by pulses at</p>\n\n<p>different frequencies) or I2C mode which uses the popular Phillips I2C p</p>\n\n<p>rotocol for complete programmatic control over every aspect of the motors, which is what I will be using for John. I will be adding some more I2C devices later as well.\n <br />\n <br />The biggest benefit using DC motors rather than servos is that once you tell the motors to do something, they go off and do it until you tell them to stop - servos require the same pulse frequency to be sent every certain time period, usually about 25ms. This makes coding more tricky when the project is quite advanced, as you have to make sure the pulses are sent around all the other processing that's happening. Great fun with you have 4+ servos. Using motors frees up the code to do other things all the time, which can only be good! You can however buy or make a dedicated servo controller board (co-processor) which frees up this restraint in the same way. I will be using a servo controller board when I get a robotic arm for John.</p>\n\n<p>Next up is sensors - for the time being John just has one sensor, which is an ultrasonic range finder capable of finding distances up to 3 meters, and it uses just one IO pin! You can see it in the pictures, it looks like John's \"eyes\". The Ping))) works on the same principal as a sonar - an ultrasonic pulse is transmitted, and the distance is measured by timing how long it takes to echo back. I have this mounted on a standard hobby servo, capable of 180 degree rotation, allowing the \"eyes\" to point in different directions and take distance readings.</p>\n\n<p><img src=\"../../../../../img/old/ping.jpg\" alt=\"\" />&lt;-- echo, echo, echo!\n <br />\n <br />One of John's biggest problem at the moment is being able to see in front of the actual tracks - finding walls and objects straight ahead is one thing, but it doesn't cover an area wide enough in front of John for all situations. This job is well suited to infrared sensors or \"whisker\" type application, however it's going to be tricky to get anything mounted down there, but will be necessary soon.\n <br />\n <br />You might have noticed the two antenna sticking up in the air - these are radio frequency transmitter and receiver modules, and will be used for communications across the airwaves to other circuits - they aren't currently being used in John but they are hooked up and ready - just need to be coded and have something to talk to.</p>\n\n<p>\n <br />&lt;-- bad boys\n <br />\n <br />That's about it at the moment for hardware. Currently have a simple program which tests all the systems, which allows John to roam around a bit, and when detecting a wall at 30cm he will pivot right until they way is clear to move forward. It's not very impressive but more a framework of lower level routines to get all the systems running, ie I2C communications and Ping))) distance acquisition. The motors themselves are capable of some quite high speed and torque, however for inside testing use I have him set to \"caution\" speed, otherwise I have to dive around the house trying to catch him before any disaster strikes. The torque is indeed quite powerful, John easily drives straight over anything that gets in his way, which can result in toppling over backwards and wrecking all the electronics (as almost happened this morning whilst driving over the N64 with Goldeneye in it). This can be avoided by fitting an accelerometer which measures tilt - I have one lying around somewhere that I might fit and try out.</p>\n\n<p>\n <br />One of the things I like most about the tracks is the ability to almost pivot on the spot - it can often be difficult to turn around without hitting other stuff but this does it really well.\n <br />\n <br />I have attached the program I'm currently using. It's wrote in PBASIC and isn't the most efficient at the moment. PBASIC has several limitations such as having no subroutines/functions (GOSUB and GOTO for the win) and GOSUB will only nest 4 levels which can make it difficult to re-use a lot of the code. Another limitation with the STAMP is that it doesn't have a great deal of RAM to play with - in this example I'm already using a chunk:</p>\n\n<p><img src=\"../../../../../img/old/untitled.jpg\" alt=\"\" /></p>\n\n<p>\n <br />In order to minimize memory usage, I will need to share variables where possible which can be tricky if you're not careful, not to mention making reading the code much harder to follow. I will be using basic subsumption architecture (fancy state machine) which will allow different movement patterns to be stored in the EEPROM and free up some space.</p>\n\n<p>\n <br />That's it for now, next up I will be looking at either getting some sensors in front of the tracks and in the centre lower down, or RF communication with the PC. I also have a ancient NES pad which I might hack and use it to remote-control john using another circuit and RF communications. I will also be designing a state machine and will have a lot of code to write ! Nex time I post I will upload a video and the schematics too (yay!)</p>\n\n<p><a href=\"/blogengine/file.axd?file=2009%2f7%2fjohn_basic.doc\">john_basic.doc (42.50 kb)</a></p>") #f (u . "\n<p>\n <br />\n <br />Right it's been a little while since my last post, but John is now alive and functional, albeit with some drawbacks for the moment. Here's a few pics I took a minute ago of John as he stands:</p>\n\n<p><img src=\"../../../../../img/old/john_front.jpg\" alt=\"\" /></p>\n\n<p>\n <br />\n <br />In this next one you can just about see the motor controller board - it's sitting on the lower level</p>\n\n<p><img src=\"../../../../../img/old/john_back.jpg\" alt=\"\" /></p>\n\n<p><img src=\"../../../../../img/old/john_front_high.jpg\" alt=\"\" /> <!-- more--> \n <br />\n <br />The brain is that of a BASIC STAMP 2 from Parallax (which is actually a PIC with some extra hardware to provide a easier interface to program), I'm using the board from my Toddler robot as I only have two stamps, and the other one is in my development board. The toddler board is great because it has a surface mount BS2, a prototype area (breadboard), several servo connections mapped internally to the stamp's IO pins, a reset button, three way power switch allowing you to not provide power to the servo connectors, and a programming connector (serial cable - rs232) all on one small board. Unfortunately the toddler takes a +6v supply which is then regulated to 5v within the stamp itself, leaving both +6v and +5v on different headers. Usually the 6v comes from the 3xAA battery holder in the toddler, I don't want to use that though so for now I've got my own 5v regulator on the toddler board which feeds the stamp from a 9v battery. I have a couple of cheap re</p>\n\n<p>mote control monster trucks that use a 6v source, and they have a battery pack and recharger, so I will be chopping one of those out to use soon. It's all about the rechargeable battery packs.\n <br />\n <br />The motors themselves are powered by a 7.2v Ni-Cd battery at 1800mA through a very nice dual H-Bridge, which I bought this time rather than making my own. Its a M22 made by Devantech, a English manufacturer, and it's got a whole bunch of nice features. You can't really see it in those pics above so here's a picture of it:</p>\n\n<p><img src=\"../../../../../img/old/m22.jpg\" alt=\"\" /> &lt;-- rawr!\n <br />\n <br />This can take motors that require up to 50v and up to 5A per motor without a heat sink. Fine for John's requirements. It is capable of multiple different modes of operation, including straight analog control over each motor, RC mode which allows the motors to act like servos ( speed set by pulses at</p>\n\n<p>different frequencies) or I2C mode which uses the popular Phillips I2C p</p>\n\n<p>rotocol for complete programmatic control over every aspect of the motors, which is what I will be using for John. I will be adding some more I2C devices later as well.\n <br />\n <br />The biggest benefit using DC motors rather than servos is that once you tell the motors to do something, they go off and do it until you tell them to stop - servos require the same pulse frequency to be sent every certain time period, usually about 25ms. This makes coding more tricky when the project is quite advanced, as you have to make sure the pulses are sent around all the other processing that's happening. Great fun with you have 4+ servos. Using motors frees up the code to do other things all the time, which can only be good! You can however buy or make a dedicated servo controller board (co-processor) which frees up this restraint in the same way. I will be using a servo controller board when I get a robotic arm for John.</p>\n\n<p>Next up is sensors - for the time being John just has one sensor, which is an ultrasonic range finder capable of finding distances up to 3 meters, and it uses just one IO pin! You can see it in the pictures, it looks like John's \"eyes\". The Ping))) works on the same principal as a sonar - an ultrasonic pulse is transmitted, and the distance is measured by timing how long it takes to echo back. I have this mounted on a standard hobby servo, capable of 180 degree rotation, allowing the \"eyes\" to point in different directions and take distance readings.</p>\n\n<p><img src=\"../../../../../img/old/ping.jpg\" alt=\"\" />&lt;-- echo, echo, echo!\n <br />\n <br />One of John's biggest problem at the moment is being able to see in front of the actual tracks - finding walls and objects straight ahead is one thing, but it doesn't cover an area wide enough in front of John for all situations. This job is well suited to infrared sensors or \"whisker\" type application, however it's going to be tricky to get anything mounted down there, but will be necessary soon.\n <br />\n <br />You might have noticed the two antenna sticking up in the air - these are radio frequency transmitter and receiver modules, and will be used for communications across the airwaves to other circuits - they aren't currently being used in John but they are hooked up and ready - just need to be coded and have something to talk to.</p>\n\n<p>\n <br />&lt;-- bad boys\n <br />\n <br />That's about it at the moment for hardware. Currently have a simple program which tests all the systems, which allows John to roam around a bit, and when detecting a wall at 30cm he will pivot right until they way is clear to move forward. It's not very impressive but more a framework of lower level routines to get all the systems running, ie I2C communications and Ping))) distance acquisition. The motors themselves are capable of some quite high speed and torque, however for inside testing use I have him set to \"caution\" speed, otherwise I have to dive around the house trying to catch him before any disaster strikes. The torque is indeed quite powerful, John easily drives straight over anything that gets in his way, which can result in toppling over backwards and wrecking all the electronics (as almost happened this morning whilst driving over the N64 with Goldeneye in it). This can be avoided by fitting an accelerometer which measures tilt - I have one lying around somewhere that I might fit and try out.</p>\n\n<p>\n <br />One of the things I like most about the tracks is the ability to almost pivot on the spot - it can often be difficult to turn around without hitting other stuff but this does it really well.\n <br />\n <br />I have attached the program I'm currently using. It's wrote in PBASIC and isn't the most efficient at the moment. PBASIC has several limitations such as having no subroutines/functions (GOSUB and GOTO for the win) and GOSUB will only nest 4 levels which can make it difficult to re-use a lot of the code. Another limitation with the STAMP is that it doesn't have a great deal of RAM to play with - in this example I'm already using a chunk:</p>\n\n<p><img src=\"../../../../../img/old/untitled.jpg\" alt=\"\" /></p>\n\n<p>\n <br />In order to minimize memory usage, I will need to share variables where possible which can be tricky if you're not careful, not to mention making reading the code much harder to follow. I will be using basic subsumption architecture (fancy state machine) which will allow different movement patterns to be stored in the EEPROM and free up some space.</p>\n\n<p>\n <br />That's it for now, next up I will be looking at either getting some sensors in front of the tracks and in the centre lower down, or RF communication with the PC. I also have a ancient NES pad which I might hack and use it to remote-control john using another circuit and RF communications. I will also be designing a state machine and will have a lot of code to write ! Nex time I post I will upload a video and the schematics too (yay!)</p>\n\n<p><a href=\"/blogengine/file.axd?file=2009%2f7%2fjohn_basic.doc\">john_basic.doc (42.50 kb)</a></p>")) ((? . 41) f post (u . "Some of my favourite tech books!") (? . 41) 1488171288 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/06/11/some-of-my-favourite-tech-books/index.html" . windows) (u . "/blog\\2014\\06\\11\\some-of-my-favourite-tech-books/") (u . "2014-06-11T01:48:00") (? . 44) (? . 7) (c (u . "books")) (u . "\n<p>I thought it would be nice to share some of the technical books that I have learnt most from, and still love to look through or use as reference to this day. These are in no particular order and cover a variety of technical subjects, and some are far from recent. If you are interested in any of these areas and have not read these books, I cannot recommend them highly enough! I have many, many many books and have read countless over the years, many of them are awesome but are not making this list as it would just be too long. I also have lots of books that are simply terrible (and I still have most of those too&hellip;!)</p>") #t (u . "\n<p>I thought it would be nice to share some of the technical books that I have learnt most from, and still love to look through or use as reference to this day. These are in no particular order and cover a variety of technical subjects, and some are far from recent. If you are interested in any of these areas and have not read these books, I cannot recommend them highly enough! I have many, many many books and have read countless over the years, many of them are awesome but are not making this list as it would just be too long. I also have lots of books that are simply terrible (and I still have most of those too&hellip;!)</p>\n<!-- more-->\n\n<h3 id=\"the-black-art-of-video-game-console-design-andre-lamothé\">The Black Art of Video Game Console Design, Andre Lamothé</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51eawdb9waL._SX402_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Well, this book just has it all really. I already knew basic analogue and digital electronics when I first bought this book (learnt from a whole host of other books), but it taught me most of what I know today about computer design. Starting from basic electrical theory (physics) and analogue / discrete electronics and circuit analysis, it quickly moves into semiconductor theory and digital logic. From there, the first half of the book is building on previous topics, warming up for the second half. Basic logic gates, various forms of adders, ALU design, shift registers, multiplexers, buffers, etc (and a whole bunch of theory). The second half of the book concentrates on embedded system design and computer architecture. This will literally show you how to design your own processors, a multitude of data bus / pipelining / cache / multi-core architectures and how to glue everything together with various different memory addressing strategies and so forth. Finally the book goes into details on how to take your new computer architecture and build video / sound / input / more memory / extensions points and create a video game console. Be prepared for a hard crash-course on PAL / NSTSC.</p>\n\n<p>From this book I actually built several variations of my own computer that had graphics and everything. Proudest moment, getting a stable green bar to appear on my PAL monitor. can&rsquo;t recommend this book enough.</p>\n\n<p><a href=\"https://www.amazon.co.uk/Black-Video-Game-Console-Design/dp/0672328208\">amazon link</a></p>\n\n<h3 id=\"computer-systems---a-progammers-perspective-randal-e-bryant--david-ohallaron\">Computer Systems - A Progammers Perspective, Randal E. Bryant &amp; David O&rsquo;Hallaron</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51NTWFgAAbL._SX381_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Wow, another awesome book that I leant so much from, so many years ago. This is not your normal programming book, this is a bit of an odd hybrid that sits somewhere between computer engineering and programming. Essentially this book is more about how your computers actually work, but flavoured from a programmer&rsquo;s perspective. All the code in this book is presented in C or Assembly,which is suitable is the concepts it covers are very low level. From the basics of how information is represented in a computer (and the various different versions of it) along with internal data type representation and arithmetic, it moves quickly onto how your programs are really represented at a machine level. It goes into fine detail on exactly how your programs work, then moving onto processor architectures (and how that affects your programs) and optimizers within compilers and so on. Finally it covers in-depth discussions of memory hierarchies, virtual memory, networking, etc.</p>\n\n<p>I still enjoy leafing trough and reading bits of this book, it is rare a book goes into this much detail and is as well written. Also, this book has Exercises in it! Woo :)</p>\n\n<p>nb. There is a newer edition of this book from 2010! I don&rsquo;t know what differences it has.</p>\n\n<p><a href=\"https://www.amazon.co.uk/Computer-Systems-Programmers-Randal-Bryant/dp/0136108040\">amazon link</a></p>\n\n<h3 id=\"amiga-game-makers-manual-stephen-hill\">Amiga Game Maker&rsquo;s Manual, Stephen Hill&lt;</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51vysJiNtFL._SX312_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>A long time ago, in a galaxy far away, I was about 14 working at Maplin Electronics on my Work Experience from school. One of the first things they had me do (the bastards) is finish cleaning out their old warehouse. Amongst the dust and the debris I happened across this book. Now, given my Father owned a small Amiga company selling public domain software, I was already surrounded in Amigas and had both Blitz and Amos basic, and had been attempting with some moderate success to write computer games for many years. Afterall, that&rsquo;s the main reason that most of us got into it right? Now, whilst this book is not particularly groundbreaking in many ways, it had a unique charm and style. It was categorised into some chapters for general programming, and then a chapter devoted to the various game genres, from arcade shoot-em-up through RPG and even full on simulator games. At the end of each chapter it would have a list of other ideas or themes for games related to that genre. Therefore is was from this book I leant about how to use trig to make cool attack patterns in shoot-em-ups, how to actually design a sprite animation system properly, an so on. I learnt tons from this book (and some really bad stuff!) but more importantly it really helped spark my imagination more into what was possible and how it could be achieved. Proud to say I still have this book (somewhere!) :)</p>\n\n<p><a href=\"https://www.amazon.co.uk/Amiga-Game-Makers-Manual-Basic/dp/1850582300/\">amazon link</a></p>\n\n<h3 id=\"c-how-to-program-paul-dietel\">C++ How to Program, Paul Dietel</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51AegOvNr-L._SX372_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Well, this is a tough one to write about. I have over the years bought numerous Dietel books and they are largely terrible in my opinion (although some make great doorstops). This is the fist one I got and was one of the first C++ books I owned. The one I have is a later edition, which I understand now is a lot better than the originals. At any rate, this is a fairly thorough coverage of the C++ language, OO design and data structure implementations. I had better books since, and some worse ones before this - but it earns a place in my top books as it is was the first one that had the language really make sense to me. It has some horrible UML stuff in it, overblown OO design guidelines, some waffling about not much in places, but overall nitpicking aside this book was actually pretty awesome in my opinion and paved the road to C++ for me. Also, being a university text book, it has EXCERCISES in it. I love those :)</p>\n\n<p><a href=\"https://www.amazon.co.uk/C-Program-Harvey-M-Deitel/dp/0130895717\">amazon link</a></p>\n\n<h3 id=\"principles-of-computer-hardware-alan-clements\">Principles of Computer Hardware, Alan Clements</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51ncZSWgUyL._SX363_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This is similar in some ways to the first book in this list, although only dealing with digital logic and a lot more on the assembly programming side of things. Actually it&rsquo;s kind of like a mix between the video game console book and the computer systems one. Much like Andre&rsquo;s book, this starts off with the basic logic stuff, gates, boolean algebra, karnaugh maps and so on,quickly progressing into very logic-gate-heavy diagrams of pretty much all the systems in your computer. Once again this goes into fine detail on CPU architecture, pipelining and so on, but with more an emphasis on the top level rather than the electronics. I think with the video game console book, this one, and the computer systems one you should be very knowledgeable on all things software and hardware!</p>\n\n<p><a href=\"https://www.amazon.co.uk/Principles-Computer-Hardware-Alan-Clements/dp/0199273138/\">amazon link</a></p>\n\n<h3 id=\"tricks-of-the-3d-game-programming-gurus-andre-lamoth\">Tricks of the (3D) Game Programming Gurus, Andre Lamoth&eacute;</h3>\n\n<p><img src=\"https://images-na.ssl-images-amazon.com/images/I/51ZD2X1XS1L._SX402_BO1,204,203,200_.jpg\" alt=\"\" /></p>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51GP289J26L._SX383_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Another two of André&rsquo;s books (can you tell, I am a fan). If you are anything like me, you will not be happy until you really understand how stuff actually works. I am happy with some black boxes for a while (a skill I struggled with until later in life!) but ultimately I am going to want to know how those black boxes really work. I was probably about 18 when I decided I want to learn how to program 3D video games. There are tons of books out there on how to use DirectX or OpenGL, and I had learnt a bunch of stuff from various tutorials on the web, but none of them really showed me how stuff works - until I bought this book :) Whilst these books do show you how to use DirectX, it goes much further than that, delving into most rasterization theory and practice, it will have you build a software renderer from the ground up. Most of the black boxes you use in 3D programming are explained in detail here, including a very friendly primer on 3d maths which was essential for me as I&rsquo;d done basically no maths since year 10 in high school, other than some bits of trig in games I had written (shoot-em-ups, raycasters, etc). This book starts with Win32 programming and GDI, moving onto DirectDraw7 and then Direct3D later. Andrés typical style here is to show you how to do everything the real hard way, then show you a Direct X function that does it for you. This book is not for the feint of heart (or lack of bicep muscles, it&rsquo;s not a small book), but a rare gem in a sea of sub-par 3d texts. I wrote my own 3D game engine from using these books (which I lost in the great hard-drive crash of 2005).</p>\n\n<p><a href=\"https://www.amazon.co.uk/Tricks-Windows-Game-Programming-Gurus/dp/0672323699\">amazon link a</a> <a href=\"https://www.amazon.co.uk/Tricks-Game-Programming-Gurus-Rasterization-x/dp/0672318350\">amazon link b</a></p>\n\n<h3 id=\"the-algorithm-design-manual-steven-s-skiena-2nd-ed\">The Algorithm Design Manual, Steven S. Skiena (2nd Ed)</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/41s5pnqOlyL._SX357_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This book gets some stick as not being that great, but personally (and for a couple of friends) I found this book quite fascinating and very educational. As is implied, this is a book on not only many different algorithms over various data structures, but also on the analysis and design procedure of designing an algorithm to fit a given problem. I especially like the &rsquo;War Stories sections where the author explains in detail how he used said algorithms to solve real-world problems. To give a flavour of topics covered; algorithm analysis (big oh notation) data structures, sorting / searching, graph traversal, weighted graph algorithms, combinatorial search, dynamic programming, approximation algorithms. This book also has exercises :) It is a great one to have on the shelf as a reference book, and also an entertaining read in many areas.</p>\n\n<p><a href=\"https://www.amazon.co.uk/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693\">amazon link</a></p>\n\n<h3 id=\"genetic-programming-on-the-programming-of-computers-by-means-of-natural-selection-v-1-john-r-koza\">Genetic Programming: On the Programming of Computers by Means of Natural Selection v. 1, John R Koza</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51fAjpvDvCL._SX342_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>If you don&rsquo;t already know, Koza is the guy that pioneered genetic programming, and this was the first book as a result of it. After being fascinated a long time with genetic programming and genetic algorithms, I finally bought this book. Mind = blown. Learning LISP aside, this extremely detailed book on genetics lead me on my adventures into this space and was quite mind expanding in terms of how I might create Skynet in the future (not to mention some insights into natural selection and real genetics). AI is something I don&rsquo;t really have time for any more, but I still have a bunch of experiments derived from this book (some of which were integrated with my various robots), and also in turn led to me examine other AI techniques in a lot more detail.</p>\n\n<p><a href=\"https://www.amazon.co.uk/d/Books/Genetic-Programming-Computers-Natural-Selection-Complex-Adaptive/0262111705\">amazon link</a></p>\n\n<h3 id=\"expert-f-20-don-syme-adam-granicz-antonio-cisternino\">Expert F# 2.0 Don Syme, Adam Granicz, Antonio Cisternino</h3>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51sX56v0mfL._SX413_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This book was the one that really got me into functional programming. I have read it several times, and some areas of it still blow my mind. This book is not perfect, in my opinion it glosses over some important advanced stuff (like Quotations) and instead chooses to put a bunch of other content in which in my mind is not so much to do with the language - and this is a problem being the definitive book for F#. It also has no exercises which it would certainly benefit greatly from. Bitching aside however, this is up there with one of the books I have learnt most from, insomuch as it largely turned upside down a lot of ideas I had about programming computers and displayed a whole new side to everything in computer science and software engineering, which was a key turning point in various areas for me.</p>\n\n<p><a href=\"https://www.amazon.co.uk/Expert-F-2-0-Don-Syme/dp/1430224312\">amazon link to older 2nd edition</a></p>\n\n<h3 id=\"game-programming-gems-and-ai-game-programming-wisdom-series\">Game Programming Gems and AI Game Programming Wisdom series</h3>\n\n<p><img src=\"https://images-na.ssl-images-amazon.com/images/I/51PKCXJAARL._SX377_BO1,204,203,200_.jpg\" alt=\"\" /></p>\n\n<div class=\"figure\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/51-9go5Qn8L._SX396_BO1,204,203,200_.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>I have mostly all the books from these series. These books are not cheap, and come in hardcover only, but they are lovely things to own :) What I really love about these books is they are current (well, they were, haha). The format of the books is a series of articles written by various engineers working for big 3d game studios around the time of publication. The articles are heavily edited in a very professional manner, and cover an extremely large amount of topics in game programming. These books are very cool because they show you what the new cutting edge techniques being used at the time were, which is something most books are not able to do. The disjoined nature of the articles, being roughly organised into categories is a big plus as you can study and article about a particular concept and play around with the sample code without having to get wrapped up in the whole book to do so. A lot of the techniques in these books helped me think about many areas of software differently, and I adapted several concepts from these books into various projects of my own. Plus you could always look forward to the next book in the series, and was a good thing for my parents to get me for birthdays and Christmases :)</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Whew, I am going to leave it there with 10 entries. I have many other books which are equally deserving to be on this list, especially around the areas of programming language concepts, compilers, game programming and hardware / electronics books. I think this is fairly well balanced on the my interests throughout life so far though. What are some of your favourite tech books? I would love to know. Write an article and share, or just let me know by commenting here or tweeting me @pezi_pink !</p>")) ((? . 16) f post (u . "Reversing - Bakunawa") (? . 16) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2021/04/04/reversing-bakunawa/index.html" . windows) (u . "/blog\\2021\\04\\04\\reversing-bakunawa/") (u . "2021-04-04T11:51:18") (? . 15) (? . 0) (c (u . "cracking") c (u . "reverse engineering")) (u . "\n<p>In this post we&rsquo;ll look at another crackme, Bakunawa!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/title.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This one was listed as level 5 (Very Hard) and certainly was not without its difficulties!</p>\n\n<p>Featuring a sort-of virtual machine executing real x86 instructions encoded into an odd binary file as a point of obsfucation, this took me quite a long time to figure out. I built some tools in the process and finally a Keygen program once the algorithm was identified and reversed.</p>\n\n<p>Major spoilers follow, <a href=\"https://crackmes.one/crackme/5b135f4033c5d41557b02271\">here&rsquo;s the link</a> if you want to have a go yourself!</p>\n\n<p>Tools used today are x64dbg, PEStudio, IDA Pro, F# and C++</p>") #t (u . "\n<p>In this post we&rsquo;ll look at another crackme, Bakunawa!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/title.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This one was listed as level 5 (Very Hard) and certainly was not without its difficulties!</p>\n\n<p>Featuring a sort-of virtual machine executing real x86 instructions encoded into an odd binary file as a point of obsfucation, this took me quite a long time to figure out. I built some tools in the process and finally a Keygen program once the algorithm was identified and reversed.</p>\n\n<p>Major spoilers follow, <a href=\"https://crackmes.one/crackme/5b135f4033c5d41557b02271\">here&rsquo;s the link</a> if you want to have a go yourself!</p>\n\n<p>Tools used today are x64dbg, PEStudio, IDA Pro, F# and C++</p>\n<!-- more-->\n\n<h2 id=\"first-impressions\">First Impressions</h2>\n\n<p>PE Studio identfiies the executable as a normal, non-packed Windows program. Poking around a bit we can see it was compiled with C++ 8 and uses some abnormal libraries such as <code>DirectSound</code> and <code>Winmm</code>.</p>\n\n<p>Looking at the resources (consuming 57% of the executable size) we can see a bunch of images, that appear to be music files, and a rather large binary file called &ldquo;naga&rdquo;. We&rsquo;ll dump this binary to file now since it looks like it will be important.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/pe2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Moving onto imports / exports it seems to have statically linked the <a href=\"http://mikmod.sourceforge.net/doc/mikmod-3.3.11.html\">MilkMod library</a> so it seems we can indeed expect some music.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/pe1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Having a quick look over the strings reveals some fun looking bits, almost like a choose-your-own-adventure!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/pe3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"fire-it-up\">Fire it up</h2>\n\n<p>Running the executable we are presented with a very cool key entry screen accompanied by some great chiptune music.</p>\n\n<p>If you run it with the debugger attached, however, you do not get the screen and instead it plays a chiptune version of <a href=\"https://www.youtube.com/watch?v=ESViOhqRdlE\">The Birdie Song</a>, which is hilairious. Only a RickRoll would have been better!</p>\n\n<p>A quick brekapoint on <code>IsDebuggerPresent</code> leads to a simple check which when bypassed, enters a Windows event loop and launches the UI as normal.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/db1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Next up is to find where it is reading the username and password. I&rsquo;m expecting it&rsquo;s going to load the mysterious Naga resource at some point as well, so perhaps a good starting place is to put breakpoints on the Windows <code>LoadResource</code> function and see what comes up.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/db2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>As expected, after a name and password is set and the Verify button is pressed, it attempts to load the resource &ldquo;Naga&rdquo; as seen above.</p>\n\n<p>At this stage it&rsquo;s easy to trace through the code and simply bypass the final check that happens</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/db3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>That&rsquo;s not much fun, let&rsquo;s try and work out how the serial check works and build a keygen for it.</p>\n\n<h2 id=\"enter-the-dragon\">Enter The Dragon</h2>\n\n<p>There&rsquo;s quite a lot of stuff happening in this main function. After quite some analysis, two procedures stand out in particular. The first is a function that loads the Naga resource, and has a ton of code that parses the data into structures / classes. We&rsquo;ll come back to that..</p>\n\n<p>The second is where the magic happens.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/valloc1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>After a bunch of stuff, several calls to <code>VirtualAlloc</code> happen. The first is a large section of read/write memory. After it has been allocated, a pointer is stored to the bottom of the memory. Shortly it will transpire that this area of memory is to be used as the CPU stack. The program will copy a pointer to the username and password that was entered into the bottom of this stack area.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/valloc2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>A little further on we see more calls to <code>VirtualAlloc</code>, which have execute permissions. If we poke around in this code for a bit we will see that this area of memory has x86 code copied in to it, presumably from the structures read in from the Naga file. However, it only ever executes small pieces of code at any one time. A clever bit of design here essentially backs up all the CPU registers and moves the CPU stack pointer to the virtual stack location, restoring them at the end of the snippet. In this way it behaves much like a thread does.</p>\n\n<p>However, because it only executes small bits of code at a time, it is very hard to see what it is actually doing. We can however wait for it to finish processing instructions and have a look at the resulting stack area to reveal some interesting infromation</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/stack.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>here we can see it has created some kind of alphabet to use in its keygen, and we can see what looks to be a generated serial in the lower part of the memory. Let&rsquo;s try this serial in the program and see what happens:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/sergood.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>As suspected, it is indeed the serial (though it needed the <code>-</code> character added). Perhaps we won&rsquo;t need to understand the entire virtual program if we can work out what it&rsquo;s doing in this last part.</p>\n\n<p>Since we know the area of memory that the serial is written to (as an offset from the virtual stack) then during debugging, after we know the stack location, we can setup a hardware breakpoint to trigger when that location is written to. Doing this and having it trigger a few times leads to this tasty looking morsel.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/xor1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>It looks like we have struck gold here. Analysing this code shows that is divides some value and uses the remainder to index into the alphabet that is used to write the next serial value. Unfortunately, this is only one iteration of the loop, and after a few iterations the mysterious number changes completely. We are not going to be able to write a keygen without knowing where those numbers are coming from.</p>\n\n<h2 id=\"how-to-train-your-dragon\">How to Train Your Dragon</h2>\n\n<p>We need to be able to see the entire virtual program. To do so means we are going to have to reverse engineer and understand this mysterious binary file format that holds the machine code in it. Having observed the virtual machine&rsquo;s behaviour, it is also apparent it knows where Call instructions are and some other bits and bobs. Time to roll up the sleeves and get reversing&hellip;</p>\n\n<p>Many hours of work later reveal something like following structure which we can parse in F#</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">naga</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">File</span><span class=\"p\">.</span><span class=\"n\">ReadAllBytes</span><span class=\"w\"> </span><span class=\"s\">\"c:/repos/crackme/bin/bakuawna/naga.dump\"</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">inline</span><span class=\"w\"> </span><span class=\"n\">printHex</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"%X\"</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getByte</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">naga</span><span class=\"o\">.[</span><span class=\"n\">index</span><span class=\"o\">]</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getBytei</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">uint32</span><span class=\"w\"> </span><span class=\"n\">naga</span><span class=\"o\">.[</span><span class=\"n\">index</span><span class=\"o\">]</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getInt</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">getBytei</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">getBytei</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">getBytei</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">getBytei</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"o\">)</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getIntw</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">uint64</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">getInt</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"o\">)</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getWord</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">getIntw</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">getIntw</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"o\">)</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">startId</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getWord</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\">  </span><span class=\"c1\">// first instruction id stored in header</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">numIns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getInt</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\">    </span><span class=\"c1\">// 515 total instructions</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Dest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jump</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">uint64</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">uint64</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Instruction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">uint64</span><span class=\"w\">          </span><span class=\"c1\">// ID of this isntruction</span>\n<span class=\"w\">    </span><span class=\"n\">nid</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">uint64</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"c1\">// pointer to next instruction</span>\n<span class=\"w\">    </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\">          </span><span class=\"c1\">// amount of opcode data</span>\n<span class=\"w\">    </span><span class=\"n\">opcodes</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"c1\">// opcode data</span>\n<span class=\"w\">    </span><span class=\"n\">dest</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Dest</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\">   </span><span class=\"c1\">// call or jump target</span>\n<span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>It seems each individual instruction is encoded with a unique ID, the ID of the next instruction, and some extra data that says if the instruction is a jump or call, and if so, the ID of the instruction it routes to. The actual x86 opcode data for the instruction and its operands are encoded directly.</p>\n\n<p>The header has a magic number and some other useless bits, the only relevant parts are the starting instruction id and the total instruction count.</p>\n\n<p>There&rsquo;s a bunch of other code that creates linked lists of all the nodes and strings it all together. There are four such lists in the core of the program that the machine uses; I don&rsquo;t know exactly how since it&rsquo;s far too much to look at it all, but I think this is enough warm up F# and have a go at parsing the data.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rawInstructions</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">mutable</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x11</span>\n<span class=\"w\">    </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">numIns</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getWord</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">            </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">nid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getWord</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">            </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getByte</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">            </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"c1\">// len is 16 bits but second byte is always blank</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ocs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[|</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1uy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>\n<span class=\"w\">                            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getByte</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">                            </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">                            </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|]</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">isCall</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getByte</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">            </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"c1\">// 16 bit as above</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">isCall</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0uy</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>\n<span class=\"w\">                    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getWord</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">                    </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">                    </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">)</span>\n<span class=\"w\">                </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">isJump</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getByte</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">            </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"c1\">// 16 bit as above</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">isJump</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0uy</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">isCall</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0uy</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"!\"</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">isJump</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0uy</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>\n<span class=\"w\">                    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getWord</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"w\">                    </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">                    </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Jump</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">)</span>\n<span class=\"w\">                </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">data</span>\n<span class=\"w\">            </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">                </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">id</span>\n<span class=\"w\">                </span><span class=\"n\">nid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">nid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0UL</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">nid</span>\n<span class=\"w\">                </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">len</span>\n<span class=\"w\">                </span><span class=\"n\">opcodes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ocs</span>\n<span class=\"w\">                </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span>\n<span class=\"w\">            </span><span class=\"o\">}</span><span class=\"w\">             </span>\n<span class=\"w\">    </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">instructionMap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">rawInstructions</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">ofList</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here you can see a the first extracted record alongside the binary dump</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/struct2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Performing some analysis on the parsed data reveals some useful information</p>\n\n<ul>\n <li>There are 8 distinct subroutine calls (unique IDs pointed to by instructions marked as Call)</li>\n <li>The entrypoint is its own subroutine, so 9 in total</li>\n <li>All of the Call instructions use the same opcode / addressing mode of <code>E8</code> (near, relative)</li>\n <li>All of the Jump instructions have relative offsets already encoded and presumably stay in-procedure</li>\n <li>There are several different jump and conditional jump opcodes, with 1, 5 and 6 operands</li></ul>\n\n<p>To produce the working program we&rsquo;ll have to decide on a memory layout for it. Some of the Call instructions have large relative offsets which would not work with an entry point at location 0x0, so we&rsquo;ll need to re-write their relative offsets with a location we decide on. We could do the same with the jumps, but it&rsquo;s best to keep them with their currently encoded targets if possible. That means we will need to parse and understand their relative offset addresses in order to write the target code at the correct place in memory.</p>\n\n<p>First then is to decide where each subroutine will sit in the memory space. To do this we&rsquo;ll need to know the size of each. To calculate the size, we&rsquo;ll need to recusrively follow the <code>next</code> pointers, storing any jump targets along the way. Once we are out of instructions, recursively repeat the process on the collected jump targets. It is possible for more than one jump to target the same instruction so we&rsquo;ll need to make sure they are only visited once.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">subs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// 8 subroutines</span>\n<span class=\"w\">    </span><span class=\"n\">rawInstructions</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">distinct</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">instructionMap</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">collectFullInstructions</span><span class=\"w\"> </span><span class=\"n\">rootInstruction</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"c1\">// navigate all \"next\" pointers </span>\n<span class=\"w\">    </span><span class=\"c1\">// for jumps, add their destinations to the list resursively</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">seen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Collections</span><span class=\"p\">.</span><span class=\"nn\">Generic</span><span class=\"p\">.</span><span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"kt\">uint64</span><span class=\"o\">&gt;</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"w\"> </span><span class=\"n\">jumps</span><span class=\"w\"> </span><span class=\"n\">collected</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"o\">.</span><span class=\"n\">Contains</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">jumps</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">collected</span><span class=\"w\">   </span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">collected</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">jumps</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">Jump</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">instructionMap</span><span class=\"o\">.[</span><span class=\"n\">dest</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">jumps</span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">jumps</span>\n<span class=\"w\">        </span><span class=\"n\">seen</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">nid</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">jumps</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">nid</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">instructionMap</span><span class=\"o\">.[</span><span class=\"n\">nid</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"n\">jumps</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">instr</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">collected</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">instr</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">collected</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">collected</span>\n<span class=\"w\">    </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">rootInstruction</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"bp\">[]</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rootLen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instructionMap</span><span class=\"o\">.[</span><span class=\"n\">startId</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">collectFullInstructions</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">sumBy</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">int32</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"o\">)</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">subLens</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">subs</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">collectFullInstructions</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">sumBy</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">int32</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"o\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>With the lengths calculated, we can assign them starting memory locations, with a little bit of blank space between each.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">programLayout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">[]</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">rootLen</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">subLens</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">last</span><span class=\"o\">,</span><span class=\"n\">res</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">instr</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">subLen</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">subLen</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">last</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">snd</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addr</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"n\">ofList</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This creates a map indexed by the starting instruction id that we can use when assembling.</p>\n\n<p>We need a way or parsing the jump target opcodes so we can calculate their position in memory</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">getJumpOffset</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">int32</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">sbyte</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.[</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\">// 5 len jmp, operand in last 4 bytes</span>\n<span class=\"w\">        </span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">),</span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.[</span><span class=\"mi\">1</span><span class=\"o\">..])</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">tot</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">oc</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">tot</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"o\">(((</span><span class=\"kt\">int32</span><span class=\"w\"> </span><span class=\"n\">oc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">))))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\">         </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\">// 6 len jnb, operand in last 4 bytes</span>\n<span class=\"w\">        </span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">),</span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.[</span><span class=\"mi\">2</span><span class=\"o\">..])</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"o\">||&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">tot</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">oc</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">tot</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"o\">(((</span><span class=\"kt\">int32</span><span class=\"w\"> </span><span class=\"n\">oc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">))))</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">snd</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Have to be careful with this stuff, it&rsquo;s easy to get tripped up with signed and unsigned data. It is important in the preceeding code that the result is treated as signed, since we&rsquo;ll be using it to re-calcuate addresses and we need negative numbers to work properly.</p>\n\n<p>Finally we are left with the task of writing the assembler itself, which will</p>\n\n<ul>\n <li>Create an array of bytes for the resulting program</li>\n <li>For each subroutine in our memory layout ..</li>\n <li>Change the instruction pointer to our subroutine location</li>\n <li>Follow the instruction trail, writing the relevant opcode bytes into the array</li>\n <li>When we hit a Call, we must calculate the new relative offset from where we are to the location of the routine from our memory map</li>\n <li>When we hit a Jump, we must parse its operands and calculate where it should be assembled, then add it to the &ldquo;to be assembled&rdquo; list like we did when calculating the subroutine lengths earlier</li>\n <li>Don&rsquo;t assemble jumps more than once</li></ul>\n\n<p>Here&rsquo;s the fist version I got working, a lovely mix of mutable and immutable code that I&rsquo;m sure purists everywhere will approve of</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">assemble</span><span class=\"bp\">()</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x1000</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">0uy</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">seen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Collections</span><span class=\"p\">.</span><span class=\"nn\">Generic</span><span class=\"p\">.</span><span class=\"n\">HashSet</span><span class=\"o\">&lt;</span><span class=\"kt\">uint64</span><span class=\"o\">&gt;</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">mutable</span><span class=\"w\"> </span><span class=\"n\">eip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">copyBytes</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\">          </span>\n<span class=\"w\">            </span><span class=\"n\">program</span><span class=\"o\">.[</span><span class=\"n\">eip</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">            </span><span class=\"n\">eip</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">eip</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">addr</span><span class=\"o\">,</span><span class=\"n\">instr</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">eip</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">addr</span>\n<span class=\"w\">             </span><span class=\"c1\">// recursively assemble via nip </span>\n<span class=\"w\">             </span><span class=\"c1\">// collect any jump targets along the way,</span>\n<span class=\"w\">             </span><span class=\"c1\">// and rewrite Call targets </span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">aux2</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">                </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">targets</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">Jump</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"o\">.</span><span class=\"n\">Contains</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span>\n<span class=\"w\">                        </span><span class=\"k\">else</span>\n<span class=\"w\">                            </span><span class=\"n\">seen</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">                            </span><span class=\"c1\">// calculate where this jump ends up. </span>\n<span class=\"w\">                            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">offset2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getJumpOffset</span><span class=\"w\"> </span><span class=\"n\">instr</span>\n<span class=\"w\">                            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">finalOffset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">offset2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">int32</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"o\">)</span>\n<span class=\"w\">                            </span><span class=\"o\">(</span><span class=\"n\">eip</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">finalOffset</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instructionMap</span><span class=\"o\">.[</span><span class=\"n\">dest</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">targets</span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\">   </span><span class=\"c1\">// use this branch for side-effect only, lovely!             </span>\n<span class=\"w\">                        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">programLayout</span><span class=\"o\">.[</span><span class=\"n\">dest</span><span class=\"o\">]</span>\n<span class=\"w\">                        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">eip</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">int32</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">current</span>\n<span class=\"w\">                        </span><span class=\"c1\">// write call target into the opcode data</span>\n<span class=\"w\">                        </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">offset</span><span class=\"w\">          </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xFF</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xFF</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xFF</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span><span class=\"o\">.[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xFF</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">targets</span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">targets</span>\n<span class=\"w\">                </span><span class=\"n\">copyBytes</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">opcodes</span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">nid</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">nip</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">aux2</span><span class=\"w\"> </span><span class=\"n\">instructionMap</span><span class=\"o\">.[</span><span class=\"n\">nip</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">targets</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">targets</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">targets</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">aux2</span><span class=\"w\"> </span><span class=\"n\">instr</span><span class=\"w\"> </span><span class=\"n\">rest</span>\n<span class=\"w\">            </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"n\">targets</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">[]</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">kvp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">programLayout</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">aux</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">kvp</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">,</span><span class=\"n\">instructionMap</span><span class=\"o\">.[</span><span class=\"n\">kvp</span><span class=\"o\">.</span><span class=\"n\">Key</span><span class=\"o\">]]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"n\">program</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now we can write out the array as a binary file and we should have the fully re-constructed virtual program that we can disassemble and reverse engineer.</p>\n\n<h2 id=\"dragon-masters\">Dragon Masters</h2>\n\n<p>IDA Pro sucessfully disassembles the program ready for static analysis. It&rsquo;s about 500 lines or so of assembler code.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/ida1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here we can see some of functions after they have been analysed and renamed. You can see I found <code>strlen</code> and <code>memset</code> equivalents, along with a few functions <code>xor1</code> and <code>xor2</code> that are called in various ways before <code>core_keygen</code> does the work of actually producing the serial.</p>\n\n<p>It is way too much to show here of course (please ask if you are interested!) but here&rsquo;s the piece of code we saw earlier where it was indexing into the alphabet, with some of its surrounding code.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/alpha_rev.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>I won&rsquo;t explain how the algorithm works exactly. Rather I have re-written the core of it, somewhat different since I have no need to programmatically generate the alphabet and such things. It is in C/C++ of course since it far easier to write all this very unsafe pointer stuff and bitwise manipulations.</p>\n\n<div class=\"brush: C\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">  1</span>\n<span class=\"normal\">  2</span>\n<span class=\"normal\">  3</span>\n<span class=\"normal\">  4</span>\n<span class=\"normal\">  5</span>\n<span class=\"normal\">  6</span>\n<span class=\"normal\">  7</span>\n<span class=\"normal\">  8</span>\n<span class=\"normal\">  9</span>\n<span class=\"normal\"> 10</span>\n<span class=\"normal\"> 11</span>\n<span class=\"normal\"> 12</span>\n<span class=\"normal\"> 13</span>\n<span class=\"normal\"> 14</span>\n<span class=\"normal\"> 15</span>\n<span class=\"normal\"> 16</span>\n<span class=\"normal\"> 17</span>\n<span class=\"normal\"> 18</span>\n<span class=\"normal\"> 19</span>\n<span class=\"normal\"> 20</span>\n<span class=\"normal\"> 21</span>\n<span class=\"normal\"> 22</span>\n<span class=\"normal\"> 23</span>\n<span class=\"normal\"> 24</span>\n<span class=\"normal\"> 25</span>\n<span class=\"normal\"> 26</span>\n<span class=\"normal\"> 27</span>\n<span class=\"normal\"> 28</span>\n<span class=\"normal\"> 29</span>\n<span class=\"normal\"> 30</span>\n<span class=\"normal\"> 31</span>\n<span class=\"normal\"> 32</span>\n<span class=\"normal\"> 33</span>\n<span class=\"normal\"> 34</span>\n<span class=\"normal\"> 35</span>\n<span class=\"normal\"> 36</span>\n<span class=\"normal\"> 37</span>\n<span class=\"normal\"> 38</span>\n<span class=\"normal\"> 39</span>\n<span class=\"normal\"> 40</span>\n<span class=\"normal\"> 41</span>\n<span class=\"normal\"> 42</span>\n<span class=\"normal\"> 43</span>\n<span class=\"normal\"> 44</span>\n<span class=\"normal\"> 45</span>\n<span class=\"normal\"> 46</span>\n<span class=\"normal\"> 47</span>\n<span class=\"normal\"> 48</span>\n<span class=\"normal\"> 49</span>\n<span class=\"normal\"> 50</span>\n<span class=\"normal\"> 51</span>\n<span class=\"normal\"> 52</span>\n<span class=\"normal\"> 53</span>\n<span class=\"normal\"> 54</span>\n<span class=\"normal\"> 55</span>\n<span class=\"normal\"> 56</span>\n<span class=\"normal\"> 57</span>\n<span class=\"normal\"> 58</span>\n<span class=\"normal\"> 59</span>\n<span class=\"normal\"> 60</span>\n<span class=\"normal\"> 61</span>\n<span class=\"normal\"> 62</span>\n<span class=\"normal\"> 63</span>\n<span class=\"normal\"> 64</span>\n<span class=\"normal\"> 65</span>\n<span class=\"normal\"> 66</span>\n<span class=\"normal\"> 67</span>\n<span class=\"normal\"> 68</span>\n<span class=\"normal\"> 69</span>\n<span class=\"normal\"> 70</span>\n<span class=\"normal\"> 71</span>\n<span class=\"normal\"> 72</span>\n<span class=\"normal\"> 73</span>\n<span class=\"normal\"> 74</span>\n<span class=\"normal\"> 75</span>\n<span class=\"normal\"> 76</span>\n<span class=\"normal\"> 77</span>\n<span class=\"normal\"> 78</span>\n<span class=\"normal\"> 79</span>\n<span class=\"normal\"> 80</span>\n<span class=\"normal\"> 81</span>\n<span class=\"normal\"> 82</span>\n<span class=\"normal\"> 83</span>\n<span class=\"normal\"> 84</span>\n<span class=\"normal\"> 85</span>\n<span class=\"normal\"> 86</span>\n<span class=\"normal\"> 87</span>\n<span class=\"normal\"> 88</span>\n<span class=\"normal\"> 89</span>\n<span class=\"normal\"> 90</span>\n<span class=\"normal\"> 91</span>\n<span class=\"normal\"> 92</span>\n<span class=\"normal\"> 93</span>\n<span class=\"normal\"> 94</span>\n<span class=\"normal\"> 95</span>\n<span class=\"normal\"> 96</span>\n<span class=\"normal\"> 97</span>\n<span class=\"normal\"> 98</span>\n<span class=\"normal\"> 99</span>\n<span class=\"normal\">100</span>\n<span class=\"normal\">101</span>\n<span class=\"normal\">102</span>\n<span class=\"normal\">103</span>\n<span class=\"normal\">104</span>\n<span class=\"normal\">105</span>\n<span class=\"normal\">106</span>\n<span class=\"normal\">107</span>\n<span class=\"normal\">108</span>\n<span class=\"normal\">109</span>\n<span class=\"normal\">110</span>\n<span class=\"normal\">111</span>\n<span class=\"normal\">112</span>\n<span class=\"normal\">113</span>\n<span class=\"normal\">114</span>\n<span class=\"normal\">115</span>\n<span class=\"normal\">116</span>\n<span class=\"normal\">117</span>\n<span class=\"normal\">118</span>\n<span class=\"normal\">119</span>\n<span class=\"normal\">120</span>\n<span class=\"normal\">121</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"dragon_slayer\"</span><span class=\"p\">;</span>\n<span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mh\">0x44</span><span class=\"p\">];</span>\n<span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"mh\">0x24</span><span class=\"p\">];</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x811C9DC5</span><span class=\"p\">;</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">magic2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x1000193</span><span class=\"p\">;</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">magic3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x7FFFFFFF</span><span class=\"p\">;</span>\n<span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">things1</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;1&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;2&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;3&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;4&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;5&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;6&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;7&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;8&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;9&#39;</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"sc\">&#39;A&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;B&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;C&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;D&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;E&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;G&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;H&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;I&#39;</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"sc\">&#39;J&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;K&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;L&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;M&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;N&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;O&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;P&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;Q&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;R&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"sc\">&#39;S&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;T&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;U&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;V&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;W&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;X&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;Y&#39;</span><span class=\"p\">,</span><span class=\"sc\">&#39;Z&#39;</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">xor2</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_rotl</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"mh\">0x10</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ROL 10</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">magic2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">xor1</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x44</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">nameLen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">nameLen</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">cnt1</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">magic2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xor2</span><span class=\"p\">(</span><span class=\"n\">magic2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">magic2</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">things1</span><span class=\"p\">[</span><span class=\"n\">cnt1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rem</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xor2</span><span class=\"p\">(</span><span class=\"n\">magic3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">magic3</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rem</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">core_keygen</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">nameLen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">nameLen</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt1</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">cnt1</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">bit1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">bit2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x2</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">bit3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x4</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">bit4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">bit5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x10</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">bit6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">bit7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x40</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bit1</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">bit2</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">bit3</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">bit4</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xor2</span><span class=\"p\">(</span><span class=\"mh\">0xFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bit1</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\">                </span>\n<span class=\"w\">                </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">xor2</span><span class=\"p\">(</span><span class=\"mh\">0xFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bit2</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xor2</span><span class=\"p\">(</span><span class=\"mh\">0xFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">)));</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">bit3</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\">  </span>\n<span class=\"w\">                </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xor2</span><span class=\"p\">(</span><span class=\"mh\">0xFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">)));</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bit4</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xor2</span><span class=\"p\">(</span><span class=\"mh\">0xFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">)));</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bit5</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bit6</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bit7</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">things1</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt2</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">the_most_magic_of_all</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">things2</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">cnt3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt3</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cnt3</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">the_most_magic_of_all</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">the_most_magic_of_all</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">the_most_magic_of_all</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"n\">cnt2</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"o\">+</span><span class=\"n\">cnt3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">xor1</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">core_keygen</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Once this program has finished, it leaves the calucalted serial in <code>serial[]</code> Bakunawa execpts it to be entered in two parts separated by a - character. Let&rsquo;s try it!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/bakunawa/win.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This was a very cool crackme that obviously had a great deal of time spent designing and writing it. It took me a couple of solid days&rsquo; work plus a few smaller sessions to finally achieve the end goal of writing and testing it. Most of the time was spent trying to understand the binary format. Thanks to Frank2 for writing it. It also includes several very cool chiptune tracks, though I was quite sick of them in the end and worked out which thread I needed to suspend to stop them from playing all the time!</p>")) ((? . 42) f post (u . "Enigma Machine – Type Provider Edition") (? . 42) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2015/01/23/enigma-machine-type-provider-edition/index.html" . windows) (u . "/blog\\2015\\01\\23\\enigma-machine-type-provider-edition/") (u . "2015-01-23T07:28:00") (? . 43) (? . 24) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>Following up from <a href=\"https://twitter.com/isaac_abraham\">@isaac_abraham&rsquo;s</a> awesome <a href=\"https://cockneycoder.wordpress.com/2014/12/24/demystifying-the-enigma-machine-with-f/\">F# Enigma machine emulator</a>, I decided it would be 10x cooler if it was in a type provider, because let&rsquo;s face it, everything is 10x cooler once it&rsquo;s in a type provider.</p>\n\n<p>Here a some pictures of it in action!</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/enigma1.jpg\"><img style=\"display: inline; border-width: 0px;\" title=\"enigma1\" src=\"../../../../../img/old/enigma1_thumb.jpg\" alt=\"enigma1\" width=\"538\" height=\"338\" border=\"0\" /></a> <a href=\"http://www.pinksquirrellabs.com/img/old/enigma2.png\"><img style=\"display: inline; border-width: 0px;\" title=\"enigma2\" src=\"../../../../../img/old/enigma2_thumb.png\" alt=\"enigma2\" width=\"604\" height=\"338\" border=\"0\" /></a></p>") #t (u . "\n<p>Following up from <a href=\"https://twitter.com/isaac_abraham\">@isaac_abraham&rsquo;s</a> awesome <a href=\"https://cockneycoder.wordpress.com/2014/12/24/demystifying-the-enigma-machine-with-f/\">F# Enigma machine emulator</a>, I decided it would be 10x cooler if it was in a type provider, because let&rsquo;s face it, everything is 10x cooler once it&rsquo;s in a type provider.</p>\n\n<p>Here a some pictures of it in action!</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/enigma1.jpg\"><img style=\"display: inline; border-width: 0px;\" title=\"enigma1\" src=\"../../../../../img/old/enigma1_thumb.jpg\" alt=\"enigma1\" width=\"538\" height=\"338\" border=\"0\" /></a> <a href=\"http://www.pinksquirrellabs.com/img/old/enigma2.png\"><img style=\"display: inline; border-width: 0px;\" title=\"enigma2\" src=\"../../../../../img/old/enigma2_thumb.png\" alt=\"enigma2\" width=\"604\" height=\"338\" border=\"0\" /></a></p>\n<!-- more-->\n\n<p>As you can see, it uses an extensive property system that presents a menu along with the various controls to setup your enigma machine, and then finally to translate some text. This TP is written with my <a href=\"https://github.com/pezipink/InteractiveProvider\">InteractiveProvider</a>as per usual. On my first attempt at this during my lunch break today, I did succeed but I was growing increasingly frustrated with the somewhat contrived mechanism with which to process responses from properties, the text to display in intellisense, and the properties to show.</p>\n\n<p></p>\n\n<h2>The Old System</h2>\n\n<p>The InteractiveProvider (henceforth known as IP) presents a very flexible yet slightly complicated interface with which to generate types. Essentially, you implement <em>IInteractiveState</em> on some state object of your design, and <em>IInteractiveServer</em> on another type, which deals with processing responses. The IP will display intellisense and options via the state, and when the user selects a property, the server decides what to do with it and returns some new state.</p>\n\n<p>This is very cool as your state object can be whatever you like &ndash; record types, DU&rsquo;s, or full classes. Responses to property access can similar be of any type you like, and can be different on each property if you like. The problems with this system are</p>\n\n<ol>\n <li>The creation of the text and properties is separate from the response handling of that property. This can make it hard to read and reason about.</li>\n <li>It is a bit unsafe because everything gets boxed, unboxed, and each time the server has to deal with a response, based on the current state you have to make sure you are dealing with the correct types coming back from the TP which can be a hit messy and detract from what you are really trying to do</li>\n <li>Although each state might require its own unique data, there is not any way to represent one thing without threading all the previous state through. For example, if I want the user to enter a bunch of letters via properties until they press the [End] property, I can&rsquo;t do this with just a string, Id have to carry the rest of whatever data I was using as well. This gets unwieldy quickly. There is no way to separate concerns.</li>\n <li>Again on with point 3, because of this it is not really possible to create re-usable chunks of state that perform common functions such as accepting input.</li></ol>\n\n<p></p>\n\n<h2></h2>\n\n<h2>The new system</h2>\n\n<p>In order to address this, I introduced another layer of abstraction, &lsquo;cos you can never have too many layers of abstraction right? :)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">InteractiveState</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">&#39;</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"kt\">obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">&#39;</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">&#39;</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"kt\">obj</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">&#39;</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">ProcessResponse</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">interface</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">DisplayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">DisplayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">state</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This new record type is essentially a super-duper state object. It brings together the creation of stuff and the processing of responses into the same place. You can see it takes 3 functions and a bit of state, &lsquo;a.</p>\n\n<ul>\n <li><em>displayOptions</em>will be called with the current <em>&lsquo;a</em> and is expected to generate a list of properties to display and a boxed version of some type that will be passed back to the server when the user selects that property.</li>\n <li><em>displayText</em> will be called with the current <em>&lsquo;a</em> and used to generate what appears in intellisense when this type is currently selected (more on this later)</li>\n <li><em>processResponse</em>will be called with the current &lsquo;<em>a</em> and is expected to return a new <em>IInteractiveState</em></li></ul>\n\n<p>Because this is a generic type, it does mean when you start to use these together, they are going to need the same <em>&lsquo;a</em> which is a bit of a pain, but it is readily solved by creating a DU of all the possible types that the various states in your system need.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">EnigmaTypes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nn\">EnigmaCore</span><span class=\"p\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Strings</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Rotors</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">MachineRotor</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">Enigma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Strings</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">Rotor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Rotors</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is not very nice but a very reasonable trade off for the power attained. Now the server object itself becomes very simple (infact this can be generalized as well)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Enigma</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">interface</span><span class=\"w\"> </span><span class=\"n\">IInteractiveServer</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">NewState</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">ProcessResponse</span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">obj</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:?&gt;</span><span class=\"n\">InteractiveState</span><span class=\"o\">&lt;</span><span class=\"n\">EnigmaTypes</span><span class=\"o\">&gt;)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">ProcessResponse</span><span class=\"o\">(</span><span class=\"n\">response</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h2></h2>\n\n<h2>Start Your Engines!</h2>\n\n<p>Now the system is ready to rock! You will notice when the server starts it calls <em>start()</em> to obtain its first state. All the states are now just instances of record types. <em>start()</em> looks like this</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s\">\"Begin!\"</span><span class=\"o\">,</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Welcome to the type provider Enigma machine!\"</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">mainMenu</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">defaultEnigma</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>this is as simple as it gets and not doing much interesting, you can see it returns one property &ldquo;Begin!&rdquo; along with a boxed unit type. I don&rsquo;t care about the response type as there is only one property so I know it must be that being selected.</p>\n\n<p><em>processResponse</em> simply creates the next state using the function <em>mainMenu( .. )</em> which it passes the current state, in this case the default version of the enigma machine.</p>\n\n<p><em>mainMenu(..)</em> is much more interesting and too long to show here, so I will show some extracts / condensed versions</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">MainMenuResponses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Nothing</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SelectLeftRotor</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SelectMiddleRotor</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SelectRightRotor</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SelectReflector</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SetWheelPosition</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SetRingPosition</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CreatePlugMapping</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Translate</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">mainMenu</span><span class=\"o\">(</span><span class=\"n\">enigma</span><span class=\"o\">:</span><span class=\"n\">EnigmaTypes</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"s\">\"# \"</span><span class=\"o\">,</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"n\">Nothing</span><span class=\"o\">;</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"s\">\"Select a new left rotor\"</span><span class=\"o\">,</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"n\">SelectLeftRotor</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"s\">\"Select a new middle rotor\"</span><span class=\"o\">,</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"nn\">SelectMiddleRotor</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printMachine</span><span class=\"w\"> </span><span class=\"n\">enigma</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">unbox</span><span class=\"o\">&lt;</span><span class=\"n\">MainMenuResponses</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Nothing</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">mainMenu</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SelectLeftRotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">enterText</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">,[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">8</span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sprintf</span><span class=\"w\"> </span><span class=\"s\">\"Rotor %i\"</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)],</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Choose the rotor to place on the left\"</span><span class=\"o\">),</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getRotor</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WheelPosition</span><span class=\"w\"> </span><span class=\"sc\">&#39;A&#39;</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">mainMenu</span><span class=\"o\">(</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"o\">),</span><span class=\"w\"> </span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>The first bits are pretty straight forward, it shows the various menu options and boxes which one was selected using the DU defined above. <em>processResponse</em> then unboxes the return value, matches on it, then does something with the result.</p>\n\n<p>In this case, it is calling another function called <em>enterText &ndash;</em> and this is where it gets really cool! <em>enterText</em> is defined as follows</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">enterText</span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">,</span><span class=\"n\">options</span><span class=\"o\">,</span><span class=\"n\">genDisplayText</span><span class=\"o\">,</span><span class=\"n\">continuation</span><span class=\"o\">,</span><span class=\"n\">repeatCondition</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">genDisplayText</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">:</span><span class=\"n\">EnigmaTypes</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">repeatCondition</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">enterText</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">options</span><span class=\"o\">,</span><span class=\"n\">genDisplayText</span><span class=\"o\">,</span><span class=\"n\">continuation</span><span class=\"o\">,</span><span class=\"n\">repeatCondition</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Strings</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function is designed based on the observation that when I want to accept an arbitrary amount of text from the user, the following is required</p>\n\n<ol>\n <li>A list of what inputs to be shown</li>\n <li>A way of knowing when to stop accepting more inputs (and recursively creating more types)</li>\n <li>A continuation function, that accepts the completed output and then generates some other state.</li></ol>\n\n<p>What is really awesome with is is that the <em>enterText</em> function simply takes a string &ndash; it doesn&rsquo;t know or care about the Enigma object &ndash; this is made possible by the fact that we can now create a closure over the previous state&rsquo;s data within the continuation lambda function, allowing us to decouple the recursive-text-entering portion of the type system. Very nice!</p>\n\n<h2>Engage Turbo Mode!</h2>\n\n<p>Great! now I can create re-usable state chunks and control stuff via closures. However, there is one more usually contrived problem that this system solves very well. Let&rsquo;s take the menu function <em>Adjust Wheel Position</em>. This one is a little bit of a pain because it requires several steps &ndash; first you must pick which wheel you want to manipulate, then you choose the letter you wish to set it to. Usually you would have to model these as separate states, which would be confusing if you wanted to do the same thing somewhere else - but now you can actually <em>compose</em> these functions and closures together so that the whole intent and flow is clear within the same definition. For example :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">selectMachineRotor</span><span class=\"o\">(</span><span class=\"n\">continutation</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">displayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"o\">[</span><span class=\"s\">\"Left Wheel\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"n\">LeftRotor</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"s\">\"Middle Wheel\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"n\">MiddleRotor</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"s\">\"Right Wheel\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"n\">RightRotor</span><span class=\"o\">]</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">displayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Select a rotor.\"</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">processResponse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">continutation</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:?&gt;</span><span class=\"n\">MachineRotor</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Rotors</span><span class=\"w\"> </span><span class=\"nn\">MachineRotor</span><span class=\"p\">.</span><span class=\"n\">LeftRotor</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function accepts a continuation function and asks the user to select a wheel, and calls the continuation function with their choice</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SetRingPosition</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LeftRotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">RingSetting</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MiddleRotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Middle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Middle</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">RingSetting</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Middle</span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RightRotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">RingSetting</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">selectMachineRotor</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">rotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\">   </span>\n<span class=\"w\">    </span><span class=\"n\">enterText</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">,[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sc\">&#39;A&#39;</span><span class=\"o\">..</span><span class=\"sc\">&#39;Z&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sprintf</span><span class=\"w\"> </span><span class=\"s\">\"%c\"</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Choose a letter\"</span><span class=\"o\">),</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RingSetting</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"n\">rotor</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">mainMenu</span><span class=\"o\">(</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"o\">),</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>When the <em>SetRingPosition</em> menu item is selected, it returns the <em>selectMachineRotor</em> function, and the continuation function passed to uses the <em>enterText</em> function allowing the user to pick a letter, and finally the result is applied to the Enigma object and the whole thin is returned back to the main menu. Very cool!</p>\n\n<p>Straight away this is useful as the <em>AdjustWheelPosition</em> menu item has to do a very similar thing</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SetWheelPosition</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LeftRotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MiddleRotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Middle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Middle</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RightRotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">Enigma</span><span class=\"o\">.</span><span class=\"n\">Right</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">selectMachineRotor</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">rotor</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">enterText</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">,[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sc\">&#39;A&#39;</span><span class=\"o\">..</span><span class=\"sc\">&#39;Z&#39;</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">sprintf</span><span class=\"w\"> </span><span class=\"s\">\"%c\"</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)],</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Choose a letter\"</span><span class=\"o\">),</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">WheelPosition</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"n\">rotor</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"n\">mainMenu</span><span class=\"o\">(</span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">),</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<h2>Conclusion</h2>\n\n<p>The IP has had a bit of a face-lift which makes it easier to write and read what is going on. Plus you can have an Enigma machine in a type provider. Who wouldn&rsquo;t want that! The code is a little bit of a mess at the moment, but I should clean it up soon and move the new super-state into the common interfaces project.</p>")) ((? . 44) f post (u . "CRUD Operations and Experimental ODBC support in the SQLProvider") (? . 44) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/05/18/crud-operations-and-experimental-odbc-support-in-the-sqlprovider/index.html" . windows) (u . "/blog\\2014\\05\\18\\crud-operations-and-experimental-odbc-support-in-the-sqlprovider/") (u . "2014-05-18T05:22:00") (? . 45) (? . 41) (c (u . "fsharp") c (u . "sqlprovider") c (u . "type providers")) (u . "\n<p>The SQL provider now supports basic transactional CRUD functionality and an ODBC provider. A new nuget package is up for you to grab <a href=\"https://www.nuget.org/packages/SQLProvider/0.0.9-alpha\">here</a>. As always, you can download and build from source <a href=\"https://github.com/fsprojects/SQLProvider\">here</a>.</p>\n\n<p>The nuget package is still pre-release. You can find it in Visual Studio by toggling the search filter to include pre-release packages. I'm sure Xamarin has a similar feature. Once this work has been tested well enough, I will likely upgrade the SQL Provider to a proper release.</p>") #t (u . "\n<p>The SQL provider now supports basic transactional CRUD functionality and an ODBC provider. A new nuget package is up for you to grab <a href=\"https://www.nuget.org/packages/SQLProvider/0.0.9-alpha\">here</a>. As always, you can download and build from source <a href=\"https://github.com/fsprojects/SQLProvider\">here</a>.</p>\n\n<p>The nuget package is still pre-release. You can find it in Visual Studio by toggling the search filter to include pre-release packages. I'm sure Xamarin has a similar feature. Once this work has been tested well enough, I will likely upgrade the SQL Provider to a proper release.</p>\n<!-- more-->\n\n<h2>Experimental ODBC Support</h2>\n\n<p>We now have support for general ODBC connectivity in the SQL provider. This provides us with awesome power to connect to almost anything, including Excel spreadsheets. However, because each driver can vary substantially, not all drivers may work, and others may have reduced functionality. ODBC is provided in the .NET core libraries, although you will of course need the appropriate ODBC driver installed on your machine for it to function.</p>\n\n<p>ODBC has Where, Select and Join support. If the source in question provides primary key information, you will also get Individuals. Although explicit joins are supported, foreign key constraint information and navigation are not yet available. The new CRUD operations are also supported, where appropriate. We will see how this works from ODBC later in the post.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">[&lt;</span><span class=\"n\">Literal</span><span class=\"o\">&gt;]</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">excelCs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">@\"Driver={Microsoft Excel Driver (*.xls)};DriverId=790;Dbq=I:\\test.xls;DefaultDir=I:\\;\"</span><span class=\"w\"> </span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">xl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"n\">excelCs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">ODBC</span><span class=\"o\">&gt;</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can use the new features with the following providers :</p>\n\n<ul>\n <li>SQL Server</li>\n <li>SQLite</li>\n <li>PostgreSQL</li>\n <li>MySQL</li>\n <li>Oracle</li>\n <li>ODBC (limited)</li></ul>\n\n<p>The following examples will use SQLite, but the mechanics are identical for all the providers.</p>\n\n<h2>CRUD Operations</h2>\n\n<p>IMPORTANT IMFORMATION ON RESTRICTIONS!</p>\n\n<p><em>The CRUD operations will only work for tables that have a well-defined, non composite primary key. Identity keys are fully supported.</em></p>\n\n<p>The data context is the core object that enables CRUD. It is important to understand that each data context you create from the type provider will track all entities that are modified from it. In a sense, the data context &ldquo;owns&rdquo; all of the entities returned by queries or that you have created. You can create more than one data context that have different connection strings at runtime. You can pass a different connection string in the GetDataContext method. This is an important concept as it allows you to connect to multiple instances of the same database, and even replicate data between them fairly easily.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ConnectionString</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">SQLITE</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ResolutionPath</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">ctx2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"o\">(</span><span class=\"s\">\"some other connection string\"</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>whenever you select entire entities from a data context, be that by a query expression or an Individual, the data context involved will track the entity. You can make changes to the fields by setting the relevant properties. You do not need to do anything else, as the data context handles everything for you.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">hardy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[main].[Customers]``</span><span class=\"o\">.</span><span class=\"n\">Individuals</span><span class=\"o\">.</span><span class=\"n\">``As ContactName``</span><span class=\"o\">.</span><span class=\"n\">``AROUT, Thomas Hardy``</span><span class=\"w\"> </span>\n<span class=\"n\">hardy</span><span class=\"o\">.</span><span class=\"n\">ContactName</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"s\">\"Pezi the Pink Squirrel\"</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">SubmitUpdates</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Note the call to SubmitUpdates() on the data context. This will take all pending changes to all entities tracked by the data context, and execute them in a transaction. An interesting property of the above code is that after Thomas Hardy has had his name changed, the first line will no longer compile! Go F#!</p>\n\n<p>Similarly, you can delete an entity by calling the Delete() method on it. This action will put the entity into a pending delete state.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">hardy</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"bp\">()</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">SubmitUpdates</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>After the deletion is committed, the data context will remove the primary key from the entity instance.</p>\n\n<p>Creation is slightly different. You will find various Create methods on the IQueryable Set types that represent the tables. Up to 3 different overloads of this method will be available. The first takes no parameters and will return a new entity which are you expected to populate with at least the required fields. A second version will accept the required fields as parameters &ndash; this is only available if there are any columns marked as NOT NULL. The final version will create an entity from a (string * obj) sequence &ndash; it is potentially unsafe but very handy for copying entities or creating them from some stream of data, if you know the attribute / column names are correct.</p>\n\n<p>A note on primary keys &ndash; presently the SQL provider does not detect identity columns, although it does deal with them on the insert appropriately. You will never see a primary key field as a parameter to the Create method. If your primary key is an identity column, you can simply not include it. Upon insert, the provider will automatically update the instance of the entity with the ID it has been assigned. If on the other hand your key is not an identity column, you will be expected to assign it an appropriate value before attempting to submit the changes to the database.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// create an employee </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">pez</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[main].[Employees]``</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"o\">(</span><span class=\"s\">\"Pezi\"</span><span class=\"o\">,</span><span class=\"s\">\"Squirrel\"</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">SubmitUpdates</span><span class=\"bp\">()</span>\n\n<span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"Pezi&#39;s new employee id is %i\"</span><span class=\"w\"> </span><span class=\"n\">pez</span><span class=\"o\">.</span><span class=\"n\">EmployeeID</span>\n\n<span class=\"c1\">//update something </span>\n<span class=\"n\">pez</span><span class=\"o\">.</span><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"s\">\"the forest\"</span><span class=\"w\"> </span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">SubmitUpdates</span><span class=\"bp\">()</span>\n\n<span class=\"c1\">// delete </span>\n<span class=\"n\">pez</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">SubmitUpdates</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now let&rsquo;s see how we can effortlessly combine different SQLProviders together in order to perform \"extract, transform, load\" type processes.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">sql</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"n\">northwindCs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">UseOptionTypes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">xl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SqlDataProvider</span><span class=\"o\">&lt;</span><span class=\"n\">excelCs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">DatabaseProviderTypes</span><span class=\"p\">.</span><span class=\"n\">ODBC</span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">northwind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">spreadsheet</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xl</span><span class=\"o\">.</span><span class=\"n\">GetDataContext</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">// load our tasty new employees from our lovely spreadsheet</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">newEmployees</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"n\">spreadsheet</span><span class=\"o\">.</span><span class=\"n\">``[].[Sheet1$]``</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">emp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">northwind</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Employees]``</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">FirstName</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">FirstName</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">LastName</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">LastName</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">emp</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span>\n\n<span class=\"c1\">// save those puppies away </span>\n<span class=\"n\">northwind</span><span class=\"o\">.</span><span class=\"n\">SubmitUpdates</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this sample we use the ODBC type provider to gain instant typed access to an Excel spreadsheet that contains some data about new employees. the SQL Server type provider is also used to connect to a Northwind database instance.</p>\n\n<p>We then very simply pull all the rows from the spreadsheet, map them to an Employee database record, and save them away. It doesn&rsquo;t get much easier than this!</p>\n\n<p>Or does it? Actually, in this case we know up front that the spreadsheet contains identical field names to that of the target database. In this case we can use the overload of Create that accepts a sequence of data &ndash; this method is unsafe, but if you know that the names match up it means you don&rsquo;t have to manually map any field names :)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">newEmployees</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"n\">spreadsheet</span><span class=\"o\">.</span><span class=\"n\">``[].[Sheet1$]``</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">northwind</span><span class=\"o\">.</span><span class=\"n\">``[dbo].[Employees]``</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">ColumnValues</span><span class=\"o\">))</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toList</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I think we can agree it really does not get much easier than that! You can also use this technique to easily copy data between different data contexts, as long as you watch out for primary and foreign keys where applicable.</p>\n\n<h2>Data Binding</h2>\n\n<p>The SQLProvider, with a fair amount of trickery, supports two-way data binding over its entities. This works together very well with the CRUD operations.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">System.Windows.Forms</span><span class=\"w\"> </span>\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">System.ComponentModel</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BindingList</span><span class=\"o\">(</span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">toArray</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">``[main].[Customers]``</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">form</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Form</span><span class=\"o\">(</span><span class=\"n\">Text</span><span class=\"o\">=</span><span class=\"s\">\"Edit Customers\"</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">dg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">DataGridView</span><span class=\"o\">(</span><span class=\"n\">Dock</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">DockStyle</span><span class=\"p\">.</span><span class=\"n\">Fill</span><span class=\"o\">,</span><span class=\"n\">DataSource</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">Controls</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">dg</span><span class=\"w\"> </span>\n<span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">Show</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_12.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_12.png\" alt=\"image\" width=\"1106\" height=\"417\" border=\"0\" /></a></p>\n\n<p>This is all the code you need to create a fully editable data grid. A call to SubmitUpdates() afterwards will push all the changes to the database.</p>\n\n<h2>Other Bits</h2>\n\n<p>The data context now has a few new methods on it that you can use.</p>\n\n<ol>\n <li>ClearPendingChanges() : Ronseal. Remove any tracked entities that have changed. Use this with caution, as subsequent changes to the entities will be tracked, but the previous changes will have been lost.</li>\n <li>GetPendingChanges() : This function will return a list of the entities the data context has tracked. This is useful in a variety of situations, and it also means you do not have to bind to created or updated entities in order to not &ldquo;lose&rdquo; them in your program.</li></ol>\n\n<div>The SQL Provider does not currently have any support for transactionally creating heirarchies of data - that is, where you are able to create foreign-key related entities within the same transaction. This feature may be added at a later date.</div>\n\n<div></div>\n\n<div>Shout outs to <a href=\"https://twitter.com/SimonHDickson\">@simonhdickson</a> for this work on the ODBC provider, and <a href=\"https://twitter.com/colinbul\">@colinbul</a> for the Oracle CRUD implementation, thanks guys!</div>\n\n<div></div>\n\n<div>Now I have done this, I can finally get on with my <strong><em>really</em></strong> important type providers, such as the <a href=\"http://pinksquirrellabs.com/post/2014/05/01/BASIC%E2%80%99s-50th-Anniversary-%E2%80%A6-and-more-crazy-F-type-providers!.aspx\">interactive provider</a> of which I was stuck with my current extension to it as I had no way to create data in my sqlite database! :)</div>")) ((? . 46) f post (u . "C64 Remote Programmer") (? . 46) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2018/11/21/c64-remote-programmer/index.html" . windows) (u . "/blog\\2018\\11\\21\\c64-remote-programmer/") (u . "2018-11-21T19:01:33") (? . 47) (? . 32) (c (u . "C64") c (u . "C") c (u . "fsharp") c (u . "raspberry pi") c (u . "electronics") c (u . "asi64") c (u . "6502")) (u . "\n<p>In this post I will describe a small electronics project designed to enable the remote programming of a real Commodore 64 that is switched on and running. To achieve this, several parts are involed, utilising some custom circuitry and communications protocol, a Raspberry Pi, a C program, a 6502 assembler program and a little F# program to finish it off.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/prog/programmer1.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>") #t (u . "\n<p>In this post I will describe a small electronics project designed to enable the remote programming of a real Commodore 64 that is switched on and running. To achieve this, several parts are involed, utilising some custom circuitry and communications protocol, a Raspberry Pi, a C program, a 6502 assembler program and a little F# program to finish it off.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/prog/programmer1.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n<!-- more-->\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Programming the C64 is a lot of fun, and mostly you can get by with using an <a href=\"http://vice-emu.sourceforge.net/\">emulator</a>. However, there comes a time when you wish to run your program on the real machine. To facilitate this, I own a very awesome <a href=\"http://www.1541ultimate.net/content/index.php\">1541 Ultimate 2</a> which mimics the <a href=\"https://en.wikipedia.org/wiki/Commodore_1541\">Commodore 1541</a> floppy drive and allows you to load things from a USB stick. Whilst this is really cool, it is still annoying having to keep moving the program from my main machine to the C64 with the stick to see small changes. The 1541 Ultimate 2 does have an ethernet port which I think you can use to send new code over (not sure how that works, or if it lets you change a running program&hellip;), but what I really want is a way whereby I have my program running on the C64, and then when I assemble a new version of the program on my main machine, it magically writes itself over the top of whatever is currently running, and starts executing on the C64 with no hard connection.</p>\n\n<h2 id=\"high-level-design\">High Level Design</h2>\n\n<p>The general idea is to connect the <a href=\"https://www.c64-wiki.com/wiki/User_Port\">C64&rsquo;s user port</a> to a <a href=\"https://www.raspberrypi.org/\">Raspberry Pi</a>, and design a protocol to transfer data from one to the other. The C64 side will have to include a small assembly program to do this, whilst the Pi will be running a small C program.</p>\n\n<p>The Pi is notified of a new program to send by monitoring a specific directory. The main machine, post-assembly, augments and sends the output file over <a href=\"https://en.wikipedia.org/wiki/Secure_copy\">SCP</a> to the Pi using a small F# program.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/prog/high-level.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"protocol-design\">Protocol Design</h2>\n\n<p>The C64 has a user port which is designed for us to connect our own circuits to. You must be careful, of course! You can easily damage the machine if you are not careful, and I don&rsquo;t know if my user port even works. The usable part of the port is essentially 10 pins &ndash; 8 data pins that form a register you can read at <code>$dd01</code>, and two pins you can use for handshaking with another device. Of these two pins, one is special - the <code>FLAG</code> pin. This pin is input only, and detects negative edges. Upon seeing a logic transition from HIGH to LOW, it sets a bit in the port&rsquo;s interrupt control register at <code>$dd0d</code>. This bit is cleared when you read the register. If you wish, you can also have it raise a non-maskable interrupt (NMI) enabling you to program with it asynchronously.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/prog/userport.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The C64&rsquo;s KERNAL has some routines that use this port to enable RS&ndash;232 communication. RS&ndash;232 is horribly slow however, being a serial protocol it transmits only a single bit at a time, with the protocol orchestration overhead on top of that. For my purposes, I want something much faster and less general. It doesn&rsquo;t need to be bullet-proof since it is only for my own use. I would like to use all 8 lines to transfer a whole byte at a time as a parrallel interface.</p>\n\n<p>Of course, the Raspberry Pi is ridiculously faster than the C64, so the top speed will be largely down to how fast the 6502 can process the incoming data. To that end, the C64 side of the programmer aims to do the least amount of work as possible, with hardly any logic and only copying of data.</p>\n\n<h3 id=\"low-level\">Low Level</h3>\n\n<p>The low-level handshaking and transmission details are as follows</p>\n\n<ul>\n <li>The Pi signals to the C64 there is a new byte available by cycling the <code>FLAG</code> line from HIGH to LOW and back again, after writing the bits to the 8 lines.</li>\n <li>The C64 loads the data and puts it somewhere, and then inverts the other handshaking line <code>PA2</code></li>\n <li>The Pi notices the C64 has finished with the data by polling <code>PA2</code>, and then sends the next byte.</li></ul>\n\n<h3 id=\"high-level\">High Level</h3>\n\n<p>The 6502 is very good at copying whole pages of data (256 bytes) since it can use its indexed addressing modes to whip through 256 bytes and easily check when it has finished. The data being sent, however, could be destined for any memory location and be of any length. Therefore, to simplify the job for the C64, we will send it some control bytes about any non-perfectly aligned data as a header, which will be the job of the C program on the Pi to compute.</p>\n\n<ul>\n <li>1 : low byte of the location to start executing once programming has finished</li>\n <li>2 : high byte</li>\n <li>3 : low byte of the location to being copying data to</li>\n <li>4 : high byte</li>\n <li>5 : total amount of full pages of data to copy</li>\n <li>6 : number of leading bytes that don&rsquo;t fill a page</li>\n <li>7 : number of trailing bytes that don&rsquo;t fill a page</li></ul>\n\n<p>The idea then is for the assembly program to:</p>\n\n<ul>\n <li>disable interrupts</li>\n <li>create a pointer to the start location</li>\n <li>copy the amount of leading bytes</li>\n <li>repeatedly copy the full pages</li>\n <li>copy the trailing bytes</li>\n <li>enable interrupts, splat the stack</li>\n <li>jump to the execution point</li></ul>\n\n<p>We will see how some of this is implemented later.</p>\n\n<h2 id=\"circuit-design\">Circuit Design</h2>\n\n<p>The C64 is of course an old device released back in 1983 (when I was born!) and as such it uses +/&ndash; 5v for its logic lines. The Pi is newer and uses the more modern +3.3v for its logic. This means they cannot directly communicate - whilst you can get away with sending 3.3v to a 5v pin, you shouldn&rsquo;t really, and sending 5v to a 3.3v pin is a definite no!</p>\n\n<p>To solve this problem you&rsquo;d typically use a <a href=\"https://www.adafruit.com/product/735\">level shifter</a>, however, I couldn&rsquo;t find one in my stuff so instead I decided to solve the problem in another way, by using a transistor switching circuit.</p>\n\n<p>One of the transistor&rsquo;s primary features is that is able to switch on a larger current / voltage using a very small one. We can use this feature to solve our problem. However, in its most basic configuration, this circuit is also a NOT gate - it inverts the input.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/prog/transistor-1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>We have 9 of these in total, one for each data pin and one for the <code>FLAG</code> pin. The transistor is switched on using the 3.3v logic, and it ouputs the opposite logic in 5v to the C64.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/prog/transistor-2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>And one of these for the <code>PA2</code> handshaking pin from the C64 to the Pi. It is the same, except it is switched on from the C64&rsquo;s 5v logic and outputs 3.3v.</p>\n\n<p>I have kept these diagrams high level since this post is not about the electronics really. I did extensive testing on each part of the circuit and the logic outputs from both devices before putting it all together. The picture below is the Pi&rsquo;s logic pins driving the transistors and LEDs using a small C program, acting as a binary counter.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/prog/programmer2.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Of course, since the circuits invert the logic, the received bytes will be incorrect. We can remedy this by either designing a more complex circuit, or changing how the data is sent / received. It makes sense in this instance to modify how the data is sent since I don&rsquo;t want to make the circuit more complex and I don&rsquo;t want the 6502 program to do anything it doesn&rsquo;t have to.</p>\n\n<h2 id=\"c-program\">C Program</h2>\n\n<p>The C program&rsquo;s job is to monitor a directory, and when it sees a new file, send it over the wire. It expects the first four bytes of the file will be the post-programming execution address and address to start writing the data as per the protocol section above (more on how these end up in the file in the final section)</p>\n\n<p>Some of the C program is quite boring, so we&rsquo;ll look at a couple of the more interesting parts. The library being used here is <a href=\"https://www.airspayce.com/mikem/bcm2835/\">bcm2835</a> to control the GPIO pins on the Pi.</p>\n\n<div class=\"brush: C\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">send_byte</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">// write inverted bits</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">PB7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"c1\">// c64 detects negative edge and sets an interrupt bit</span>\n<span class=\"w\">  </span>\n<span class=\"w\">  </span><span class=\"c1\">// get the current c64 output flag first</span>\n<span class=\"w\">  </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">pa2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcm2835_gpio_lev</span><span class=\"p\">(</span><span class=\"n\">PA2</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">FLAG2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HIGH</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// cycle the line low to trigger interrup</span>\n<span class=\"w\">  </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"p\">(</span><span class=\"n\">FLAG2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LOW</span><span class=\"p\">);</span><span class=\"w\">   </span><span class=\"c1\">// reset again</span>\n\n<span class=\"w\">  </span><span class=\"c1\">// now wait for the c64 to change its output flag</span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">bcm2835_gpio_lev</span><span class=\"p\">(</span><span class=\"n\">PA2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">pa2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">  </span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here we implement the low level details of the protocol, loading each bit of the byte onto the data lines, inverted so the circuit ends up outputting the correct value. Then it switches the <code>FLAG</code> line and waits for the C64 to respond by inverting <code>PA2</code>, indicating that it has taken the data (ack).</p>\n\n<div class=\"brush: C\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">      </span><span class=\"kt\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span><span class=\"s\">\"r\"</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">fseek</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_END</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">file_length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ftell</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">data_length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file_length</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">data_length</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">rewind</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">start_lo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fgetc</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">start_hi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fgetc</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">asm_lo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fgetc</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">asm_hi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fgetc</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"n\">fread</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">);</span>\n<span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_hi</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">asm_lo</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"data load complete. copy address at $%04X.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"p\">);</span>\n\n<span class=\"w\">      </span><span class=\"c1\">// work out how many bytes are on the first page</span>\n<span class=\"w\">      </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">first_page_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">);</span>\n\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">remaining_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data_length</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">first_page_bytes</span><span class=\"p\">;</span>\n\n<span class=\"w\">      </span><span class=\"c1\">// see how many full pages we can fit in</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">full_pages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">remaining_bytes</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">;</span>\n\n<span class=\"w\">      </span><span class=\"c1\">// and any final stragglers</span>\n<span class=\"w\">      </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">last_page_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">remaining_bytes</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">;</span>\n\n<span class=\"w\">      </span><span class=\"c1\">//now we can send to the C64!</span>\n<span class=\"w\">      </span><span class=\"c1\">//first send the control data.</span>\n<span class=\"w\">      </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"sending control headers..</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">start_lo</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">start_hi</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">asm_lo</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">asm_hi</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">full_pages</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">first_page_bytes</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">last_page_bytes</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">data_length</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">             </span><span class=\"n\">send_byte</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">);</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this code we extract the first 4 bytes from the file then read the rest into an array. Then we can work out any leading / trailing bytes as per the protocol description, and finally proceed to send the control header followed by the actual data. (this is not the actual code, but close enough - I changed it around to fit in the post)</p>\n\n<h2 id=\"6502-program\">6502 Program</h2>\n\n<p>For the C64 side, we want the program to be as small as possible. Obviously, it needs to fit somewhere inside your program, where you can call it every now and then to see if a new program has arrived. The location it lives should ideally remain static as your program changes, since the programmer will overwrite itself and it had better be in exactly the same place whilst it is doing it!</p>\n\n<p>For now, the perfect spot for this is the area that follows the BASIC program that is executed when the machine first boots. A common machine language trick is to put your own short basic program there, its purpose is to transfer control to your actual program so you don&rsquo;t have to type in <code>sys 4096</code> or similar in order to execute your code. This will also become important in the next section with the F# program.</p>\n\n<p>BASIC attempts to execute the program it tries to find at <code>$0801</code>. It expects the program to be in a special format which indicates some stuff to do with line numbers, and the PETSCII (Commodore character set - not the same as ASCII!) text of the BASIC source code to be interpreted. Some details will be glossed over here:</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"mh\">$0801</span>\n\n<span class=\"c1\">;autostart</span>\n<span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"mh\">$0b</span><span class=\"w\"> </span><span class=\"mh\">$08</span><span class=\"w\"> </span><span class=\"mh\">$01</span><span class=\"w\"> </span><span class=\"mh\">$00</span><span class=\"w\"> </span><span class=\"mh\">$9E</span><span class=\"w\"> </span><span class=\"mh\">$34</span><span class=\"w\"> </span><span class=\"mh\">$30</span><span class=\"w\"> </span><span class=\"mh\">$39</span><span class=\"w\"> </span><span class=\"mh\">$36</span><span class=\"w\"> </span><span class=\"mh\">$00</span><span class=\"w\"> </span><span class=\"mh\">$00</span><span class=\"w\"> </span><span class=\"mh\">$00</span><span class=\"p\">)</span>\n\n<span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"mh\">$1000</span><span class=\"w\"> </span><span class=\"c1\">; main program</span>\n\n<span class=\"c1\">; code here ...</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is written in my Racket based assembler, <a href=\"http://docs.racket-lang.org/asi64/index.html\">Asi64</a>. It is admittedly very cryptic, being simply a bunch of bytes. The first few are to do with the line numbers. <code>$9E</code> is the code for the <code>sys</code> instruction, followed by four bytes which represent in decimal, as PETSCII characters, the address to jump to. In this case, <code>$34 $30 $39 $36</code> corresponds to <code>4096</code> in decimal (subtract $30 from each character) which in turn is <code>$1000</code> in hex. Finally, the three <code>$00</code> bytes tell BASIC that the line has ended.</p>\n\n<p>Of course, we can write a nice helper in Asi64 to help us do this like you can in <a href=\"http://theweb.dk/KickAssembler/Main.html#frontpage\">KickAssembler</a></p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">basic</span><span class=\"o\">-</span><span class=\"n\">upstart</span><span class=\"w\"> </span><span class=\"mh\">$1000</span><span class=\"p\">)</span>\n\n<span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"mh\">$1000</span>\n\n<span class=\"c1\">; code here ...</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The area after the basic program is where we will stuff the remote programmer code. It should be as small as possible, but as long as it fits within the rest of the <code>$0800</code> page we should be fine. I have not optimised it for space yet, what I present below is the first thing I got to work properly!</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">:</span><span class=\"n\">programmer</span><span class=\"o\">-</span><span class=\"n\">check</span>\n<span class=\"w\">         </span><span class=\"c1\">;interrupt will be set on a negative transition</span>\n<span class=\"w\">         </span><span class=\"c1\">;indicating the pi has put the first byte of a program</span>\n<span class=\"w\">         </span><span class=\"c1\">;on the wire</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd0d</span>\n<span class=\"w\">         </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"mb\">%0001</span><span class=\"n\">_0000</span>\n<span class=\"w\">         </span><span class=\"c1\">;if this bit is set then</span>\n<span class=\"w\">         </span><span class=\"c1\">;jump. reading this also clears it.</span>\n<span class=\"w\">         </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">receive</span><span class=\"o\">-</span><span class=\"n\">program</span><span class=\"o\">+</span>\n<span class=\"w\">         </span><span class=\"k\">rts</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This function checks the interrupt register, and returns if it has not been set. Using <a href=\"http://docs.racket-lang.org/asi64/index.html#%28part._.Code_.Diagnostics%29\">Asi64&rsquo;s diagnostics</a> reveals this code takes 14 cycles if the branch is not taken, so you can comfortably fit a call into this function somewhere in your program, perhaps once a frame.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">:</span><span class=\"n\">wait</span>\n<span class=\"w\">         </span><span class=\"c1\">;toggle pa2 to let the pi know we are done</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd00</span>\n<span class=\"w\">         </span><span class=\"k\">eor</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"mb\">%0000</span><span class=\"n\">_0100</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$dd00</span>\n<span class=\"w\">         </span><span class=\"c1\">;wait for pi to send a new byte</span>\n<span class=\"p\">:</span><span class=\"n\">inner</span><span class=\"w\">   </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd0d</span>\n<span class=\"w\">         </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"mb\">%0001</span><span class=\"n\">_0000</span><span class=\"w\">                    </span>\n<span class=\"w\">         </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"o\">-</span>\n\n<span class=\"w\">         </span><span class=\"k\">rts</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Next up is this function that waits for a new byte to arrive. First, it toggles the <code>PA2</code> pin indcitating to the Pi that the last byte was been received, and then it sits polling the interrupt register waiting for the new byte to arrive.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">:</span><span class=\"n\">receive</span><span class=\"o\">-</span><span class=\"n\">program</span><span class=\"w\">   </span>\n<span class=\"w\">    </span>\n<span class=\"w\">         </span><span class=\"c1\">;some zero page addresses</span>\n<span class=\"w\">         </span>\n<span class=\"w\">         </span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">         </span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">hi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">$41</span>\n<span class=\"w\">         </span><span class=\"n\">total</span><span class=\"o\">-</span><span class=\"n\">pages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">$43</span>\n<span class=\"w\">         </span><span class=\"n\">first</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">$44</span>\n<span class=\"w\">         </span><span class=\"n\">last</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">$45</span>\n<span class=\"w\">         </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">$46</span>\n<span class=\"w\">         </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">hi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">$47</span>\n\n<span class=\"w\">         </span><span class=\"c1\">;disable interrupts whilst loading  </span>\n<span class=\"w\">         </span><span class=\"k\">cli</span>\n\n<span class=\"w\">         </span><span class=\"c1\">;read in the control bytes,</span>\n<span class=\"w\">         </span><span class=\"c1\">;todo: write these as an indexed loop</span>\n<span class=\"w\">         </span><span class=\"c1\">;to save space</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">lo</span>\n<span class=\"w\">         </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"o\">-</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">hi</span>\n<span class=\"w\">         </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"o\">-</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">lo</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">hi</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"o\">-</span><span class=\"n\">pages</span>\n<span class=\"w\">         </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"o\">-</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span><span class=\"w\">         </span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span>\n<span class=\"w\">         </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"o\">-</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This first section reads in the control bytes from the header and stores them in the zero-page. Notably, the <code>data-ptr-lo</code> and <code>data-ptr-high</code> are set to the first address where we should copy data, and it is this pointer that will be manipulated throughout the copy. Notice here the call to <code>cli</code> disables interrupts. This is important, since we are taking over the machine to re-write the program, we don&rsquo;t want the user&rsquo;s interrupt code suddenly trying to execute in the middle of the data transfer!</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">         </span><span class=\"c1\">;read/write first page bytes</span>\n<span class=\"w\">         </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">         </span><span class=\"k\">ldy</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"c1\">;skip if zero</span>\n<span class=\"w\">         </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"c1\">;         </span>\n<span class=\"w\">         </span><span class=\"c1\">; read until end of page</span>\n<span class=\"w\">      </span><span class=\"p\">:</span><span class=\"n\">next</span>\n<span class=\"w\">         </span><span class=\"c1\">;wait for and read the next byte</span>\n<span class=\"w\">         </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"o\">-</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"c1\">;store it offset with the Y register</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"err\">�</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">         </span><span class=\"c1\">;increase Y and check if we are done</span>\n<span class=\"w\">         </span><span class=\"k\">iny</span>\n<span class=\"w\">         </span><span class=\"k\">cpy</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span>\n<span class=\"w\">         </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">next</span><span class=\"o\">-</span>\n\n<span class=\"w\">         </span><span class=\"c1\">;move to next page</span>\n<span class=\"w\">         </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">hi</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">lo</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This section deals with copying the leading bytes, if there are any. It reads and stores each byte at the <code>data-ptr</code> pointer, offset by the Y register. The loop uses Y to count up until the target amount of bytes have been transferred. The 6502 is better at counting down since you don&rsquo;t need an explicit compare instruction to check for zero, but it would have complicated the protocol too much for not a lot of gain, since this copies at most 255 bytes of data.</p>\n\n<p>Once it has finished, we know we are at the end of the page, so <code>data-ptr-lo</code> is set to zero whilst <code>data-ptr-hi</code> is increased by one, leaving us at the start of the next page ready for the full pages of data.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">     </span><span class=\"p\">:</span><span class=\"n\">main</span>\n<span class=\"w\">         </span><span class=\"k\">ldy</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">         </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"o\">-</span><span class=\"n\">pages</span>\n<span class=\"w\">         </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"o\">+</span><span class=\"w\">         </span><span class=\"c1\">;skip if zero</span>\n<span class=\"w\">         </span><span class=\"c1\">;copy whole pages</span>\n<span class=\"w\">     </span><span class=\"p\">:</span><span class=\"n\">loop</span>\n<span class=\"w\">         </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"o\">-</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"err\">�</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\">    </span>\n<span class=\"w\">         </span><span class=\"k\">iny</span>\n<span class=\"w\">         </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"o\">-</span>\n<span class=\"w\">         </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">hi</span>\n<span class=\"w\">         </span><span class=\"k\">dex</span>\n<span class=\"w\">         </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"o\">-</span><span class=\"w\">              </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The main loop for copying bytes uses the X register to count down how many pages we have left to copy, whilst the Y register is increased through 256 values until it overflows. When this happens, 1 is added to <code>data-ptr-hi</code> moving us to the next page. This process repeats until X reaches zero and the whole pages have been copied.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">     </span><span class=\"p\">:</span><span class=\"n\">last</span>\n<span class=\"w\">        </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span>\n<span class=\"w\">        </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"n\">done</span><span class=\"o\">+</span>\n<span class=\"w\">     </span><span class=\"p\">:</span><span class=\"n\">loop</span>\n<span class=\"w\">        </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"o\">-</span>\n<span class=\"w\">        </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd01</span>\n<span class=\"w\">        </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"err\">�</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">ptr</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\">        </span>\n<span class=\"w\">        </span><span class=\"k\">iny</span>\n<span class=\"w\">        </span><span class=\"k\">cpy</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"o\">-</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"n\">bytes</span>\n<span class=\"w\">        </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"o\">-</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The final loop copies any trailing bytes and is very similar to the first loop.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">      </span><span class=\"p\">:</span><span class=\"n\">done</span>\n<span class=\"w\">        </span><span class=\"c1\">;toggle pa2 to let the pi know we are done</span>\n<span class=\"w\">        </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd00</span>\n<span class=\"w\">        </span><span class=\"k\">eor</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"mb\">%0000</span><span class=\"n\">_0100</span>\n<span class=\"w\">        </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$dd00</span>\n<span class=\"w\">        </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"w\">        </span><span class=\"c1\">;delay to let the pin settle </span>\n<span class=\"w\">      </span><span class=\"p\">:</span><span class=\"n\">delay</span>\n<span class=\"w\">        </span><span class=\"k\">dex</span>\n<span class=\"w\">        </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">delay</span><span class=\"o\">-</span>\n<span class=\"w\">        </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"w\">      </span><span class=\"p\">:</span><span class=\"n\">delay</span>\n<span class=\"w\">        </span><span class=\"k\">dex</span>\n<span class=\"w\">        </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">delay</span><span class=\"o\">-</span>\n<span class=\"w\">        </span><span class=\"c1\">;splat stack</span>\n<span class=\"w\">        </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"n\">@$ff</span>\n<span class=\"w\">        </span><span class=\"k\">txs</span>\n<span class=\"w\">        </span><span class=\"c1\">;re-enable interrupts</span>\n<span class=\"w\">        </span><span class=\"k\">sei</span>\n<span class=\"w\">        </span><span class=\"c1\">;transfer exection to start address</span>\n<span class=\"w\">        </span><span class=\"k\">jmp</span><span class=\"w\"> </span><span class=\"err\">�</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"o\">-</span><span class=\"n\">lo</span><span class=\"w\"> </span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now that all the data has been received, the final ceremony Ack&rsquo;s the last byte that was received, then it delays a bunch of cycles to make sure the Pi sees the Ack before the new program begins. This was guesswork rather than science, the speed doesn&rsquo;t really matter at this point.</p>\n\n<p>The next part is very important. Since we don&rsquo;t know where this code was called from and we want to start executing the new program &ldquo;from scratch&rdquo; we reset the machine&rsquo;s stack pointer right back to <code>$ff</code> where it starts from. Then we switch the interrupts back on, and use the indirect jump instruction to transfer program execution to the new program.</p>\n\n<p>The whole thing fits into about 170 bytes, which is not bad. With a little work it could probably be sqaushed into under half a page.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"n\">@0</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$dd03</span><span class=\"w\">  </span><span class=\"c1\">;pin all inputs</span>\n\n<span class=\"w\">         </span><span class=\"c1\">;pa2 is an output</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd02</span><span class=\"w\">         </span>\n<span class=\"w\">         </span><span class=\"k\">ora</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"mb\">%0000</span><span class=\"n\">_0100</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$dd02</span>\n\n<span class=\"w\">         </span><span class=\"c1\">;pa2 starts HIGH (inverted)</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd00</span>\n<span class=\"w\">         </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"mb\">%1111</span><span class=\"n\">_1011</span>\n<span class=\"w\">         </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$dd00</span>\n\n<span class=\"w\">         </span><span class=\"c1\">;clear any pending int</span>\n<span class=\"w\">         </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dd0d</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>One last thing separate from the main program - this small piece of code must go at the start of your program somewhere, it does the boring job of setting up the user port pins properly and clearing any waiting interrupts, leaving the program ready to receive.</p>\n\n<h2 id=\"f-program\">F# Program</h2>\n\n<p>Ideally, I&rsquo;d have Asi64 automatically send the new program over SCP once it has finished assembling. However, I haven&rsquo;t found a nice way of doing so with Racket yet, so for this initial prototype I instead decided to write a small F# program that will watch a directory for changes and copy the files as appropriate using <a href=\"https://github.com/sshnet/SSH.NET\">SSH.NET</a></p>\n\n<p>Of course, things are never quite that straight-forward. The assembler outputs the binary program in a format that the emulator and machine expect. In particular, the first two bytes of the file are the address in the computer where the data should begin. This correlates nicely to bytes 3 and 4 of our protocol headers. However, we are missing one part which is the execution address itself.</p>\n\n<p>Since in this initial version, we know the programs will be using the BASIC upstart program, we can have a look through the binary, locate this code and extract from it the execution address, which can then be prepended to the file before it is sent to the other machine. This is not ideal but it is fine for this version of the project.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">[&lt;</span><span class=\"n\">EntryPoint</span><span class=\"o\">&gt;]</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"%A\"</span><span class=\"w\"> </span><span class=\"n\">argv</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">client</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">ScpClient</span><span class=\"o\">(</span><span class=\"s\">\"192.168.0.20\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"pi\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"raspberry\"</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">sendFile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">:</span><span class=\"n\">FileInfo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stream</span><span class=\"o\">:</span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">IO</span><span class=\"p\">.</span><span class=\"n\">MemoryStream</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"sending file %s ...\"</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FullName</span>\n<span class=\"w\">        </span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Connect</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Upload</span><span class=\"o\">(</span><span class=\"n\">stream</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"/home/pi/projects/c64/waiting/\"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Disconnect</span><span class=\"bp\">()</span>\n\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">trySend</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">fi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FileInfo</span><span class=\"w\"> </span><span class=\"n\">file</span>\n<span class=\"w\">        </span><span class=\"c1\">// try and find the basic startup program that </span>\n<span class=\"w\">        </span><span class=\"c1\">// tells us where the execution point is</span>\n<span class=\"w\">        </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Threading</span><span class=\"p\">.</span><span class=\"nn\">Thread</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">File</span><span class=\"p\">.</span><span class=\"n\">ReadAllBytes</span><span class=\"w\"> </span><span class=\"n\">fi</span><span class=\"o\">.</span><span class=\"n\">FullName</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">function</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xbuy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x9euy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span>\n<span class=\"w\">                  </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"o\">&lt;|</span>\n<span class=\"w\">                        </span><span class=\"nn\">Int32</span><span class=\"p\">.</span><span class=\"n\">Parse</span><span class=\"o\">(</span><span class=\"n\">sprintf</span><span class=\"w\"> </span><span class=\"s\">\"%i%i%i%i\"</span><span class=\"w\"> </span>\n<span class=\"w\">                            </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                            </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">))</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xbuy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x9euy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span>\n<span class=\"w\">                  </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0uy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"o\">&lt;|</span>\n<span class=\"w\">                        </span><span class=\"nn\">Int32</span><span class=\"p\">.</span><span class=\"n\">Parse</span><span class=\"o\">(</span><span class=\"n\">sprintf</span><span class=\"w\"> </span><span class=\"s\">\"%i%i%i%i%i\"</span><span class=\"w\"> </span>\n<span class=\"w\">                            </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">)</span><span class=\"w\"> </span>\n<span class=\"w\">                            </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">)</span>\n<span class=\"w\">                            </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x30uy</span><span class=\"o\">))</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">None</span>\n<span class=\"w\">            </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">newBytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"c1\">// little endian   </span>\n<span class=\"w\">                            </span><span class=\"o\">[|</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"o\">(</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xFF</span><span class=\"o\">);</span>\n<span class=\"w\">                               </span><span class=\"kt\">byte</span><span class=\"o\">((</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xFF</span><span class=\"o\">);</span><span class=\"w\"> </span><span class=\"o\">|]</span>\n<span class=\"w\">                            </span><span class=\"n\">bytes</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">MemoryStream</span><span class=\"o\">(</span><span class=\"n\">newBytes</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">sendFile</span><span class=\"w\"> </span><span class=\"n\">fi</span><span class=\"w\"> </span><span class=\"n\">stream</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"could not find execution point for %s\"</span><span class=\"w\"> </span><span class=\"n\">fi</span><span class=\"o\">.</span><span class=\"n\">FullName</span>\n\n\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">watch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">FileSystemWatcher</span><span class=\"o\">(</span><span class=\"n\">argv</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">])</span>\n<span class=\"w\">    </span><span class=\"n\">watch</span><span class=\"o\">.</span><span class=\"n\">Created</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Event</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">FullPath</span><span class=\"o\">.</span><span class=\"n\">EndsWith</span><span class=\"w\"> </span><span class=\"s\">\".prg\"</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                            </span><span class=\"n\">trySend</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">FullPath</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">watch</span><span class=\"o\">.</span><span class=\"n\">EnableRaisingEvents</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Threading</span><span class=\"p\">.</span><span class=\"nn\">Thread</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>In this not-very-nice F# code, a <code>FileSystemWatcher</code> is used to raise events indicating files have changed in the directory that is passed as a command line parameter. The code then scans through the binary data attempting to find the BASIC program, where it extracts the execution address, appends it to the original bytes litte-endian style and finally sends the data across to the Pi via SCP.</p>\n\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n\n<p>Measuring this first version on my scope reveals the <code>PA2</code> pin transitioning at about 50 microseconds, yielding a transfer rate of about 20khz, or almost 20kb of data per second, which is not too bad at all. It is very cool to use the laptop from anywhere, assemble some new code and see it run automatically on the C64 across the room! Whilst this version is designed to overwrite an entire program, the protocol has no such limitations and will copy some bytes to any location you like. It is not hard to imagine that with a little work you could setup a REPL style system for assembler code, allowing you to send and execute small snippets on the real machine.</p>\n\n<p>The next step is to take the hardware and make a more permanent circuit with it instead of it being on a breadboard, so you can simply plug it into a C64 and Pi running the correct software.</p>")) ((? . 29) f post (u . "The Don Syme type provider") (? . 29) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/02/21/the-don-syme-type-provider/index.html" . windows) (u . "/blog\\2014\\02\\21\\the-don-syme-type-provider/") (u . "2014-02-21T07:21:00") (? . 28) (? . 10) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>Someone asked me what the secret type provider I am working on is.&#160; I neglected to tell them, and instead joked that it would be the Don Syme type provider.&#160; Later I reflected that the idea had actually been a stroke of genius, so just knocked this together in 20 of your English minutes – the Don Syme fact provider!&#160; It will produce an endless stream of true facts about the mystery man known as the Father of F#.&#160; Get it from my github <a href=\"https://github.com/pezipink/DonSymeProvider\">here</a>.</p>\n\n<p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/image_4.png\"><img title=\"image\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px\" border=\"0\" alt=\"image\" src=\"../../../../../img/old/image_thumb_4.png\" width=\"838\" height=\"186\" /></a></p> \n <p>&#160;<a href=\"http://www.pinksquirrellabs.com/img/old/image_6.png\"><img title=\"image\" style=\"border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline\" border=\"0\" alt=\"image\" src=\"../../../../../img/old/image_thumb_6.png\" width=\"972\" height=\"115\" /></a></p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/image_5.png\"><img title=\"image\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px\" border=\"0\" alt=\"image\" src=\"../../../../../img/old/image_thumb_5.png\" width=\"1011\" height=\"250\" /></a></p></p>") #t (u . "\n<p>Someone asked me what the secret type provider I am working on is.&#160; I neglected to tell them, and instead joked that it would be the Don Syme type provider.&#160; Later I reflected that the idea had actually been a stroke of genius, so just knocked this together in 20 of your English minutes – the Don Syme fact provider!&#160; It will produce an endless stream of true facts about the mystery man known as the Father of F#.&#160; Get it from my github <a href=\"https://github.com/pezipink/DonSymeProvider\">here</a>.</p>\n\n<p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/image_4.png\"><img title=\"image\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px\" border=\"0\" alt=\"image\" src=\"../../../../../img/old/image_thumb_4.png\" width=\"838\" height=\"186\" /></a></p> \n <p>&#160;<a href=\"http://www.pinksquirrellabs.com/img/old/image_6.png\"><img title=\"image\" style=\"border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline\" border=\"0\" alt=\"image\" src=\"../../../../../img/old/image_thumb_6.png\" width=\"972\" height=\"115\" /></a></p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/image_5.png\"><img title=\"image\" style=\"border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px\" border=\"0\" alt=\"image\" src=\"../../../../../img/old/image_thumb_5.png\" width=\"1011\" height=\"250\" /></a></p></p>\n<!-- more-->")) ((? . 38) f post (u . "Reversing - xor0_crackme_1") (? . 38) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2019/05/08/reversing-xor0-crackme-1/index.html" . windows) (u . "/blog\\2019\\05\\08\\reversing-xor0-crackme-1/") (u . "2019-05-08T12:59:04") (? . 13) (? . 37) (c (u . "cracking") c (u . "reverse engineering")) (u . "\n<p>In a <a href=\"http://pinksquirrellabs.com/blog/2018/01/01/reversing-lcm6-exe/\">previous article</a> I described the process of reverse-engineering a <a href=\"https://crackmes.one/lasts\">crackme</a>. These are programs designed to be broken with various counter-mesaures and challenges. As a break from my hardware work, I thought I would have a go at another one.</p>") #t (u . "\n<p>In a <a href=\"http://pinksquirrellabs.com/blog/2018/01/01/reversing-lcm6-exe/\">previous article</a> I described the process of reverse-engineering a <a href=\"https://crackmes.one/lasts\">crackme</a>. These are programs designed to be broken with various counter-mesaures and challenges. As a break from my hardware work, I thought I would have a go at another one.</p>\n<!-- more-->\n\n<h2 id=\"crackme\">Crackme</h2>\n\n<p>The crackme in question <a href=\"https://crackmes.one/crackme/5cca153f33c5d4419da55968\">is this one</a>, the newest available on the site at the time. If you want to give it a go, you should stop reading since there are major spoilers ahead! I&rsquo;ll try to write keygen(s) where suitable, or at least gain enough knowledge to pass the checks and be able to write a keygen.</p>\n\n<p>Initial analysis shows a unobsfucated C# program, that calls into helper.dll in order to produce the result.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The dll is a native one. After finding the exported function, we can see it is calling into the windows api to get the current time. Then there is a switch on the day of the week, where each day calls a different function with the passed <code>name</code> and <code>serial</code> arguments.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>(in the picture, I have patched the program, hardcoding the day whilst I am working on it. The original code used the day of week from the SYSTEMTIME struct returned frm the GetLocalTime API call.)</p>\n\n<h1 id=\"sunday\">Sunday</h1>\n\n<p>Let&rsquo;s look at Sunday&rsquo;s function</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/4.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>We can see here it passes the serial along to some other function, checks the result is 0x13, and if it is, it then checks each byte matches a hard-coded serial of <code>A10-57617274-686F76</code>. The other function is almost certainly some kind of strlen, then, since the serial is 0x13 characters long:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/5.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Indeed it is a typical implementation of strlen, which I have labelled as such since it is likely going to turn up again yet.</p>\n\n<p>From this we can deduce it doesn&rsquo;t matter what the <code>name</code> parameter is, and the serial is hardcoded to <code>A10-57617274-686F76</code></p>\n\n<h1 id=\"monday\">Monday</h1>\n\n<p>Monday&rsquo;s function first tries to load a file &ldquo;xor0.rox&rdquo; and checks that it is exactly 0x20 bytes long. If so it then reads the contents into a buffer in memory. This appears to be some kind of license style file.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/6.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here it XORs the 4th character of the user name with the 5th character of the serial number, and depending on the result, might add 1 to it. Let&rsquo;s call this the magic number. It then checks if this number appears at the 5th byte of the loaded file (the address <code>1000E384</code> is the buffer + 4).</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/7.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This code checks that the first four bytes are equal to 0xDEADC0DE.</p>\n\n<p>Therefore our little-endian license file currently looks like this, based on a username of <code>name12345</code> and serial <code>serial</code>.</p>\n\n<p>DEC0ADDE04 (+ 0x1b more bytes)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/8.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The last part is quite a lot more tricky. The code here basically sums the remaining 0x1b bytes, failing if any of them are zero. It then multiplies the result with the magic number, and XORs the result with the last 32 bits in the file. The result must produce <code>0xFACE0FB0</code>.</p>\n\n<p>I&rsquo;m sure there&rsquo;s a nice maths way to work out the possible solutions - I decided to work backwards until I can produce a working license file for my name and serial combination, based on the following observations:</p>\n\n<ul>\n <li>No bytes can be zero</li>\n <li>The sum, before multiplication, includes the last four bytes that will eventually be XORd</li>\n <li>Because we are adding up 0x1b bytes then multiplying by (in this case) 4, the maximum number is not very large compared to the 32 bit number comprising of the last 4 bytes.</li></ul>\n\n<p>I picked the number 0xFACE1C24 to go into the file, which when XORd with 0xFACE0FB0 leaves us with 0x1394, a number that is evenly divisble by 4, resulting in 0x4e5.</p>\n\n<p>We already have a part of the sum in the file : 0xFA + 0xCE + 0x1C + 0x24 = 0x208</p>\n\n<p>This leaves us with 0x2dd to spread over the remaining 0x17 bytes, which works out as 0x16 * 0x1f bytes and the last byte of 0x33.</p>\n\n<p>The finished license file looks like this and passes the check.</p>\n\n<p>DEC0ADDE041F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F33241CCEFA</p>\n\n<h1 id=\"tuesday\">Tuesday</h1>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/9.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The first thing Tuesday does is copy the username into an area of memory that is 0x20 bytes long. If the username is not long enough it is repeated until all the memory is used up (<code>IDIV</code> is being used for the remainder here)</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/10.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This next bit of code is quite interesting, it uses the special <code>CPUID</code> instruction that writes various information into the registers about the current processor. The code then swaps, xors and generally mixes together a bunch of them to produce a magic number.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/11.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The following loop then cycles through the memory buffer from earlier, XORing each 4 bytes with the magic number, leaving an encrypted form of the repeated username.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/12.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The first lines here check that the first byte of the serial is <code>0x2D303154</code> which if you look at in ASCII with the correct endian-ness is <code>T10-</code>. The rest of the code is a couple of loops worth of number crunching to generate the final result. You can see it replicated here in this beautiful keygen:</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span>\n<span class=\"normal\">65</span>\n<span class=\"normal\">66</span>\n<span class=\"normal\">67</span>\n<span class=\"normal\">68</span>\n<span class=\"normal\">69</span>\n<span class=\"normal\">70</span>\n<span class=\"normal\">71</span>\n<span class=\"normal\">72</span>\n<span class=\"normal\">73</span>\n<span class=\"normal\">74</span>\n<span class=\"normal\">75</span>\n<span class=\"normal\">76</span>\n<span class=\"normal\">77</span>\n<span class=\"normal\">78</span>\n<span class=\"normal\">79</span>\n<span class=\"normal\">80</span>\n<span class=\"normal\">81</span>\n<span class=\"normal\">82</span>\n<span class=\"normal\">83</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"cp\">#define cpuid__asm __emit 0fh __asm __emit 0a2h</span>\n\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kr\">__stdcall</span><span class=\"o\">*</span><span class=\"n\">func</span><span class=\"p\">)(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">);</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">tuesday</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"mh\">0x20</span><span class=\"p\">];</span>\n<span class=\"w\">\t</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// cpuid magic</span>\n<span class=\"w\">\t</span><span class=\"kr\">__asm</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">\t\t</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">eax</span>\n<span class=\"w\">\t\t</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">ebx</span>\n<span class=\"w\">\t\t</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">ecx</span>\n<span class=\"w\">\t\t</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">edx</span>\n\n<span class=\"w\">\t\t</span><span class=\"n\">MOV</span><span class=\"w\"> </span><span class=\"n\">EAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">\t\t</span><span class=\"n\">cpuid</span>\n<span class=\"w\">\t\t</span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">EBX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EDX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">BSWAP</span><span class=\"w\"> </span><span class=\"n\">ECX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">EBX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ECX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">PUSH</span><span class=\"w\"> </span><span class=\"n\">EBX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">MOV</span><span class=\"w\"> </span><span class=\"n\">EAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">\t\t</span><span class=\"n\">cpuid</span>\n<span class=\"w\">\t\t</span><span class=\"n\">BSWAP</span><span class=\"w\"> </span><span class=\"n\">EAX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">EDX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ECX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">EAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EDX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">POP</span><span class=\"w\"> </span><span class=\"n\">EBX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">EAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EBX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">XCHG</span><span class=\"w\"> </span><span class=\"n\">AL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AH</span>\n\n<span class=\"w\">\t\t</span><span class=\"n\">MOV</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EAX</span>\n<span class=\"w\">\t\t</span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">edx</span>\n<span class=\"w\">\t\t</span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">ecx</span>\n<span class=\"w\">\t\t</span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">ebx</span>\n<span class=\"w\">\t\t</span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">eax</span>\n\n<span class=\"w\">\t</span><span class=\"p\">};</span>\n<span class=\"w\">\t</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">\t</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">\t</span><span class=\"p\">{</span>\n<span class=\"w\">\t\t</span><span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">];</span>\n<span class=\"w\">\t</span><span class=\"p\">}</span>\n<span class=\"w\">\t</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"w\">\t</span><span class=\"p\">{</span>\n<span class=\"w\">\t\t</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"o\">&amp;</span><span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n<span class=\"w\">\t\t</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"p\">}</span>\n\n<span class=\"w\">\t</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xb00b</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">\t</span><span class=\"p\">{</span>\n<span class=\"w\">\t\t</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0xFFFFFF00</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">\t\t</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFFFFFF</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"p\">}</span>\n<span class=\"w\">\t</span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">bak</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"n\">bak</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x10</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">bak</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">0x4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">\t</span><span class=\"p\">{</span>\n<span class=\"w\">\t\t</span><span class=\"n\">bak</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"mh\">0xf</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mh\">0x30</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x39</span><span class=\"p\">)</span>\n<span class=\"w\">\t\t</span><span class=\"p\">{</span>\n<span class=\"w\">\t\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mh\">0x7</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"p\">}</span>\n<span class=\"w\">\t\t</span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;=</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">magic</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bak</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"n\">magic</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"p\">}</span>\n<span class=\"w\">\t</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"w\">\t</span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">serial</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"o\">*</span><span class=\"n\">ser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"serial for \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" on Tuesday is T10-\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<h1 id=\"wednesday\">Wednesday</h1>\n\n<p>The first part of this calculates a number based on the whole serial.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/13.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Here&rsquo;s an approximation</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">serial</span><span class=\"p\">);</span>\n<span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">sertot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mh\">0x37</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">sertot</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">sertot</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I left out some of the conditional checks since they are seemingly irrelevant for me to generate a correct key.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/14.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This part calculates a number from the user name. There&rsquo;s a lot of instructions here that use the lower parts of the registers which are a bit of a pain to emulate in a high level language like C. An important thing to notice here is that it only uses the first 4 chracters of the username, and ignores the rest. Eventually, it ends up with a 16 bit number that it copies into the upper part of the register as well, resulting in a 32 bit number consisting of two identical 16 bit numbers.</p>\n\n<p>An ugly approximation:</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFFFF00</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFFFF00</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0xff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x0000ff00</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFFFF00</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0xff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFFFF00</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mh\">0x0000</span><span class=\"p\">;</span>\n\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">^=</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// our final value.</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The resulting numbers from the two stages must be equal. Since the first part uses each character of the serial in an add-shift fashion, the actual characters don&rsquo;t matter, only that they add up to the correct value. Therefore we can take the result of the username calculation and reverse it out into a serial that will add up to the correct number for us. Since we know the 16 bit number is replicated, we can take the first 4 characters and write out an 8 character serial:</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">newSer</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0xf</span><span class=\"p\">;</span><span class=\"w\">\t\t</span>\n<span class=\"w\">  </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mh\">0x37</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">newSer</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">newSer</span><span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\">\t\t\t</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Feeding the original code a username of <code>pezip</code> generates a value of <code>0x441a441a</code>. Putting this through the above function yields a serial of <code>;;8A;;8A</code> that can be used to successfully pass the check.</p>\n\n<h1 id=\"thursday\">Thursday</h1>\n\n<p>Thursday has a lot of different routines and stuff going on, starting with a check that the serial is 0x20 bytes long. After a bunch of poking and tracing around, I discovered a &ldquo;smoking gun&rdquo;</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/15.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The constants here are commonly associated with MD5/SHA1 hashing. And so it would transpire that Thursday&rsquo;s serial number is a direct MD5 hash of the username.</p>\n\n<h1 id=\"friday\">Friday</h1>\n\n<p>Friday is the biggest one yet so I will not show so much of the code. A bunch of investigation revealed the following:</p>\n\n<ul>\n <li>A hashing function produces a number from the name</li>\n <li>The serial is expected to be in a particular format;</li>\n <li>NNNNNNNN-AAAA-BBBB-CCCC-DDDD- with the hyphens, where;</li>\n <li>N should match the output from the name hashing function (with some logistical changes)</li>\n <li>A and B form two numbers for a particular check</li></ul>\n\n<p>In order to process the serial string input, the following function is used - that also appeared in Thursday&rsquo;s challenge.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/16.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>There&rsquo;s some trickery here using the carry flags and an odd way of detecting the end of the string. I eventually distilled it to the following code (it&rsquo;s not the same, but the essence of what it is doing if given the correct input):</p>\n\n<div class=\"brush: c\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"mh\">0x18</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">dindex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">];</span><span class=\"w\">\t</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">0x40</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mh\">0x30</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mh\">0x37</span><span class=\"p\">;</span><span class=\"w\">\t\t</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;=</span><span class=\"w\"> </span><span class=\"mh\">0x4</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mh\">0x40</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mh\">0x30</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mh\">0x37</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span>\n<span class=\"w\">    </span><span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"n\">dindex</span><span class=\"o\">++</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0xf</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Even with this it still took me a good while to realise that all it was doing was parsing hexadecimal numbers from ascii. Sometimes you can&rsquo;t see the wood through the trees.</p>\n\n<p>The checks for A and B are as follows, and do not rely on the name in any way.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/17.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The numbers are checked to be within a certain range, then XORing them together must match the result of multiplying them together and masking to 0x7FFF.</p>\n\n<p>With a little thought and experimentation, 0x1000 for both values satisfies this check.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/18.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The next two numbers undergo a similar prodedure, except this time (within the same bounds) the numbers must satisfy <code>(n  ^^^ n2) =  (( n * n2) &gt;&gt;&gt; 0xA)</code>. I am sure there&rsquo;s a nice mathematical way of deriving the possible solutions, however I simply brute forced a bunch of them and picked one.</p>\n\n<p>The last part of this code checks that the hyphens appear in the correct places. A valid serial for <code>user12345</code> is <code>0?3;02:1-1000-1000-07a3-0820</code></p>\n\n<h1 id=\"saturday\">Saturday</h1>\n\n<p>Saturday looked quite daunting with lots of subroutine calls. After a lot of inspection (several hours!), it seemed to be doing an awful lot of work, with several hashing / crunching procedures and a lot of code. It was too difficult for me to work out exactly what each part was doing since I didn&rsquo;t recognise all the algorithms, so instead I decided to cheat. Based on the observation that after all the crunching had completed, the program simply checks the result against the serial you give it after running it through the ascii-&gt;hex function from earlier:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/19.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>You can see here it checks the buffers against each other for 0x10 characters using <code>repe cmpsb</code></p>\n\n<p>I made a copy of the DLL and changed the function, so that instead of checking the crunched result against the serial, it <em>returns</em> the crunched result instead:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/reverse2/20.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Now in my keygen program, I can call this function and have it generate the correct value for me, process it through a function that performs the inverse of the ascii-&gt;hex function, leaving us with the correct serial. For the username <code>user12345</code> the serial is <code>FB368210295047499E06AC2352C62885</code></p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>This was a fun crackme, and I am pleased I could provide a solution of some description for each puzzle. There were no anti-debugging techniques present in this one, instead focusing more on hashing things in various ways. One puzzle remains, however - if you look at the C# code you will see it MD5 hashes the name and tests it against two hard-coded hashes. I have not tried to work out what these could be yet, maybe there are some clues hanging around in the .exe and .dll somewhere &hellip;</p>")) ((? . 27) f post (u . "F# meets the Raspberry Pi") (? . 27) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2013/03/02/f-meets-the-raspberry-pi/index.html" . windows) (u . "/blog\\2013\\03\\02\\f-meets-the-raspberry-pi/") (u . "2013-03-02T22:58:00") (? . 26) (? . 14) (c (u . "digital logic") c (u . "electronics") c (u . "fsharp") c (u . "raspberry pi")) (? . 48) #t (u . "<!-- more-->\n\n<p>I got a Pi for my birthday! A great excuse to get back into electronics.</p>\n\n<p>After unsuccessfully struggling to get the F# compiler to build under the stable version of mono for Debian Wheezy, I realised that F# programs work just fine if you build normally from a windows computer, throw in FSharp.Core.dll in the /bin/ and copy it over. So I have a setup now where I work with VS2012 / Sublime and sync the executable and libraries with WinScp (or indeed the Scp plugin for FAR Manager).</p>\n\n<p>Next up is to get access to the hardware. I built <a href=\"http://www.open.com.au/mikem/bcm2835/index.html\">this C library</a> as a shared object, dumped it in with the other binaries of my project and it worked through P/Invoke with no hassle at all !</p>\n\n<p>I've quite a bit of electronics experience, so after I did some basic tests that the various I/O pins could be set to output and switch from High to Low, I skipped the traditional \"hello world\" of hardware (blinking an LED) and figured I'd try something a little bit more ambitious. I have a little LCD screen laying around in my old gear, it's a standard LCD driven by the <a href=\"http://en.wikipedia.org/wiki/Hitachi_HD44780_LCD_controller\">Hitachi HD4480 LCD Controller</a>. You can use these in 8-bit or 4-bit mode, with the 8 bit mode needing 4 more I/O pins. I'm using the 4 bit mode because I don't really have that many pins and it's pretty easy (although a little fiddly) to use it in 4-bit mode.</p>\n\n<p>I'm using a total of 7 I/O pins, E (enable), RS (switch between command and character mode), RW (I'm not actually using this right now) , and then DB4 through DB7 which are the 4 input bits (they are the higher nibble of the full 8 bits). This is the circuit :</p>\n\n<p><img src=\"../../../../../img/old/lcd_s.jpg\" alt=\"\" /></p>\n\n<p>In this schematic the Pi pins relate to the actual physical pin numbers, however in the code a mapping is needed over to what the Pi internally calls its GPIO pins. I created an enum for this purposes, only containing the pins I am using for now</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">GPIOPins</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin_11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">17u</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin_12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">18u</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin_13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">27u</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin_15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22u</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin_16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">23u</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin_18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">24u</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin_22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">25u</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>For example the physical pin 11 maps to GPIO number 17. Infact when I first hooked this circuit up and wrote all the code to perform the LCD initilization I couldn't get it to work. Thankfully I happen to have a 16 channel logic analyzer in my scope so I hooked up all the inputs, set it to a single sweep triggering on the rising edge of the Enable pin over 500ms and noticed that the RW pin was always high - strange (I neglected to take a picture of the waveforms for this post :( ). Turns out that the Pi user manual is WRONG, I have got a slightly later revision of the board where pin 13 is mapped to 27, not 21!</p>\n\n<p>The next bit of code imports a couple of the functions from the C library and creates a couple of mini functions around them</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">[&lt;</span><span class=\"n\">DllImportAttribute</span><span class=\"o\">(</span><span class=\"s\">\"libbcm2835.so\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">EntryPoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"bcm2835_init\"</span><span class=\"o\">)&gt;]</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">bcm2835_init</span><span class=\"bp\">()</span>\n\n<span class=\"o\">[&lt;</span><span class=\"n\">DllImport</span><span class=\"o\">(</span><span class=\"s\">\"libbcm2835.so\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">EntryPoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"bcm2835_gpio_fsel\"</span><span class=\"o\">)&gt;]</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"n\">bcm2835_gpio_fsel</span><span class=\"o\">(</span><span class=\"n\">GPIOPins</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">mode_out</span><span class=\"o\">);</span>\n\n<span class=\"o\">[&lt;</span><span class=\"n\">DllImport</span><span class=\"o\">(</span><span class=\"s\">\"libbcm2835.so\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">EntryPoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"bcm2835_gpio_write\"</span><span class=\"o\">)&gt;]</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"o\">(</span><span class=\"n\">GPIOPins</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">);</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">fsel</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcm2835_gpio_fsel</span><span class=\"o\">(</span><span class=\"n\">pin</span><span class=\"o\">,</span><span class=\"n\">value</span><span class=\"o\">)</span><span class=\"w\">                        </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">write</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcm2835_gpio_write</span><span class=\"o\">(</span><span class=\"n\">pin</span><span class=\"o\">,</span><span class=\"n\">value</span><span class=\"o\">)</span><span class=\"w\">            </span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">wait</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"nn\">Threading</span><span class=\"p\">.</span><span class=\"nn\">Thread</span><span class=\"p\">.</span><span class=\"n\">Sleep</span><span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>To use the LCD you write some bits to the data pins, then bring the Enable pin high for a few us then pull it low again (\"pulse\"). The LCD then does something depending on the input bits. In order to prepare it for 4-bit use I first have to send it a few 0x03 (0011) packets as per the spec indicates. Then I can switch it into 4-bit mode (0x2). From this point on, I can use all the 8-bit commands from the spec. Because I'm running in 4 bit mode I have to send the high nibble first, pulse, then send the low nibble. I wrapped some of the LCD functionality up in a F# record type (note: all this code is just a first stab, everything with hardware is inherently to do with mutating state so I won't be using a lot of the real functional features of the language just yet, but I'll see what I can do about that later)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">LCDCommands</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">AllLow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">          </span><span class=\"mi\">0</span><span class=\"n\">b00000000</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Clear</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"n\">b00000001</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Home</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"n\">b00000010</span><span class=\"w\">   </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FourBit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">         </span><span class=\"mi\">0</span><span class=\"n\">b00100000</span><span class=\"w\">   </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">TwoLine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">         </span><span class=\"mi\">0</span><span class=\"n\">b00001100</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DisplayOn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">       </span><span class=\"mi\">0</span><span class=\"n\">b00001100</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CursorOn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"n\">b00000001</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">AutoIncCursor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"n\">b00000110</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Line2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"n\">xC0</span>\n<span class=\"w\">        </span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">LCD</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">GPIOPins</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RW</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">GPIOPins</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RS</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">GPIOPins</span><span class=\"o\">;</span><span class=\"w\"> </span>\n<span class=\"w\">             </span><span class=\"n\">DB4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">GPIOPins</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">DB5</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">GPIOPins</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">DB6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">GPIOPins</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">DB7</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">GPIOPins</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"p\">.</span><span class=\"nf\">Pulse</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// toggles enable </span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"p\">.</span><span class=\"nf\">WriteNibble</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// write the lower four bits to the data pins and pulses</span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB7</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB6</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB5</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB4</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;&amp;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">Pulse</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"p\">.</span><span class=\"nf\">WriteByte</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteNibble</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">// write high nibble first</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteNibble</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"p\">.</span><span class=\"nf\">Command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteByte</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I have captured some of the LCD commands in another enum - some of these have to be OR'd together as per the spec. I've just encoded the ones I'm going to use. The there's the pulse which toggles enable with a tiny delay. Because I'm in 4 bit mode I'll always be writing nibbles with a pulse at the end - the WriteByte function simply writes the high nibble first then the low nibble as the spec indicates. The last function is just a wrapper so I can directly use the LCDCommand enum.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"p\">.</span><span class=\"nf\">Initialize</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// I am only using the (annoyingly fiddly) 4 bit mode</span>\n<span class=\"w\">        </span><span class=\"c1\">// assume 1000ms or so has passed since program start up</span>\n<span class=\"w\">        </span><span class=\"c1\">// make sure pins are set to output</span>\n<span class=\"w\">        </span><span class=\"n\">fsel</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">E</span><span class=\"w\">   </span><span class=\"k\">true</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">fsel</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">RW</span><span class=\"w\">  </span><span class=\"k\">true</span>\n<span class=\"w\">        </span><span class=\"n\">fsel</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">RS</span><span class=\"w\">  </span><span class=\"k\">true</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">fsel</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB4</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">        </span><span class=\"n\">fsel</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB5</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">fsel</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB6</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">        </span><span class=\"n\">fsel</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">DB7</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">        </span><span class=\"c1\">// zero them all out</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"nn\">LCDCommands</span><span class=\"p\">.</span><span class=\"n\">AllLow</span>\n<span class=\"w\">        </span><span class=\"c1\">// to start with we are only writing special wakeup nibbles</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteNibble</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x3</span><span class=\"o\">);</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"c1\">// as per spec, first call has a 5ms wait</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteNibble</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x3</span><span class=\"o\">);</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteNibble</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x3</span><span class=\"o\">);</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"c1\">// now set into 4 bit mode and send 8 bits in 2 nibbles from now on</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteNibble</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"o\">(</span><span class=\"nn\">LCDCommands</span><span class=\"p\">.</span><span class=\"n\">FourBit</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"nn\">LCDCommands</span><span class=\"p\">.</span><span class=\"n\">TwoLine</span><span class=\"o\">)</span><span class=\"w\">     </span><span class=\"c1\">// set 5x8 mode 2 lines</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"o\">(</span><span class=\"nn\">LCDCommands</span><span class=\"p\">.</span><span class=\"n\">DisplayOn</span><span class=\"w\"> </span><span class=\"o\">|||</span><span class=\"w\"> </span><span class=\"nn\">LCDCommands</span><span class=\"p\">.</span><span class=\"n\">CursorOn</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"c1\">// switch it on</span>\n<span class=\"w\">        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"o\">(</span><span class=\"nn\">LCDCommands</span><span class=\"p\">.</span><span class=\"n\">AutoIncCursor</span><span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is the startup sequence - set all the pins to Output, zero them all out, and then follow the startup sequence as per the spec. initially I have to just use nibbles, until the wake-up sequence is complete, then I can set it to 4-bit mode and use full byte commands. Once the display is in 4-bit mode I switch it to 5x8 mode with 2 lines and switch the screen on with a flashing cursor and so on.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"p\">.</span><span class=\"nf\">WriteText</span><span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">,</span><span class=\"n\">clear</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">clear</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"o\">(</span><span class=\"nn\">LCDCommands</span><span class=\"p\">.</span><span class=\"n\">Clear</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">RS</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"nn\">Encoding</span><span class=\"p\">.</span><span class=\"nn\">ASCII</span><span class=\"p\">.</span><span class=\"n\">GetBytes</span><span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteByte</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">RS</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Lastly a function to output some text. To do this you have to set the LCD into character output mode by pulling RS high; then you can send ASCII codes and the LCD will print them.</p>\n\n<p>Pulling this all together I wrote that classic silly number-guessing game you write when learning to program, with the output on the LCD:</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">[&lt;</span><span class=\"n\">EntryPoint</span><span class=\"o\">&gt;]</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">try</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">bcm2835_init</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">true</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">lcd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">GPIOPins</span><span class=\"p\">.</span><span class=\"n\">Pin_11</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RW</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">GPIOPins</span><span class=\"p\">.</span><span class=\"n\">Pin_12</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">RS</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">GPIOPins</span><span class=\"p\">.</span><span class=\"n\">Pin_13</span><span class=\"o\">;</span><span class=\"w\"> </span>\n<span class=\"w\">                        </span><span class=\"n\">DB4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">GPIOPins</span><span class=\"p\">.</span><span class=\"n\">Pin_15</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">DB5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">GPIOPins</span><span class=\"p\">.</span><span class=\"n\">Pin_16</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">DB6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">GPIOPins</span><span class=\"p\">.</span><span class=\"n\">Pin_18</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"n\">DB7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">GPIOPins</span><span class=\"p\">.</span><span class=\"n\">Pin_22</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">            </span>\n<span class=\"w\">            </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">1000</span>\n<span class=\"w\">            </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">Initialize</span><span class=\"bp\">()</span>\n<span class=\"w\">            </span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">                </span>\n<span class=\"w\">                 </span><span class=\"k\">try</span>\n<span class=\"w\">                    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">guess</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">Console</span><span class=\"p\">.</span><span class=\"n\">ReadLine</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Int32</span><span class=\"p\">.</span><span class=\"n\">Parse</span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">guess</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\">                     </span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"CORRECT!!\"</span><span class=\"o\">,</span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteByte</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">xC0</span><span class=\"o\">);</span><span class=\"w\"> </span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"YOU WIN!\"</span><span class=\"o\">,</span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">                    </span><span class=\"k\">elif</span><span class=\"w\"> </span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"WRONG!!\"</span><span class=\"o\">,</span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteByte</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">xC0</span><span class=\"o\">);</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"YOU LOSE!!\"</span><span class=\"o\">,</span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">                    </span><span class=\"k\">else</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"WRONG!! \"</span><span class=\"o\">,</span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">((</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">guess</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"s\">\"&lt; \"</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"s\">\"&gt; \"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">guess</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"bp\">()</span><span class=\"o\">,</span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteByte</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">xC0</span><span class=\"o\">);</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">                        </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"GUESS AGAIN!\"</span><span class=\"o\">,</span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">attempts</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"w\">                 </span><span class=\"k\">with</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"Number not reconigsed. Try again\"</span>\n<span class=\"w\">                        </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">attempts</span>\n<span class=\"w\">                        </span>\n<span class=\"w\">            </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"Guess a number\"</span><span class=\"o\">,</span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteByte</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">xC0</span><span class=\"o\">);</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">            </span><span class=\"n\">lcd</span><span class=\"o\">.</span><span class=\"n\">WriteText</span><span class=\"o\">(</span><span class=\"s\">\"0 &lt;---&gt; 50\"</span><span class=\"o\">,</span><span class=\"k\">false</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">System</span><span class=\"p\">.</span><span class=\"n\">Random</span><span class=\"o\">(</span><span class=\"nn\">DateTime</span><span class=\"p\">.</span><span class=\"nn\">Now</span><span class=\"p\">.</span><span class=\"n\">Millisecond</span><span class=\"o\">).</span><span class=\"n\">Next</span><span class=\"o\">(</span><span class=\"mi\">51</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"w\">            </span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"failed to init\"</span>\n<span class=\"w\">    </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">printfn</span><span class=\"w\"> </span><span class=\"s\">\"exception thrown : %s\"</span><span class=\"w\"> </span><span class=\"o\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"nn\">Console</span><span class=\"p\">.</span><span class=\"n\">Read</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here's a pic of it working ..</p>\n\n<p><img src=\"../../../../../img/old/WP_20130302_004.jpg\" alt=\"\" /></p>\n\n<p>Cool! This was just a silly project to test everything is working properly - I can take over the world now.</p>")) ((? . 45) f post (u . "BASIC’s 50th Anniversary … and more crazy F# type providers!") (? . 45) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/05/01/basic-s-50th-anniversary-and-more-crazy-f-type-providers/index.html" . windows) (u . "/blog\\2014\\05\\01\\basic-s-50th-anniversary-and-more-crazy-f-type-providers/") (u . "2014-05-01T08:56:00") (? . 10) (? . 44) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p>Did you know that it is the <a href=\"http://time.com/69316/basic/\">50th anniversary of the BASIC programming language today?</a> (1st May) No? Well why not! BASIC is the language that brought computers to the mainstream. Back in the day, if you had a computer, you learnt how to program it in basic. Infact, when you switched it on, that&rsquo;s what you were presented with. These computers <em>wanted</em> to be programmed. Thousands of people purchased these expensive computers purely to learn how to program them.</p>\n\n<p>I figured I should do something to mark the anniversary. Many of you will already know about my various crazy type providers, including <a href=\"http://www.pinksquirrellabs.com/blog/2014/02/02/the-minesweeper-type-provider\">MineSweeper</a> and <a href=\"http://www.pinksquirrellabs.com/blog/2013/07/29/choose-your-own-adventure-type-provider/\">Choose Your Own Adventrue</a>. So, I thought to myself, wouldn&rsquo;t it be great if we could write some equivalents of the very early BASIC games via a re-usable and extensible type provider? One which doesn&rsquo;t require you to write any type-providing code, but is abstracted away from all that &hellip;</p>") #t (u . "\n<p>Did you know that it is the <a href=\"http://time.com/69316/basic/\">50th anniversary of the BASIC programming language today?</a> (1st May) No? Well why not! BASIC is the language that brought computers to the mainstream. Back in the day, if you had a computer, you learnt how to program it in basic. Infact, when you switched it on, that&rsquo;s what you were presented with. These computers <em>wanted</em> to be programmed. Thousands of people purchased these expensive computers purely to learn how to program them.</p>\n\n<p>I figured I should do something to mark the anniversary. Many of you will already know about my various crazy type providers, including <a href=\"http://www.pinksquirrellabs.com/blog/2014/02/02/the-minesweeper-type-provider\">MineSweeper</a> and <a href=\"http://www.pinksquirrellabs.com/blog/2013/07/29/choose-your-own-adventure-type-provider/\">Choose Your Own Adventrue</a>. So, I thought to myself, wouldn&rsquo;t it be great if we could write some equivalents of the very early BASIC games via a re-usable and extensible type provider? One which doesn&rsquo;t require you to write any type-providing code, but is abstracted away from all that &hellip;</p>\n<!-- more-->\n\n<h2>InteractiveProvider</h2>\n\n<p>Enter <em>InteractiveProvider</em> (which I just wrote this afternoon). Unfortunately, it doesn&rsquo;t yet support any BASIC (although <a href=\"http://trelford.com/blog/post/interpreter.aspx\">Phil Trelford&rsquo;s Small Basic interpreter</a> is looking like a good fit). What it does do is abstract away all the voodoo magic of infinitely-recursive-type-providers, and allow you to write some fairly sophisticated type provider games by implementing a couple of interfaces. The type provider itself will scan assemblies in a given location to find types that implement the interfaces it uses, and the rest happens JUST LIKE MAGIC! There&rsquo;s not much content yet, I have converted some simple BASIC games from <a href=\"http://www.atariarchives.org/basicgames/\">the legendary 101 BASIC games book</a>, and some of the my other type providers to work with it as examples, although I have some special plans up my sleeve for new games !</p>\n\n<p>To use it, grab and build the source from my <a href=\"https://github.com/pezipink/InteractiveProvider\">github</a> and do something like the following in your friendly FSI session</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\git\\InteractiveProvider\\InteractiveProvider\\bin\\Debug\\InteractiveProvider.dll\"</span>\n\n<span class=\"k\">open</span><span class=\"w\"> </span><span class=\"nn\">PinkSquirrels.Interactive</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">GamesType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InteractiveProvider</span><span class=\"o\">&amp;</span><span class=\"n\">lt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\git\\InteractiveProvider\\BASIC_Anniversary\\bin\\Debug\\\"</span><span class=\"o\">&gt;</span>\n\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GamesType</span><span class=\"bp\">()</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The static parameter here is the directory to search for assemblies containing compatible games. Now when you press dot on the <em>games</em>value, you will be presented with a series of properties named &lsquo;<em>Start &lt;game&gt;&rsquo;</em>, one for each type it found implementing said interfaces (more on that below)</p>\n\n<h2></h2>\n\n<h2>THE GAMES!</h2>\n\n<p>There are currently a massive 3 games.</p>\n\n<h3>MineSweeper</h3>\n\n<p>Ronseal. See <a href=\"http://www.pinksquirrellabs.com/blog/2014/02/02/the-minesweeper-type-provider\">this post</a>for more informations</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_8.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_8.png\" alt=\"image\" width=\"793\" height=\"263\" border=\"0\" /></a></p>\n\n<h3></h3>\n\n<h3>Rock Paper Scissors</h3>\n\n<p>Try your hand against the computer in this classic game!</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_9.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_9.png\" alt=\"image\" width=\"642\" height=\"190\" border=\"0\" /></a></p>\n\n<h3>Chemistry</h3>\n\n<p>My personal favourite, this introduces another ground-breaking type provider mechanic, the ability to input any sized number via successive properties! In this game you are a chemist and you must correctly dilute the fictional KRYPTOCYANIC acid.</p>\n\n<p></p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_10.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_10.png\" alt=\"image\" width=\"837\" height=\"218\" border=\"0\" /></a></p>\n\n<p></p>\n\n<p></p>\n\n<h2>Writing Games</h2>\n\n<p>By this point you must be just crying out to write your own games. And I too am crying out for your pull requests. The way it works is as follows.</p>\n\n<p>There are two interfaces. IInteractiveState and IInteractiveServer</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">IInteractiveState</span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">abstract</span><span class=\"w\"> </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">DisplayText</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">abstract</span><span class=\"w\"> </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">DisplayOptions</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"kt\">obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kt\">list</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">IInteractiveServer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">abstract</span><span class=\"w\"> </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">NewState</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">abstract</span><span class=\"w\"> </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">ProcessResponse</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"kt\">obj</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The type provider will pick up on any types that implement the server interface. Upon doing so, it will call Activator.CreateInstance and create an instance of the server type. From this type it will get an initial state from the <em>NewState</em> property.</p>\n\n<p>The state interface returns information to the type provider via <em>DisplayOptions</em>about what choices it should surface as properties, along with objects to pass back to the server when a property is selected. It also has a property <em>DisplayText</em> which is a string that will be placed on the property that leads to this state. In some games this is not desirable as it gives the player a preview of the next state, however there is a way around that (see <em>Rock Paper Scissors</em>)</p>\n\n<p>The objects themselves that implement these interfaces can be literally anything you like at all. The only caveat is that you must store all the information in the state which you require. When a property is accessed, the old state gets passed to the <em>ProcessResponse</em>function along with the object representing the selection, which can be anything, as previously defined in the <em>DisplayOptions</em> . In <em>MineSweeper</em>this is the int * int tuple of the grid square that was selected. In <em>Chemistry</em> it is a discriminated union type. <em>Rock Paper Scissors</em>uses something different again.</p>\n\n<p>Often it is a good choice to use a record type or discriminated union for your state. <em>Rock Paper Scissors</em>simply holds everything it needs to know about the game in one record type which both interfaces use to define their next behaviour. <em>Chemistry</em>uses multiple discriminated union cases and lots of pattern matching to work out the behaviour.</p>\n\n<h2></h2>\n\n<h2>Example</h2>\n\n<p>Here&rsquo;s a very simple example that has the player guess a number from 1 to 100. It uses a discriminated union to model the different states. There is no fail condition, you can just keep guessing until you win :)</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ExampleState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Guess</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">lastGuess</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Success</span><span class=\"w\"> </span>\n<span class=\"w\">   </span><span class=\"k\">interface</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">DisplayText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"c1\">// create the text that will appear on the property </span>\n<span class=\"w\">       </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"I HAVE PICKED A NUMBER FROM 1 TO 100! SEE IF YOU CAN GUESS IT!\"</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Guess</span><span class=\"o\">(</span><span class=\"n\">last</span><span class=\"o\">,</span><span class=\"n\">targ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">targ</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"s\">\"WRONG!! MY NUMBER IS LESS THAN THAT! GUESS AGAIN FOOL!\"</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"s\">\"WRONG!! MY NUMBER IS MORE THAN THAT! GUESS AGAIN FOOL!\"</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Success</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"YOU WIN!!\"</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">DisplayOptions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Guess</span><span class=\"o\">(_,_)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"c1\">// in all cases except for a win, show 1 - 100 properties </span>\n<span class=\"w\">         </span><span class=\"o\">[</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"bp\">()</span><span class=\"o\">,</span><span class=\"n\">box</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)]</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Success</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"bp\">[]</span><span class=\"w\"> </span><span class=\"c1\">// game over</span>\n\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ExampleGame</span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"k\">interface</span><span class=\"w\"> </span><span class=\"n\">IInteractiveServer</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">NewState</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">// create the inital state </span>\n<span class=\"w\">      </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">Utils</span><span class=\"p\">.</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">Next</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">101</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">ProcessResponse</span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span><span class=\"n\">choice</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">newGuess</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unbox</span><span class=\"o\">&lt;</span><span class=\"n\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">choice</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">:?&gt;</span><span class=\"w\"> </span><span class=\"n\">ExampleState</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Guess</span><span class=\"o\">(_,</span><span class=\"n\">target</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">newGuess</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Success</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Success</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">failwith</span><span class=\"w\"> </span><span class=\"s\">\"this case is not possible\"</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Guess</span><span class=\"o\">(_,</span><span class=\"n\">target</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Guess</span><span class=\"o\">(</span><span class=\"n\">newGuess</span><span class=\"o\">,</span><span class=\"n\">target</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:&gt;</span><span class=\"w\"> </span><span class=\"n\">IInteractiveState</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>That's it! No ProvidedTypes or any other craziness in sight. Now if I fire up the type provider, I can play this smashing game as follows, it seems the computer picked exactly 50 on this first go!</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_11.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_11.png\" alt=\"image\" width=\"986\" height=\"141\" border=\"0\" /></a></p>\n\n<p>Watch this space for more exciting, much more complex games in the future! In the meantime, please have a go and write your own games, and submit me pull requests!</p>")) ((? . 49) f post (u . "C64 Programming - Invader Fractal") (? . 49) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2017/02/28/c64-programming-invader-fractal/index.html" . windows) (u . "/blog\\2017\\02\\28\\c64-programming-invader-fractal/") (u . "2017-02-28T17:31:32") (? . 30) (? . 50) (c (u . "C64") c (u . "6502")) (u . "\n<p>I have recently been getting into programming the Commodore 64. It&rsquo;s lots of fun to work in such a restricted environment, where you have to use various hardware tricks to achieve your goals. Every machine cycle and byte of memory counts!</p>\n\n<p>I have not programmed in 6502 assembler or the C64 before. I am using the popular C64 emulator <a href=\"http://vice-emu.sourceforge.net/\">WinVice</a> and an assembler called <a href=\"http://dasm-dillon.sourceforge.net/\">DASM</a>. Having messed around a bit and learnt the basics of the instruction set and the hardware/memory layout, I programmed a couple of effects such as the basic text scroller. I have an idea in mind for my first demo, and part of it revolves around the <a href=\"http://levitated.net/daily/levInvaderFractal.html\"><em>invader fractal</em></a>. I have implemented this in various langauages (F# and D being the most recent) and figured it would be a nice fit for the C64.</p>\n\n<h3 id=\"invaders\">Invaders</h3>\n\n<p>The invader fractal is a very simpe idea, based on the observation that the classic space invaders are symmetrical. Given a 5x5 grid, we can observe that the middle column is static, whilst columns 4 and 5 are columns 1 and 2 flipped around:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This means we can store the information for each row in just 3 bits, multiplied for each row gives us 15 bits to encode an entire invader. 15 bits gives a total of 2^15=32,768 unique invaders. &ldquo;Real&rdquo; space invaders are a little bit bigger than 5x5, but we will stick with their smaller cousins.</p>") #t (u . "\n<p>I have recently been getting into programming the Commodore 64. It&rsquo;s lots of fun to work in such a restricted environment, where you have to use various hardware tricks to achieve your goals. Every machine cycle and byte of memory counts!</p>\n\n<p>I have not programmed in 6502 assembler or the C64 before. I am using the popular C64 emulator <a href=\"http://vice-emu.sourceforge.net/\">WinVice</a> and an assembler called <a href=\"http://dasm-dillon.sourceforge.net/\">DASM</a>. Having messed around a bit and learnt the basics of the instruction set and the hardware/memory layout, I programmed a couple of effects such as the basic text scroller. I have an idea in mind for my first demo, and part of it revolves around the <a href=\"http://levitated.net/daily/levInvaderFractal.html\"><em>invader fractal</em></a>. I have implemented this in various langauages (F# and D being the most recent) and figured it would be a nice fit for the C64.</p>\n\n<h3 id=\"invaders\">Invaders</h3>\n\n<p>The invader fractal is a very simpe idea, based on the observation that the classic space invaders are symmetrical. Given a 5x5 grid, we can observe that the middle column is static, whilst columns 4 and 5 are columns 1 and 2 flipped around:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/1.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This means we can store the information for each row in just 3 bits, multiplied for each row gives us 15 bits to encode an entire invader. 15 bits gives a total of 2^15=32,768 unique invaders. &ldquo;Real&rdquo; space invaders are a little bit bigger than 5x5, but we will stick with their smaller cousins.</p>\n<!-- more-->\n\n<h3 id=\"c64-limitations\">C64 Limitations</h3>\n\n<p>We will be using the most basic video mode of the C64, which is text mode. In this mode, a character is represented by an 8x8 bitmap. The video memory for each 8x8 location of the screen stores a byte value that is an offset into the character set determining which character to draw.</p>\n\n<p>For example, the video memory is mapped to adresses $0400 - $07F7. If the value of $0400 is set to $01, then the screen will render character 1 from the character set (which happens to be the letter A) into the top left of the screen.</p>\n\n<p>$ denotes a hexadecimal number, and % binary. The # prefix indicates a literal value rather than a memory location.</p>\n\n<p>It is not my intention to explain every op-code, most should make sense from context and the comments, but you can view a fulll list <a href=\"http://6502.org/tutorials/6502opcodes.html\">here</a></p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$01</span><span class=\"w\">\t</span><span class=\"c1\">; load 1 into the accumulator (A) </span>\n<span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$0400</span><span class=\"w\">\t</span><span class=\"c1\">; store A into the first byte of video memory</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/2.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>A nice thing about these characters sets is that you can define them yourself, and then you can change them in realtime to affect the screen. Therefore, what I would like to do is work out how to take a 15 bit encoded invader and decode it into a position in the character set.</p>\n\n<p>The C64 only has 3 registers (A, X and Y) and they are all 8 bit. This means we cannot store the entire encoded invader in a register for processing, instead some of it will have sit elsewhere.</p>\n\n<h3 id=\"the-first-bits\">The first bits</h3>\n\n<p>Let&rsquo;s forget the problem of 15 bits for now and concentrate on how to decode a single row of three bits into the 5 bit destination. Since a character row is 8 bits, we will consider the three most significant bits to not be used. We further consider that bit 3 is the centre pixel, while bits 1 and 2 form the right hand side of the invader, to be mirrored onto the left hand side.</p>\n\n<p>Here are some examples (using an amazing new gfx tech):</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Since we will have to be moving and masking bits around, we will need working areas for the finished product. We could use the registers, an area in memory or the stack for this purpose.</p>\n\n<p>let us assume we have the value %00000101 at memory location $42 for processing.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$42</span><span class=\"w\">     </span><span class=\"c1\">; load the encoded invader into A</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$43</span><span class=\"w\">     </span><span class=\"c1\">; copy A into $43 - $43 is now %101, the right side of the invader</span>\n<span class=\"w\">\t\t</span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mb\">%11</span><span class=\"w\">    </span><span class=\"c1\">; mask out the third (centre) bit of A, leaving %01</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>$42 and $43 are a special memory addresses I have selected. Because they are 8-bit adrresses, they are known as <em>zero-page</em> addresses and have some special properties - they can be accessed much faster from the CPU - almost as fast as the registers themselves.</p>\n\n<p>At this stage we have built the right side of the invader, dumped the centre bit and left ourselves with the two bits that will need mirroring and shifting into place on the left hand side of the invader. There are various ways to approach this. Given we only ever need to mirror 2 bits, and there are only 4 possible combinations, for the sake of 4 bytes of memory we can easily encode this into a lookup table.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t\t</span><span class=\"k\">tax</span><span class=\"w\">\t\t</span><span class=\"c1\">; copy the value into the X register</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"n\">lookup</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"w\"> \t</span><span class=\"c1\">; read the value from the table offset by X into A (%10)</span>\n<span class=\"w\">\t\t</span><span class=\"k\">asl</span><span class=\"w\"> \t\t</span><span class=\"c1\">; shift the result left 3 bits (%10000)</span>\n<span class=\"w\">\t\t</span><span class=\"k\">asl</span>\n<span class=\"w\">\t\t</span><span class=\"k\">asl</span>\n<span class=\"w\">\t\t</span><span class=\"k\">ora</span><span class=\"w\"> </span><span class=\"mh\">$43</span><span class=\"w\">\t\t</span><span class=\"c1\">; OR the resulting bits with our work area (%00010101)</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$43</span><span class=\"w\">\t\t</span><span class=\"c1\">; store the result</span>\n\n<span class=\"c1\">;store the lookup table after the program data</span>\n<span class=\"nl\">lookup:</span><span class=\"w\">\t</span><span class=\"n\">DC</span><span class=\"w\"> </span><span class=\"mb\">%00</span><span class=\"p\">,</span><span class=\"mb\">%10</span><span class=\"p\">,</span><span class=\"mb\">%01</span><span class=\"p\">,</span><span class=\"mb\">%11</span><span class=\"w\">\t</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The 6502 has several addressing modes, the one shown here is <em>absolute indexed</em>. This means it can take any absolute address (16 bits) and then it will add the contents of the X or Y register to it and return the byte from that location.</p>\n\n<p>In this example I have told the assembler to label a location of memory <em>lookup</em> and then told it to store four consequtive bytes there.</p>\n\n<p>Thus, the <code>lda lookup,x</code> instruction will return the data from the table depending on the value of the X register. Since we know it is only two bits, it has the following effect:</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/4.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>We then take the mirrored value and shift it left 3 bits, so that %10 becomes %10000. Finally we take our result, OR it together with the stored right hand side and store the result of %10101.</p>\n\n<p>Success! this is the first row of an invader complete.</p>\n\n<h3 id=\"the-rest-of-it\">The rest of it..</h3>\n\n<p>Now we have an algorithm to decode an invader row to a characer row, it should be easy to repeat process for all 5 rows, right?</p>\n\n<p>First, there are going to be a couple of problems to solve. To start with, the row has been built at $43, but we don&rsquo;t actually want it there. Where we really want it is the memory location where the character set starts. Let&rsquo;s say this is $2000. Now, using the zero-page is very fast, but since we only read/write the intermediate invader a couple of times, we might as well just place it where it needs to end up.</p>\n\n<p>A character set can hold 256 characters, formed of 8 bytes each (as explained earlier) for a total of 2kb. If we are going to generate 256 unique invaders, the <em>absoulte indexed</em> addressing mode is not going to work out too well for us. Since the X register can only contain a single byte, we can offset a known 16 bit address by at most 256 bytes, which will only stretch out to 32 invaders. Clearly some other method will be required.</p>\n\n<p>There are a couple of solutions to this problem. The first is more fun but easy to mess up which is <em>self modifiying code</em>.</p>\n\n<p>Let&rsquo;s take the instruction <code>lda $2000,x</code>. The assembler of course simply turns this into some bytes - one that represents the opcode with the addressing mode, and two bytes that represent the address of $2000. Since we can write to whatever memory we like however we want to, there is nothing stopping us simply modifying the assembled address that follows the opcode. I will leave this for another post.</p>\n\n<p>The 6502 provides another addressing mode to perform a similar function, which is called <em>zero paged indirect indexed</em>. As the name indciates, this can only be used with the zero page. It looks like this:</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$20</span><span class=\"w\">\t</span><span class=\"c1\">;target address most significant byte</span>\n<span class=\"w\">\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$41</span><span class=\"w\">\t\t</span>\n<span class=\"w\">\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$00</span><span class=\"w\">\t</span><span class=\"c1\">;least signficant byte goes first</span>\n<span class=\"w\">\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">\t</span><span class=\"k\">ldy</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$F</span><span class=\"w\"> \t</span><span class=\"c1\">;some index value</span>\n<span class=\"w\">\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$FF</span><span class=\"w\">\t</span><span class=\"c1\">;some value we wish to store</span>\n<span class=\"w\">\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">$40</span><span class=\"p\">),</span><span class=\"n\">y</span><span class=\"w\">\t</span><span class=\"c1\">;stores $FF into $200F</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>First, we place the target address across two bytes at $40 in the zero page. Notice the address is stored backwards - that is - least significant byte first - $0020. This is because the design of 6502 means it is quicker to load addresses this way. If you look at the assembled instruction of <code>lda $2000</code> you will see the address is backwards there too.</p>\n\n<p>Next we just load some values into Y and A, and the final instruction, denoted by the parens, causes the CPU to construct a 16-bit address from $40 and $41, add the contents of Y onto it, and then finally write the value in the accumulator to this new address. Pretty cool! This means we can store a 16-bit address and change it however we like from the zero page, AND have an index offset as well! Note - this addressing mode can ONLY be used with Y as the index register!</p>\n\n<p>The other problem that needs solving is the fact the invader is 15 bits but we only have 8 bits. Clearly, once we have decoded a row and stored it, we will want to move on to the next 3 bits and repeat this process until all 5 rows are complete. The solution to this is to shift three bits out of the remaining byte and into the accumulator. Let&rsquo;s say we have the first 8 bits in the accumulator, and the remaining 7 bits are stored in a byte at location $39 (was supposed to be $3F but I had already drawn the table wrong :) ).</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/5.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">\t</span><span class=\"k\">lsr</span><span class=\"w\"> </span><span class=\"mh\">$39</span><span class=\"w\">\t\t</span><span class=\"c1\">;shift bits one to the right</span>\n<span class=\"w\">\t</span><span class=\"k\">ror</span><span class=\"w\"> \t\t</span><span class=\"c1\">;rotate the accumuator right</span>\n<span class=\"w\">\t</span><span class=\"k\">lsr</span><span class=\"w\"> </span><span class=\"mh\">$39</span>\n<span class=\"w\">\t</span><span class=\"k\">ror</span>\n<span class=\"w\">\t</span><span class=\"k\">lsr</span><span class=\"w\"> </span><span class=\"mh\">$39</span>\n<span class=\"w\">\t</span><span class=\"k\">ror</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p><code>lsr</code> (logical shift right) shifts the byte in question one to the right. If the bit that &ldquo;falls off&rdquo; the end is set, then the processor&rsquo;s carry flag will be set. <code>ror</code> (rotate right) shifts the byte in question (in this case the accumulator since no specfic addressing mode is specified) one to the right, and if the carry bit is currently set, then 1 will also appear at the most signficant bit. In this way we are able to rotate bits out of one number and into another, giving us what we need.</p>\n\n<p>With all being said and done, we can write a new routine that will decode an entire invader into a character, and advance the memory pointer to the next character memory location.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">setup</span><span class=\"w\">           </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$20</span><span class=\"w\">\t</span><span class=\"c1\">; store the target charset memory location $2000 at $40</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$41</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$00</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$69</span><span class=\"w\">\t</span><span class=\"c1\">; some random 7 bits i made up for the rest of the invader</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$39</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$D9</span><span class=\"w\">\t</span><span class=\"c1\">; a random 8 bits for the first half the the invader</span>\n<span class=\"w\">\t\t</span><span class=\"k\">ldy</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">\t\t</span><span class=\"c1\">; make sure Y is clear and ready</span>\n<span class=\"n\">loop</span><span class=\"w\"> \t        </span><span class=\"k\">pha</span><span class=\"w\">\t\t</span><span class=\"c1\">; preserve the current state of the invader onto the stack</span>\n<span class=\"w\"> \t\t</span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mb\">%111</span><span class=\"w\">\t</span><span class=\"c1\">; working with the first 3 bits only</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">$40</span><span class=\"p\">),</span><span class=\"n\">y</span><span class=\"w\">\t</span><span class=\"c1\">; store right side of the row</span>\n<span class=\"w\">\t\t</span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mb\">%11</span><span class=\"w\">\t</span><span class=\"c1\">; mask out centre bit</span>\n<span class=\"w\">\t\t</span><span class=\"k\">tax</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"n\">lookup</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"w\">    </span><span class=\"c1\">; load mirrored bits from lookuptable</span>\n<span class=\"w\">\t\t</span><span class=\"k\">asl</span>\n<span class=\"w\">\t\t</span><span class=\"k\">asl</span>\n<span class=\"w\">\t\t</span><span class=\"k\">asl</span>\n<span class=\"w\">\t\t</span><span class=\"k\">ora</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">$40</span><span class=\"p\">),</span><span class=\"n\">y</span><span class=\"w\">\t\t</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">$40</span><span class=\"p\">),</span><span class=\"n\">y</span><span class=\"w\">\t</span><span class=\"c1\">; row is now complete!</span>\n<span class=\"w\">\t\t</span><span class=\"k\">iny</span><span class=\"w\"> \t\t</span><span class=\"c1\">; increase Y by one</span>\n<span class=\"w\">\t\t</span><span class=\"k\">cpy</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">\t\t</span><span class=\"c1\">; test Y against 5</span>\n<span class=\"w\">\t\t</span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"n\">done</span><span class=\"w\">\t</span><span class=\"c1\">; branch to done if Y is 5\t\t</span>\n<span class=\"w\">\t\t</span><span class=\"k\">pla</span><span class=\"w\"> \t\t</span><span class=\"c1\">; restore the invader from stack</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lsr</span><span class=\"w\"> </span><span class=\"mh\">$39</span><span class=\"w\"> \t</span><span class=\"c1\">; rotate the next 3 bits in</span>\n<span class=\"w\">\t\t</span><span class=\"k\">ror</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lsr</span><span class=\"w\"> </span><span class=\"mh\">$39</span>\n<span class=\"w\">\t\t</span><span class=\"k\">ror</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lsr</span><span class=\"w\"> </span><span class=\"mh\">$39</span>\n<span class=\"w\">\t\t</span><span class=\"k\">ror</span>\n<span class=\"w\">\t\t</span><span class=\"k\">jmp</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"w\">\t</span><span class=\"c1\">; loop</span>\n<span class=\"n\">done</span><span class=\"w\"> \t</span><span class=\"k\">pla</span><span class=\"w\"> \t\t</span><span class=\"c1\">; restore stack</span>\n<span class=\"w\">\t\t</span><span class=\"k\">clc</span><span class=\"w\">         </span><span class=\"c1\">; add 8 to the target memory location</span>\n<span class=\"w\">\t\t</span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"w\">\t\t</span>\n<span class=\"w\">\t\t</span><span class=\"k\">adc</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">\t\t</span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">\t\t</span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"n\">skip</span><span class=\"w\">\t</span><span class=\"c1\">; if the carry bit is set, we overflowed from $FF to $00</span>\n<span class=\"w\">\t\t</span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$41</span><span class=\"w\">\t\t</span><span class=\"c1\">; which means we increase the most significant bit as well</span>\n<span class=\"n\">skip</span><span class=\"w\">\t</span><span class=\"p\">...</span><span class=\"w\">                     </span><span class=\"c1\">; rest of program </span>\n\n\n<span class=\"n\">lookup</span><span class=\"w\">\t</span><span class=\"n\">DC</span><span class=\"w\"> </span><span class=\"mb\">%00</span><span class=\"p\">,</span><span class=\"mb\">%10</span><span class=\"p\">,</span><span class=\"mb\">%01</span><span class=\"p\">,</span><span class=\"mb\">%11</span><span class=\"w\">\t</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Since the Y register is being used as the indirect index, and X is used for indexing the mirror lookup table, we need a new place to store the current invader byte. Rather than have to copy stuff around, we simply push it onto the stack <code>pha</code> and then restrore it <code>pla</code> when ready to advance the next 3 bits.</p>\n\n<p>The other part here worth mentioning is the slightly odd looking sequence of</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"k\">clc</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"k\">adc</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"n\">skip</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$41</span>\n<span class=\"n\">skip</span><span class=\"w\"> </span><span class=\"p\">...</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The 6502 can obviously only do 8 bit addition, and it does not have an instruction to add something ignoring the carry bit. The first instruction <code>clc</code> simply clears the carry bit so we don&rsquo;t get an unexpected result when we do the addition. The next three instructions add 8 to memory address $40. If this caused $40 to go over $FF and wrap around, then the carry bit will be set. The <code>bcc</code> instruction will branch to the given label when the carry bit is clear - so in the cases where the lower address byte of $40 overflowed, we also add one to the higher address byte at $41. This is a shortcut way to add an 8 bit number to a 16 bit number.</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/6.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>My totally random numbers produced quite a nice invader! The routine above can definitely be further optimised. For a start - once the extra 7 bits are shifted in, the <code>lsr $49</code> instructions are wasted. We could drop the loop and just unroll the code to prevent this and make it faster withouht the <code>jmp</code> instructions, at the cost of more program space.</p>\n\n<p>We still need a way to randomise the 256 invaders, but I will save that for another time!</p>\n\n<p>(and no, this version has nothing at all to do with fractals!)</p>")) ((? . 35) f post (u . "PezHack–Abstracting flow control with monads") (? . 35) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2012/07/13/pezhack-abstracting-flow-control-with-monads/index.html" . windows) (u . "/blog\\2012\\07\\13\\pezhack-abstracting-flow-control-with-monads/") (u . "2012-07-13T23:10:00") (? . 8) (? . 34) (c (u . "fsharp") c (u . "game programming") c (u . "roguelike")) (u . "\n<p>It's been forever since I last posted, I worked quite a bit on PezHack and then stopped for a while. I'm back to it now. In this post I will describe a technique I used to greatly reduce the amount of code and abstract away some repetitive imperative code.</p>\n\n<h3>The Problem</h3>\n\n<p>PezHack is a turn based game. The screen does not re-render itself all the time like a real-time game, but only when something changes and at the end of a the player's turn. The agent-based approach I used to separate the various sub systems of the game allow me to provide isolation around the graphics processing. The graphics agent is totally responsible for knowing what it needs to draw and will draw it on demand when it receives the relevant message. It does not really know anything else about the game state at all except the visual data of the various tiles that are visible, some player data that allow it to draw the various data about the player, and any menus / other UI that it needs to draw. Other systems can send it messages to inform it of some new visual state it should care about.</p>\n\n<p>Most actions that Pezi can perform require some form of additional input and conditional flow logic. For example, when you press the 'e' key to Eat, first a menu is displayed that shows the stuff in your inventory that is edible, if possible. If not it will display a message and not end the player's turn. Assuming the menu is displayed, the player then presses the key that relates to the item they wish to eat from the menu. If this key is invalid a relevant message is displayed, else the item in question is eaten. What then happens is dependent on the item, it might provide sustenance, or if it's a mushroom it could perform one of various kinds of effects, and then probably end the player's turn</p>\n\n<p>This is a common pattern that appears everywhere, and at each stage the graphics need to be re-drawn to show the various messages, menus and so on. At each stage it might continue or it might not depending the player's input, and the returns differs at each stage (end the player turn, or not, for example). In an imperative language we would almost certainly model this control flow with a bunch of nested if/then/else statements which quickly gets ugly. Because I am using the agent based approach for the graphics, I would also need to post a request to the graphics agent each and every time I needed the changes to show on the screen, so suddenly the actions become a list of imperative statements peppered with common code to keep the screen updated.</p>") #t (u . "\n<p>It's been forever since I last posted, I worked quite a bit on PezHack and then stopped for a while. I'm back to it now. In this post I will describe a technique I used to greatly reduce the amount of code and abstract away some repetitive imperative code.</p>\n\n<h3>The Problem</h3>\n\n<p>PezHack is a turn based game. The screen does not re-render itself all the time like a real-time game, but only when something changes and at the end of a the player's turn. The agent-based approach I used to separate the various sub systems of the game allow me to provide isolation around the graphics processing. The graphics agent is totally responsible for knowing what it needs to draw and will draw it on demand when it receives the relevant message. It does not really know anything else about the game state at all except the visual data of the various tiles that are visible, some player data that allow it to draw the various data about the player, and any menus / other UI that it needs to draw. Other systems can send it messages to inform it of some new visual state it should care about.</p>\n\n<p>Most actions that Pezi can perform require some form of additional input and conditional flow logic. For example, when you press the 'e' key to Eat, first a menu is displayed that shows the stuff in your inventory that is edible, if possible. If not it will display a message and not end the player's turn. Assuming the menu is displayed, the player then presses the key that relates to the item they wish to eat from the menu. If this key is invalid a relevant message is displayed, else the item in question is eaten. What then happens is dependent on the item, it might provide sustenance, or if it's a mushroom it could perform one of various kinds of effects, and then probably end the player's turn</p>\n\n<p>This is a common pattern that appears everywhere, and at each stage the graphics need to be re-drawn to show the various messages, menus and so on. At each stage it might continue or it might not depending the player's input, and the returns differs at each stage (end the player turn, or not, for example). In an imperative language we would almost certainly model this control flow with a bunch of nested if/then/else statements which quickly gets ugly. Because I am using the agent based approach for the graphics, I would also need to post a request to the graphics agent each and every time I needed the changes to show on the screen, so suddenly the actions become a list of imperative statements peppered with common code to keep the screen updated.</p>\n<!-- more-->\n\n<h3></h3>\n\n<h3>The Solution</h3>\n\n<p>This can be drastically improved with the use of a fairly simple monad. The Maybe monad allows you to remove flow control elements such as nested if / then / else statements, so my monad is based around the Maybe monad with some extra stuff built in to help handle graphics and input. It have called it the Action monad and it works as follows.</p>\n\n<ul>\n <li>You supply it two functions and a tuple. <em>Before,<strong></strong>InputPred</em>and <em>Fail</em></li>\n <li><em>Before</em> is of type <em>(unit-&gt;'e)</em>and it is immediately executed with its result bound to a value</li>\n <li>A cycle is then entered that displays any messages in the queue and draws the screen. If there are more than three messages, it only shows three and prompts the player to press  to show more.</li>\n <li>Next, <em>InputPred</em>of type <em>('e-&gt;'f option)</em> is applied the the result of <em>Before</em></li>\n <li>If this results in <em>Some 'f</em> then the monad binds successfully and will continue with the next expressions, passing along the <em>'f</em> result.</li>\n <li>Otherwise, it looks at the tuple <em>Fail</em> of type <em>(string option * 'g).</em> If a string is supplied it is passed to the graphics engine and the message cycle is entered until all messages are processed, and it finally returns <em>'g</em> (in the future i might just make this a function, but at the moment all fail cases only need to show some message to the user rather than perform some other action)</li></ul>\n\n<p>As you can see it is quite generic, and it turns out this monad is quite useful in a variety of areas of the game, not just for actions. I ended up replacing a large part of the core game loop and significantly simplifying it. Here is the code for it first :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ActionBuilder</span><span class=\"o\">(</span><span class=\"n\">graphics</span><span class=\"o\">:</span><span class=\"nn\">Graphics</span><span class=\"p\">.</span><span class=\"n\">GraphicsProcessor</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Delay</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">()</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Bind</span><span class=\"o\">((</span><span class=\"n\">before</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">inputPred</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"bp\">()</span>\n<span class=\"w\">        </span><span class=\"c1\">// cycle through any pending messages that might have been created in before() (or before before!)</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">more</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">graphics</span><span class=\"o\">.</span><span class=\"n\">ProcessStatusMessages</span><span class=\"bp\">()</span>\n<span class=\"w\">                </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">            </span><span class=\"n\">graphics</span><span class=\"o\">.</span><span class=\"n\">Render</span><span class=\"bp\">()</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>\n<span class=\"w\">                </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">TCODConsole</span><span class=\"p\">.</span><span class=\"n\">waitForKeypress</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">KeyCode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">TCODKeyCode</span><span class=\"p\">.</span><span class=\"n\">Space</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">                </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"k\">false</span>\n<span class=\"w\">                </span>\n<span class=\"w\">        </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">            </span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">inputPred</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\">  </span><span class=\"nn\">Option</span><span class=\"p\">.</span><span class=\"n\">isSome</span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">graphics</span><span class=\"o\">.</span><span class=\"n\">QueueStatusMessage</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"o\">).</span><span class=\"n\">Value</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"n\">NormalMessageColour</span>\n<span class=\"w\">            </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"k\">true</span>\n<span class=\"w\">            </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"n\">fail</span>\n<span class=\"w\">    </span><span class=\"k\">member</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"nf\">Return</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now let's see how this is used. First I will show the simplest action, which is quit. When the quit key is pressed, a message appears asking if they really want to quit, and if they then press 'y' then a QuitGame response is issued.</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">QuitAction</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">action</span><span class=\"o\">:</span><span class=\"nn\">ActionBuilder</span><span class=\"p\">.</span><span class=\"n\">ActionBuilder</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">action</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">        </span><span class=\"k\">let!</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">QueueStatusMessage</span><span class=\"w\"> </span><span class=\"s\">\"Are you sue you wish to quit? y/n\"</span><span class=\"w\"> </span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"n\">NormalMessageColour</span><span class=\"o\">),</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">libtcod</span><span class=\"o\">.</span><span class=\"n\">TCODConsole</span><span class=\"o\">.</span><span class=\"n\">waitForKeypress</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span>\n<span class=\"w\">                            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">Character</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">&#39;y&#39;</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"k\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">None</span><span class=\"o\">),(</span><span class=\"n\">None</span><span class=\"o\">,</span><span class=\"n\">End</span><span class=\"o\">))</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">QuitGame</span><span class=\"o\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The <em>Before</em> function displays some text asking if the user really wants to quit the game. The next function then waits for a key press, and if it;s a 'y' character then Some is returned (with <em>true,</em>just because it needs to return something, even though we don't care about it). If they press anything else, then <em>None</em> is returned, which means the last parameter <em>(None,End)</em> is acted upon, which means it prints no text and returns the <em>End</em>message. This stops the action message at that point and <em>End</em> does not end the player's turn so they are free to do something else before the monsters move. Assuming they press 'y', the rest of the function executes and returns the <em>QuitGame</em> message which eventually results in the game ending.</p>\n\n<p>Now I will return to the Eat action explained above as its significantly more complex:</p>\n\n<p>let EatAction (action:ActionBuilder.ActionBuilder) p = action {\n <br /> let! items = ((fun () -&gt; p.d.Inventory.FilterType (function ItemData.Comestible(<em>) | ItemData.Mushroom(</em>) -&gt; true | _ -&gt; false)),  (fun comestible -&gt; if comestible.Count &gt; 0 then Some(comestible) else None),(Some &ldquo;You have nothing to eat&rdquo;, End))\n <br /> let! id = ((fun () -&gt; p.g.DisplayMenu &ldquo;Eat what?&rdquo; (ItemData.Inventory.ToMenu items) \"\"),  (fun () -&gt; let c = TC.waitForKeypress(true)  items |&gt; Map.tryFindKey( fun k v -&gt; v.Letter = c.Character)), (Some &ldquo;The things squirrels will try and eat..&rdquo;, End))  match items.[id].Type with  | ItemData.Mushroom(data) -&gt;\n <br /> p.w.AddOrUpdateEntity  failwith \"\"; return End } ```</p>\n\n<p>The monad is invoked, with the <em>Before</em> function which filters the players inventory to stuff that is edible. The results of this are then passed into the input predicate function (the wonders of type inference make this just work with no type annotations) and checks if the filtered items contain any data, if they don't it returns <em>None</em> and then finally the message is displayed indicating the player has nothing to eat, and execution halts there returning <em>End</em>(allowing the player to do something else this turn). Assuming there were items, they are now bound to <em>items</em>. Another action monad is then invoked that displays a menu containing the filtered items in the <em>Before</em> function. The input pred then takes player input, if it doesn't match a letter assigned to the item in the menu it prints a message and returns <em>End.</em> otherwise, <em>id</em> is bound to the id that the player selected. Finally, the item has some action invoked on it &ndash; in this case only mushrooms are implemented, and it removes the mushroom from the players inventory (sending commands to the World agent telling it to update the player data), invokes the mushroom's specific action, issues another message to tell the World agent that this type of mushroom has now been identified, and finally returns a message that says the player's turn ends for 1 turn.</p>\n\n<p>Pretty cool! The code above is only interested in the higher level stuff that is going on and doesn't need to care about display and flow control. Data from the first function can be passed to the second function, and early exit of the function is easily possible. The monad significantly reduced the actions code from almost 1000 lines to less than 350, and that includes Eat, Pickup, Drop, Move, Attack, Throw, Descend Level, Quit, Open, Close, Inventory, Wait, plus functions to merge items that have been dropped or thrown with existing stackable items on the floor where they land, selection menus and &ldquo;modal&rdquo; choice menus, plus various other helper functions.</p>\n\n<p>Some actions such as Throw are really quite complex, you have to pick an item to throw, choose a direction to throw it, then show it being &ldquo;animated&rdquo; as it moves along the screen, and then finally (maybe) hit something, and either drop to the floor or attack an enemy which may result in other things happening &ndash; now I can just look at the code and see what it's doing without having to dig about in a lot of essentially redundant nested code. Actions can also transfer execution to and from other actions.</p>\n\n<p>Functional programming for the win <img class=\"wlEmoticon wlEmoticon-smile\" style=\"border-style: none;\" src=\"../../../../../img/old/wlEmoticon-smile_1.png\" alt=\"Smile\" /></p>")) ((? . 47) f post (u . "C64 Macro State Machine") (? . 47) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2018/10/05/c64-macro-state-machine/index.html" . windows) (u . "/blog\\2018\\10\\05\\c64-macro-state-machine/") (u . "2018-10-05T11:14:05") (? . 17) (? . 46) (c (u . "C64") c (u . "asi64") c (u . "macros") c (u . "6502") c (u . "racket")) (u . "\n<p>In this post we will see how <a href=\"http://www.pinksquirrellabs.com/blog/2017/05/30/asi64/\">asi64&rsquo;s</a> (<a href=\"[https://racket-lang.org/\">Racket&rsquo;s</a>) macro system can massively reduce the amount of 6502 assembly code you have to write, beyond what a typical macro assembler can achieve.</p>") #t (u . "\n<p>In this post we will see how <a href=\"http://www.pinksquirrellabs.com/blog/2017/05/30/asi64/\">asi64&rsquo;s</a> (<a href=\"[https://racket-lang.org/\">Racket&rsquo;s</a>) macro system can massively reduce the amount of 6502 assembly code you have to write, beyond what a typical macro assembler can achieve.</p>\n<!-- more-->\n\n<h2 id=\"state-machines\">State Machines</h2>\n\n<p>I am currently writing my first little game for the C64. In it, the player&rsquo;s sprite has fairly complex movement behaviour which is represented by a state machine that has no less than 13 different states. In order to transition between the states, the player uses some combination of joystick controls, or something outside such as collision detection forces a state change.</p>\n\n<p>In this post we will concentrate on state changes from the joystick. Programming these state machines can be tricky due to the amount of different possible transitions from one state to another and the priority in which they are checked. To show this we will look at a reduced and simplified view using 3 of the 13 states and the interactions between them.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">;some constants</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">; joy masks</span>\n<span class=\"w\">  </span><span class=\"n\">joy-up</span><span class=\"w\">    </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">%00000001</span>\n<span class=\"w\">  </span><span class=\"n\">joy-down</span><span class=\"w\">  </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">%00000010</span>\n<span class=\"w\">  </span><span class=\"n\">joy-left</span><span class=\"w\">  </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">%00000100</span>\n<span class=\"w\">  </span><span class=\"n\">joy-right</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">%00001000</span>\n<span class=\"w\">  </span><span class=\"n\">joy-fire</span><span class=\"w\">  </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">%00010000</span>\n<span class=\"w\">  </span>\n<span class=\"w\">  </span><span class=\"c1\">;machine states</span>\n<span class=\"w\">  </span><span class=\"n\">state-standing</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">$0</span>\n<span class=\"w\">  </span><span class=\"n\">state-walking-right</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">$1</span>\n<span class=\"w\">  </span><span class=\"n\">state-crouching</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">$2</span>\n\n<span class=\"w\">  </span><span class=\"c1\">; variables</span>\n<span class=\"w\">  </span><span class=\"n\">current-state</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">$f0</span>\n<span class=\"p\">}</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The above code defines some constants for the three different states, a location to store the current state, and some masks used to detect which buttons on the joysticks are pressed when reading the joystick register.</p>\n\n<p>The states that are defined represent the player standing still, walking to the right, and crouching. A graph of these transitions looks like this :</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/asi/state-graph.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Even in this simple example, complexity rears its head. Notice that you cannot transition from walking right into a crouch, since I don&rsquo;t want the player to enter that state accidentally as they are walking along if they happen to pull the joystick down and right at the same time. Additionally, there has to be some inverse logic for button presses to make some transitions, for example, when walking right, NOT holding right puts you back into the standing state. You can imagine with 13 states this can start to get very complex.</p>\n\n<p>Programming this in 6502 asm is not particularly difficult, it&rsquo;s just long, boring and very repetitive which in turns makes it a chore to change and maintain (more on the ineffeciency of this approach in the closing thoughts&hellip;) Here&rsquo;s an example for the standing state :</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">:</span><span class=\"n\">update</span><span class=\"o\">-</span><span class=\"n\">machine</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">ldy</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"w\">    </span><span class=\"c1\">; load current state</span>\n<span class=\"w\">     </span><span class=\"k\">cpy</span><span class=\"w\"> </span><span class=\"n\">@state</span><span class=\"o\">-</span><span class=\"n\">standing</span><span class=\"w\">  </span><span class=\"c1\">; is it the standing state?</span>\n<span class=\"w\">     </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">next</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"o\">+</span><span class=\"w\">      </span><span class=\"c1\">; if not then go to the next check...</span>\n<span class=\"w\">     </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$dc00</span><span class=\"w\">            </span><span class=\"c1\">; load the joystick state</span>\n<span class=\"w\">     </span><span class=\"k\">tax</span><span class=\"w\">                  </span><span class=\"c1\">; preserve it in X so we can look at it again later..</span>\n<span class=\"w\">     </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">@joy</span><span class=\"o\">-</span><span class=\"n\">right</span><span class=\"w\">       </span><span class=\"c1\">; test joystick (1 is not pressed, 0 is pressed)</span>\n<span class=\"w\">     </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">skip</span><span class=\"o\">+</span><span class=\"w\">            </span><span class=\"c1\">; if not, move to next joystick check</span>\n<span class=\"w\">     </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"n\">@state</span><span class=\"o\">-</span><span class=\"n\">walking</span><span class=\"o\">-</span><span class=\"n\">right</span>\n<span class=\"w\">     </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">change</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"o\">-</span><span class=\"w\">    </span><span class=\"c1\">; call the function that changes the state </span>\n<span class=\"w\">     </span><span class=\"k\">rts</span><span class=\"w\">                  </span><span class=\"c1\">; early exit from function</span>\n<span class=\"p\">:</span><span class=\"n\">skip</span>\n<span class=\"w\">     </span><span class=\"k\">txa</span><span class=\"w\">                  </span><span class=\"c1\">; reload the joy data</span>\n<span class=\"w\">                          </span><span class=\"c1\">; repeat all the above the for next direction</span>\n<span class=\"w\">     </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">@joy</span><span class=\"o\">-</span><span class=\"n\">down</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"n\">skip</span><span class=\"o\">+</span><span class=\"w\">            </span>\n<span class=\"w\">     </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"n\">@tstate</span><span class=\"o\">-</span><span class=\"n\">crouching</span>\n<span class=\"w\">     </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">change</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"o\">-</span>\n<span class=\"p\">:</span><span class=\"n\">skip</span>\n<span class=\"w\">     </span><span class=\"k\">rts</span><span class=\"w\">                   </span><span class=\"c1\">; return from function</span>\n<span class=\"p\">:</span><span class=\"n\">next</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"w\">     </span>\n<span class=\"w\">     </span><span class=\"k\">cpy</span><span class=\"w\"> </span><span class=\"n\">@state</span><span class=\"o\">-</span><span class=\"n\">walking</span><span class=\"o\">-</span><span class=\"n\">right</span>\n<span class=\"w\">     </span><span class=\"c1\">; .... repeat all the code for each state and each transition</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>You can see this is going to extremely long winded with 13 different states each with multiple transitions, sometimes with more complex trigger logic (eg, combinations of joystick button being pressed, things not being pressed and so on).</p>\n\n<p>In addition to this, since this is the update function for the machine, this is also where logic will take place that affects the game depending on the state, e.g. the walking right section needs to actually update the player&rsquo;s X co-ordinate.</p>\n\n<p>The final salt in the wound is that some state transitions need to execute some logic after the transition actually takes effect, for example resetting some variables or switching on / off some additional sprites.</p>\n\n<p>Whilst I enjoy writing assembly code, I don&rsquo;t so much enjoy maintaining a monster like this. I takes forever to try changes or introduce new states and it is very easy to introduce subtle, silly bugs that you don&rsquo;t notice until later.</p>\n\n<h2 id=\"macros-to-the-resuce\">Macros to the resuce!</h2>\n\n<p>Racket&rsquo;s amazing macro system can help us out here. Wherever you see replication of code, macros are ready to lend you a helping hand. In this example we won&rsquo;t even see any of the really fancy stuff racket can do, just basic macros.</p>\n\n<p>The way I like to write macros is to first write down the syntax I would like to be able to write, then work backwards from that point to make it happen. Let&rsquo;s keep it simple to start with, and forget about having to execute game logic and pre-transition logic. In fact let&rsquo;s also forget about the actual machine states and just concentrate of the repetitve bit in the middle which is the checking of joystick states.</p>\n\n<p>As an inital concept, let&rsquo;s say it would be nice to write this :</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"n\">:update-machine</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">ldy</span><span class=\"w\"> </span><span class=\"n\">current-state</span><span class=\"w\">        </span>\n<span class=\"w\">     </span><span class=\"n\">cpy</span><span class=\"w\"> </span><span class=\"n\">@state-standing</span><span class=\"w\"> </span>\n<span class=\"w\">     </span><span class=\"n\">bne</span><span class=\"w\"> </span><span class=\"n\">next-state+</span><span class=\"w\">     </span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">generate-joy-transitions</span>\n<span class=\"w\">      </span><span class=\"p\">([</span><span class=\"n\">joy-right</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-walking-right</span><span class=\"p\">]</span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">joy-down</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-crouching</span><span class=\"p\">]))</span>\n<span class=\"w\">     </span><span class=\"n\">rts</span>\n<span class=\"n\">:next-state</span>\n<span class=\"w\">     </span><span class=\"c1\">; .....</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The macro <code>generate-joy-transitions</code> will take a list of lists, each inner list has three elements. The first is the bit pattern to test against the joystick register, the second is a boolean that indicates if the button should be tested against being pressed or NOT being pressed, and finally the last part is the target state.</p>\n\n<p>Let&rsquo;s have a frst go at writing it :</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">generate-joy-transitions</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">is-pressed?</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n<span class=\"w\">   </span><span class=\"o\">#'</span><span class=\"p\">{</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">$dc00</span><span class=\"w\">          </span><span class=\"c1\">; load joystick register</span>\n<span class=\"w\">      </span><span class=\"n\">tax</span><span class=\"w\">                </span><span class=\"c1\">; preserve it in x</span>\n<span class=\"w\">      </span><span class=\"p\">{</span><span class=\"w\">    </span>\n<span class=\"w\">       </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span><span class=\"w\"> </span><span class=\"n\">@test</span><span class=\"w\">         </span><span class=\"c1\">; test bits</span>\n<span class=\"w\">       </span><span class=\"c1\">; ?? how do we perform the branch?</span>\n<span class=\"w\">       </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"n\">@target</span><span class=\"w\">       </span><span class=\"c1\">; perform state transition</span>\n<span class=\"w\">       </span><span class=\"n\">jsr</span><span class=\"w\"> </span><span class=\"n\">change-state-</span>\n<span class=\"w\">       </span><span class=\"n\">rts</span><span class=\"w\">               </span><span class=\"c1\">; exit function</span>\n<span class=\"w\">       </span><span class=\"n\">:skip</span><span class=\"w\">             </span>\n<span class=\"w\">       </span><span class=\"n\">txa</span><span class=\"w\">               </span><span class=\"c1\">; restore joytsick data</span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\">                  </span><span class=\"c1\">; repeat ...</span>\n<span class=\"w\">   </span><span class=\"p\">])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is not a terrible first attempt, we simply pattern match on the inner list, extracting the parameters into the names <code>test</code> <code>is-pressed?</code> and <code>target</code>, the ellipsis <code>...</code> that follows tells racket that any amount of these lists may appear here.</p>\n\n<p>The first two asm instructions are generated only once - the inner section which is wrapped in a nested 6502 block using <code>{ }</code> is repeated for each set of arguments thanks to the <code>...</code> that follows the block.</p>\n\n<p>A problem remains though - after the AND test, we must use a different branch instruction depending on if we are checking that the button was pressed or not pressed via the <code>is-pressed?</code> parameter (<code>bne</code> and <code>beq</code> respectively). How can we do this? We can&rsquo;t simply replace <code>is-pressed?</code> in the pattern match with <code>#t</code> and then replicate the pattern and macro output with another case for <code>#f</code>, because that would mean ALL of the provided arguments would have to be same, which is no good.</p>\n\n<h2 id=\"macros-in-yer-macros\">Macros in yer macros..</h2>\n\n<p>Likely there are many ways to skin this cat - Racket generally likes you to be declarative about these things, so one way is to simply define another macro that takes care of it.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">joy-branch</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"p\">{</span><span class=\"n\">bne</span><span class=\"w\"> </span><span class=\"n\">skip+</span><span class=\"p\">}]</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"no\">#f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"p\">{</span><span class=\"n\">beq</span><span class=\"w\"> </span><span class=\"n\">skip+</span><span class=\"p\">}])</span>\n<span class=\"w\">            </span>\n<span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">generate-joy-transitions</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">is-pressed?</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n<span class=\"w\">   </span><span class=\"o\">#'</span><span class=\"p\">{</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">$dc00</span>\n<span class=\"w\">      </span><span class=\"n\">tax</span><span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"p\">{</span>\n<span class=\"w\">       </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span><span class=\"w\"> </span><span class=\"n\">@test</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">joy-branch</span><span class=\"w\"> </span><span class=\"n\">is-presed?</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c1\">; call the other macro here</span>\n<span class=\"w\">       </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"n\">@target</span>\n<span class=\"w\">       </span><span class=\"n\">jsr</span><span class=\"w\"> </span><span class=\"n\">change-state-</span>\n<span class=\"w\">       </span><span class=\"n\">rts</span>\n<span class=\"w\">       </span><span class=\"n\">:skip</span>\n<span class=\"w\">       </span><span class=\"n\">txa</span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">   </span><span class=\"p\">])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Cool, now it works as expected. Infact, since we haven&rsquo;t told Racket to expect any particular types (eg, expressions, integers) as the parameters, it is totally possible to pass expressions into <code>test</code> and <code>target</code>, which is very handy if you wanted for example to test a combined bitmask for more than one button at once:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">generate-joy-transitions</span>\n<span class=\"w\">      </span><span class=\"p\">([(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._bitwise-ior))\" style=\"color: inherit\">bitwise-ior</a></span><span class=\"w\"> </span><span class=\"n\">joy-right</span><span class=\"w\"> </span><span class=\"n\">joy-down</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">some-state</span><span class=\"p\">]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Very nice! We basically got that for free. For the final piece of this section we wished to be able to execute some arbitary code after the transition has finished. However, we dont always want to do this, and Racket has just the answer by allowing us to put in an optional parameter that will be defaulted to an empty block if not supplied.</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">generate-joy-transitions</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">is-pressed?</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._~7eoptional))\" style=\"color: inherit\">~optional</a></span><span class=\"w\"> </span><span class=\"n\">extra</span><span class=\"w\"> </span><span class=\"kd\">#:defaults</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">extra</span><span class=\"w\"> </span><span class=\"o\">#'</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">]))]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n<span class=\"w\">   </span><span class=\"o\">#'</span><span class=\"p\">{</span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">$dc00</span>\n<span class=\"w\">      </span><span class=\"n\">tax</span><span class=\"w\">      </span>\n<span class=\"w\">      </span><span class=\"p\">{</span>\n<span class=\"w\">       </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span><span class=\"w\"> </span><span class=\"n\">@test</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">joy-branch</span><span class=\"w\"> </span><span class=\"n\">is-pressed?</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"w\">       </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"n\">@target</span>\n<span class=\"w\">       </span><span class=\"n\">jsr</span><span class=\"w\"> </span><span class=\"n\">change-state-</span>\n<span class=\"w\">       </span><span class=\"n\">extra</span><span class=\"w\">              </span><span class=\"c1\">; stick the extra code in here</span>\n<span class=\"w\">       </span><span class=\"n\">rts</span>\n<span class=\"w\">       </span><span class=\"n\">:skip</span>\n<span class=\"w\">       </span><span class=\"n\">txa</span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">   </span><span class=\"p\">])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now we can write</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">generate-joy-transitions</span>\n<span class=\"w\">      </span><span class=\"p\">([</span><span class=\"n\">joy-right</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-walking-right</span><span class=\"p\">]</span>\n<span class=\"w\">       </span><span class=\"p\">[</span><span class=\"n\">joy-down</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-crouching</span>\n<span class=\"w\">                    </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"c1\">; some asm code...</span>\n<span class=\"w\">                    </span><span class=\"p\">}]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Of course, a 6502 block is inlined in the above example, but it could equally call a function that generates some code, calls another macro, or whatever.</p>\n\n<h1 id=\"macros-in-yer-macros-in-yer-macros-\">Macros in yer macros in yer macros &hellip;</h1>\n\n<p>The final icing on the cake is to get rid of the state machine branching logic completely. To do this we need to :</p>\n\n<ul>\n <li>Create essentially the <code>switch</code> statement for each state</li>\n <li>Allow some arbitary code be executed</li>\n <li>Check all joystick transitions as above</li></ul>\n\n<p>So, what we want to be able to write is :</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\">generate-state-machine</span>\n<span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">state-standing</span>\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">   </span><span class=\"p\">([</span><span class=\"n\">joy-right</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-walking-right</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">joy-left</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-walking-left</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">joy-down</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-crouching</span>\n<span class=\"w\">              </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"w\"> </span><span class=\"p\">}])]</span>\n<span class=\"w\">               </span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">state-walking-right</span>\n<span class=\"w\">   </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">; move sprite right</span>\n<span class=\"w\">    </span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">$d000</span>\n<span class=\"w\">    </span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">$d000</span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\">    </span>\n<span class=\"w\">   </span><span class=\"p\">([</span><span class=\"n\">joy-left</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"w\"> </span><span class=\"n\">state-walking-left</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">joy-right</span><span class=\"w\"> </span><span class=\"no\">#f</span><span class=\"w\"> </span><span class=\"n\">state-standing</span><span class=\"p\">])]</span>\n\n<span class=\"w\">  </span><span class=\"c1\">; more cases ...</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Following the patterns above this pretty much writes itself:</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">generate-state-machine</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">state-number</span>\n<span class=\"w\">        </span><span class=\"n\">update-code</span>\n<span class=\"w\">        </span><span class=\"n\">joy-cases</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n<span class=\"w\">   </span><span class=\"o\">#'</span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"p\">{</span>\n<span class=\"w\">       </span><span class=\"n\">ldy</span><span class=\"w\"> </span><span class=\"n\">current-state</span><span class=\"w\">  </span><span class=\"c1\">;load current state</span>\n<span class=\"w\">       </span><span class=\"n\">cpy</span><span class=\"w\"> </span><span class=\"n\">@state-number</span><span class=\"w\">  </span>\n<span class=\"w\">       </span><span class=\"n\">bne</span><span class=\"w\"> </span><span class=\"n\">next-state+</span><span class=\"w\">    </span>\n<span class=\"w\">       </span><span class=\"n\">update-code</span><span class=\"w\">        </span><span class=\"c1\">; insert update code here</span>\n\n<span class=\"w\">       </span><span class=\"c1\">;call the joystick macro with the cases</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">generate-joy-transitions</span><span class=\"w\"> </span><span class=\"n\">joy-cases</span><span class=\"p\">)</span>\n\n<span class=\"w\">     </span><span class=\"n\">:next-state</span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n<span class=\"w\">     </span><span class=\"p\">}])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And we are done.</p>\n\n<h2 id=\"closing-thoughts\">Closing Thoughts</h2>\n\n<p>Macros are a super powerful way to help introduce new syntax over the top of the assembler, and this is really just scratching the surface of it.</p>\n\n<p>This example is kept simple, it has some obvious problems such as the &ldquo;switch&rdquo; statement uses branching instructions that can only go +/&ndash; 127 bytes and it will break if there is too much code between the branch and the label. It also has to check each state until it finds what it is looking for - a nicer way would be to use a lookup table and jump to the correct address, which is totally possible with a little more macrology &hellip;</p>\n\n<p>Happy assembling!</p>\n\n<h2 id=\"additional-edit\">Additional Edit!</h2>\n\n<p>Since I posted this earlier today, I have changed the switch-statement type affair into a much more effecient lookup table, and I thought it might be interesting to show how it works, since it uses the assembler&rsquo;s open architecture by directly calling into some of the functionality it provides rather than using the assembler syntax.</p>\n\n<p>The idea is to do the following</p>\n\n<ul>\n <li>Load the current state number</li>\n <li>Using the number as an index, lookup the low address byte where the code for that state lives. Store this number somewhere</li>\n <li>Repeat to lookup the high address byte, store it next to the low byte</li>\n <li>Use the indirect jump op-code to jump to this address.</li></ul>\n\n<p>In order to do this we will have to know the location of each state&rsquo;s code that we assemble and put their locations into lookup tables split by their low and high bytes. There are a few ways to do this, the easiest is to label each section of state code, then later extract the address details into lookup tabes. Here&rsquo;s how it looks :</p>\n\n<div class=\"brush: racket\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Defining_Simple_Macros.html#(form._((lib._syntax/parse/define..rkt)._define-syntax-parser))\" style=\"color: inherit\">define-syntax-parser</a></span><span class=\"w\"> </span><span class=\"n\">generate-state-machine</span>\n<span class=\"w\">  </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">state-number</span>\n<span class=\"w\">        </span><span class=\"n\">update-code</span>\n<span class=\"w\">        </span><span class=\"n\">joy-cases</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n<span class=\"w\">     </span><span class=\"o\">#'</span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">ldx</span><span class=\"w\"> </span><span class=\"n\">tc-state</span><span class=\"w\">            </span><span class=\"c1\">; load current state</span>\n<span class=\"w\">        </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">state-machine-lo:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"c1\">; use lookup table and setup</span>\n<span class=\"w\">        </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">jump-vector-lo+</span><span class=\"w\">     </span><span class=\"c1\">; 16 bit address pointer</span>\n<span class=\"w\">        </span><span class=\"n\">lda</span><span class=\"w\"> </span><span class=\"n\">state-machine-hi:</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"n\">sta</span><span class=\"w\"> </span><span class=\"n\">jump-vector-hi+</span>\n<span class=\"w\">        </span><span class=\"n\">jmpi</span><span class=\"w\"> </span><span class=\"n\">jump-vector-lo:</span><span class=\"w\">    </span><span class=\"c1\">; jump to target state</span>\n<span class=\"w\">        </span>\n<span class=\"w\">        </span><span class=\"c1\">; write out the states </span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">         </span><span class=\"c1\">;set jump location</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"n\">set-jump-source-current</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span><span class=\"w\"> </span><span class=\"s2\">\"state~a\"</span><span class=\"w\"> </span><span class=\"n\">state-number</span><span class=\"p\">))</span><span class=\"w\"> </span>\n<span class=\"w\">         </span><span class=\"n\">update-code</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"n\">generate-joy-transitions</span><span class=\"w\"> </span><span class=\"n\">joy-cases</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"n\">rts</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">jump-labels</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"n\">~&gt;&gt;</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span><span class=\"w\"> </span><span class=\"n\">state-number</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span><span class=\"w\"> </span><span class=\"s2\">\"state~a\"</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)))</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">find-closest-label</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">here</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"p\">)))))</span>\n<span class=\"w\">          </span>\n<span class=\"w\">        </span><span class=\"n\">:state-machine-lo</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write-values</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"n\">lo-byte</span><span class=\"w\"> </span><span class=\"n\">jump-labels</span><span class=\"p\">))</span>\n<span class=\"w\">        </span>\n<span class=\"w\">        </span><span class=\"n\">:state-machine-hi</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write-values</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span><span class=\"w\"> </span><span class=\"n\">hi-byte</span><span class=\"w\"> </span><span class=\"n\">jump-labels</span><span class=\"p\">))</span>\n\n<span class=\"w\">        </span><span class=\"n\">:jump-vector-lo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">$FF</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">:jump-vector-hi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">$FF</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"p\">}])</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The first lines of code load in the current state, perfom the indexed lookups into the tables and store the address in the jump-vector. Then, the code jumps via this vector and begins executing the code for the current state.</p>\n\n<p>The code that writes out the states directly calls the internal assembler function to add a label <code>set-jump-source-current</code>, and it names the label <code>state-n</code> where <code>n</code> is the number of the state it is processing.</p>\n\n<p>At the bottom of the macro, we take ALL the numbers together <code>(list state-number ... )</code> re-format them into the label names, call another internal assembler function that locates a label from a given location <code>find-closest-label</code> and finally extracts the low or high bytes from it. These are then written out as lookup data.</p>\n\n<p>Finally, the last two lines label a couple of bytes to use as a jump vector that is written to from the jumping logic.</p>\n\n<p>This is really cool! Now the state machine is much more effecient and has no worries about branching limitations. Most importantly, you can add and remove states withouht ever having to worry about moving loads of code and numbers around, and making far less mistakes because of it.</p>")) ((? . 50) f post (u . "C64 Programming - Invader Fractal #2") (? . 50) 1745196454 (p+ #"C:\\repos\\pezipink.github.io\\blog/2017/03/31/c64-programming-invader-fractal-2/index.html" . windows) (u . "/blog\\2017\\03\\31\\c64-programming-invader-fractal-2/") (u . "2017-03-31T12:23:17") (? . 49) (? . 25) (c (u . "C64") c (u . "6502")) (u . "\n<p>In the <a href=\"http://pinksquirrellabs.com/blog/2017/02/28/c64-programming-invader-fractal/\">last post</a> we discovered how to decode 15-bit symmetric invaders into a chacrater set. This time around we will make them fractal!</p>\n\n<p>The invaders from the last post occupy exactly one character each. The aim is to now select an invader at random, and then draw it one size bigger, using other random invaders as its &ldquo;pixels&rdquo; like this</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/7.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Then, the process can be repeated again, drawing an even bigger invader which is formed by drawing even bigger &ldquo;pixels&rdquo; which are composed of the size 2 invaders, like this!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/8.png\" alt=\"\" />\n <p class=\"caption\"></p></div>") #t (u . "\n<p>In the <a href=\"http://pinksquirrellabs.com/blog/2017/02/28/c64-programming-invader-fractal/\">last post</a> we discovered how to decode 15-bit symmetric invaders into a chacrater set. This time around we will make them fractal!</p>\n\n<p>The invaders from the last post occupy exactly one character each. The aim is to now select an invader at random, and then draw it one size bigger, using other random invaders as its &ldquo;pixels&rdquo; like this</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/7.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Then, the process can be repeated again, drawing an even bigger invader which is formed by drawing even bigger &ldquo;pixels&rdquo; which are composed of the size 2 invaders, like this!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/8.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n<!-- more-->\n\n<h3 id=\"a-plan-of-action\">A plan of action</h3>\n\n<p>Writing in ASM is very different to high level languages. You can&rsquo;t simply jump in and start writing code with only a very loose idea, at least some stuff has to be planned out up ahead if you want to get anywhere without wasting time. (Well, I guess with more experience this get easier &hellip; )</p>\n\n<p>In order to draw the first level of invader, we are going to need the following high-level elements</p>\n\n<ul>\n <li>A way of selecting a random invader and calculating where in character set memory it sits</li>\n <li>An algorithm that takes each bit of each row of the invader in turn, and draws another invader into video memory if the bit is set</li>\n <li>Another alogrithm that does a very similar thing to the previous one, on a bigger scale</li></ul>\n\n<p>I have a small not-very-random number generator routine originally called <code>rng</code>. Its implementation is out of the scope of this post, but you can call it as follows</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"w\">\t\t</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p><code>jsr</code> is an opcode that jumps to the named routine, after first pushing the current location on the stack, then when it encounters an <code>rts</code> it returns execution to the calling code. The <code>rng</code> routine will leave a not particularly random number inside the accumulator ready for use.</p>\n\n<h3 id=\"choosing-an-invader\">Choosing an invader</h3>\n\n<p>The program I wrote populates a character set at memory location $2000 with 254 sort of unique invaders, using the technique described in the previous post and the <code>rng</code> routine. I defined characters 0 and 1 in the set manually, where 0 is blank and 1 has every pixel set. A character in memory is layed out as 8*8 contiguous bytes, each one represeting the pixels that are switched on for each row. Therefore, the location in memory of character <code>n</code> is <code>$2000 + (n * 8)</code>. The 6502 does not have any multiplication instructions - although you can of course write your own by using a combination of adding and bit shifting, which would be fast. However, for this task we will just write a loop that adds 8 n times.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"nl\">draw_invader:</span><span class=\"w\"> </span><span class=\"n\">subroutine</span>\n<span class=\"w\">    </span><span class=\"c1\">; store the address at $3E and 3F</span>\n<span class=\"w\">    </span><span class=\"c1\">; starting at $2000 where the character memory begins</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$0</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$3E</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$20</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$3F</span>\n<span class=\"w\">    </span><span class=\"c1\">;; pick random invader number</span>\n<span class=\"w\">    </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">rng</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$3D</span>\n<span class=\"w\">    </span><span class=\"c1\">;; add 8 for each count</span>\n<span class=\"kp\">.calc_address</span>\n<span class=\"w\">    </span><span class=\"k\">clc</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"k\">adc</span><span class=\"w\"> </span><span class=\"mh\">$3E</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$3E</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"o\">*+</span><span class=\"mi\">4</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$3F</span>\n<span class=\"w\">    </span><span class=\"k\">dec</span><span class=\"w\"> </span><span class=\"mh\">$3D</span>\n<span class=\"w\">    </span><span class=\"k\">bne</span><span class=\"w\"> </span><span class=\"kp\">.calc_address</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>This is fairly straight forward - the address is 16 bits, and we store it in location $3E and $3F in the zero-page (an arbitary choice) so that it can be used with the indirect addressing mode later, as discussed in the previous article. A random number from 0&ndash;255 is generated and stored in $3D, and then we enter a loop that adds 8 to the address, decreases $3D and loops until $3D is zero. One new thing here is the operand following the <code>bcc</code> instruction, <code>*+4</code>. The * tells the assembler to use the current location, which you can then offset by some number. Effectively this skips the <code>inc $3F</code> instruction, which saves having to use a label to do it. Oviously, this technique is error prone and hard to read, but it makes sense for stuff you have to do all the time, like this addition of an 8 bit number to a 16 bit one. The &ldquo;subroutine&rdquo; keyword tells the assembler to uniquely name any labels following it that start with a \".\", this is so you don&rsquo;t have to keep dreaming up globally unique label names for your different routines.</p>\n\n<h3 id=\"drawing-an-invader\">Drawing an Invader</h3>\n\n<p>Now we have the correct address, we can work out how to draw the invader. The C64 screen is 40*25 characters. A character is 8*8 pixels, although the invaders are only actually using 5*5 of them, which will be useful later since it means we can fit one massive invader on the screen, just!</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$00</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$44</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mh\">$04</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$45</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The video memory starts at $0400, and clearly we are going to need to keep track of where we are in order to draw the invader, so another 16 bit address ($0400) is placed in the zero-page at locations $44 and $45 (more random locations).</p>\n\n<p>Now the algorithm can begin:</p>\n\n<ul>\n <li>Read the current byte of the invader</li>\n <li>For each bit of the byte, determine if it is set</li>\n <li>If it is, pick a random invader character and store it at the current video memory location</li>\n <li>Increase the video location by one</li>\n <li>At the end of the byte, move down to the next row in video memory, at column 0</li>\n <li>Loop 5 times</li></ul>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"w\">    </span><span class=\"k\">ldx</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">                      </span><span class=\"c1\">; 5 lines</span>\n<span class=\"kp\">.draw_line</span>\n<span class=\"w\">    </span><span class=\"k\">ldy</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">                      </span><span class=\"c1\">;clear y, not using it here</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">$3E</span><span class=\"p\">),</span><span class=\"n\">y</span><span class=\"w\">                 </span><span class=\"c1\">;load current invader byte</span>\n<span class=\"kp\">.loop</span>\n<span class=\"w\">    </span><span class=\"k\">pha</span><span class=\"w\">                         </span><span class=\"c1\">;preserve it on the stack</span>\n<span class=\"w\">    </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\">                      </span><span class=\"c1\">;check current bit for 1 or 0</span>\n<span class=\"w\">    </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"kp\">.skip</span>\n<span class=\"w\">    </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"w\">                     </span><span class=\"c1\">;pick random invader</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">$40</span><span class=\"p\">),</span><span class=\"n\">y</span><span class=\"w\">                 </span><span class=\"c1\">;draw to screen offset by y</span>\n<span class=\"kp\">.skip</span>\n<span class=\"w\">    </span><span class=\"k\">pla</span><span class=\"w\">                         </span><span class=\"c1\">;restore from stack</span>\n<span class=\"w\">    </span><span class=\"k\">iny</span><span class=\"w\">                         </span><span class=\"c1\">;increase y offset</span>\n<span class=\"w\">    </span><span class=\"k\">cpy</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">                      </span><span class=\"c1\">;are we finished yet? </span>\n<span class=\"w\">    </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"kp\">.finish_line</span><span class=\"w\">            </span><span class=\"c1\">;(invaders are 5x5 so no point looking at remaning bits)</span>\n<span class=\"w\">    </span><span class=\"k\">lsr</span><span class=\"w\">                         </span><span class=\"c1\">;if no, then bit shift one right</span>\n<span class=\"w\">    </span><span class=\"k\">clc</span><span class=\"w\">                         </span><span class=\"c1\">;to process next bit, and loop</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"kp\">.loop</span>\n<span class=\"kp\">.finish_line</span>\n<span class=\"w\">    </span><span class=\"k\">dex</span><span class=\"w\">                         </span><span class=\"c1\">;move to next line if x still &gt; 0</span>\n<span class=\"w\">    </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"kp\">.finish</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">39</span><span class=\"w\">                     </span><span class=\"c1\">;add 39 to the video address </span>\n<span class=\"w\">    </span><span class=\"k\">adc</span><span class=\"w\"> </span><span class=\"mh\">$40</span><span class=\"w\">                     </span><span class=\"c1\">;which will move to the next row</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"o\">*+</span><span class=\"mi\">4</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$41</span>\n\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$3E</span><span class=\"w\">                     </span><span class=\"c1\">;add 1 to the invader address to</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"o\">*+</span><span class=\"mi\">4</span><span class=\"w\">                     </span><span class=\"c1\">;move to its next byte</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$3F</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"k\">clc</span><span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"kp\">.draw_line</span><span class=\"w\">              </span><span class=\"c1\">;loop</span>\n<span class=\"w\">    </span>\n<span class=\"kp\">.finish</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The indirect addressing is used nicely here, with the Y register effectively offseting the video location and acting as a counter at the same time, whilst X is used to count the rows. The rest of the stuff should be pretty self explanatory by now - the only new thing here is the slighly odd looking</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"k\">clc</span>\n<span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"kp\">.label</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>All this does is force a branch, so it is similar to <code>jmp</code> although my reading indicates it is better to use this style since it makes the code more re-locatable.</p>\n\n<h3 id=\"the-final-invader\">The Final Invader!</h3>\n\n<p>The final piece is to draw one massive invader composed of smaller invaders from the previous step across the whole screen.</p>\n\n<ul>\n <li>Choose an invader at random</li>\n <li>Process the bits as per the first algorithm</li>\n <li>For a set bit, store the desired video memory location and call the other algorithm</li>\n <li>Update the video memory to start at the next location</li>\n <li>Loop</li></ul>\n\n<p>Essentially this routine will seed the other one - the code that sets the video memory location of $0400 is removed from the previous routine, and instead the new routine sets this up before calling it. Because the first routine modifies those numbers, I have chosen to store the actual location in another zero-page address so that is easier to reason about in the top level routine. This isn&rsquo;t really necessary but it simplies the problem.</p>\n\n<p>Since the algorithm is mostly the same, I will just highlight a few of the different parts:</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kp\">.loop</span>\n<span class=\"w\">    </span><span class=\"k\">pha</span><span class=\"w\">                         </span><span class=\"c1\">;preserve on stack</span>\n<span class=\"w\">    </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\">                      </span><span class=\"c1\">;check current bit for 1 or 0</span>\n<span class=\"w\">    </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"kp\">.skip</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$44</span><span class=\"w\">                     </span><span class=\"c1\">;copy video memory location</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$40</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"mh\">$45</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$41</span>\n<span class=\"w\">    </span><span class=\"k\">txa</span><span class=\"w\">                         </span><span class=\"c1\">; preserve registers</span>\n<span class=\"w\">    </span><span class=\"k\">pha</span>\n<span class=\"w\">    </span><span class=\"k\">tya</span>\n<span class=\"w\">    </span><span class=\"k\">pha</span>\n<span class=\"w\">    </span><span class=\"k\">jsr</span><span class=\"w\"> </span><span class=\"n\">draw_invader</span><span class=\"w\">            </span><span class=\"c1\">; call other routine</span>\n<span class=\"w\">    </span><span class=\"k\">pla</span><span class=\"w\">                         </span><span class=\"c1\">; restore registers</span>\n<span class=\"w\">    </span><span class=\"k\">tay</span>\n<span class=\"w\">    </span><span class=\"k\">pla</span>\n<span class=\"w\">    </span><span class=\"k\">tax</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice here we copy the data from the addresses $44 and $45 into $40 and $41 where the <code>draw_invader</code> routine reads from. Then, since both routines use the X and Y registers, we have to push the current contents onto the stack so that they can be recovered after the subroutine has executed. Then we simply generate a random invader number, call the other routine and then restore the status of the registers from the stack.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kp\">.skip</span>\n<span class=\"w\">    </span><span class=\"k\">iny</span><span class=\"w\">                         </span><span class=\"c1\">;increase y offset</span>\n<span class=\"w\">    </span><span class=\"k\">cpy</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">                      </span><span class=\"c1\">;are we finished yet? </span>\n<span class=\"w\">    </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"kp\">.finish_line</span><span class=\"w\">            </span><span class=\"c1\">;(invaders are 5x5 so no point looking at remaning bits)</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"w\">                      </span><span class=\"c1\">;update video memory location</span>\n<span class=\"w\">    </span><span class=\"k\">adc</span><span class=\"w\"> </span><span class=\"mh\">$44</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$44</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"o\">*+</span><span class=\"mi\">4</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$45</span>\n<span class=\"w\">    </span><span class=\"k\">pla</span><span class=\"w\">                         </span><span class=\"c1\">;restore from stack</span>\n<span class=\"w\">    </span><span class=\"k\">lsr</span><span class=\"w\">                         </span><span class=\"c1\">;if no then shift one right</span>\n<span class=\"w\">    </span><span class=\"k\">clc</span><span class=\"w\">                         </span><span class=\"c1\">;to process next bit and loop</span>\n<span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"kp\">.loop</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Once again, this is mostly the same as before, except now we update the video address by 8 bytes to move into the next &ldquo;mega pixel&rdquo; or &ldquo;grid location&rdquo;.</p>\n\n<div class=\"brush: ca65\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kp\">.finish_line</span>\n<span class=\"w\">    </span><span class=\"k\">pla</span>\n<span class=\"w\">    </span><span class=\"k\">dex</span>\n<span class=\"w\">    </span><span class=\"k\">beq</span><span class=\"w\"> </span><span class=\"kp\">.finish</span>\n<span class=\"w\">    </span><span class=\"k\">lda</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">167</span><span class=\"w\">        </span><span class=\"c1\">;update video memory location to next row</span>\n<span class=\"w\">    </span><span class=\"k\">adc</span><span class=\"w\"> </span><span class=\"mh\">$44</span>\n<span class=\"w\">    </span><span class=\"k\">sta</span><span class=\"w\"> </span><span class=\"mh\">$44</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"o\">*+</span><span class=\"mi\">4</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$45</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$42</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"o\">*+</span><span class=\"mi\">4</span>\n<span class=\"w\">    </span><span class=\"k\">inc</span><span class=\"w\"> </span><span class=\"mh\">$43</span>\n<span class=\"w\">    </span><span class=\"k\">clc</span>\n<span class=\"w\">    </span><span class=\"k\">bcc</span><span class=\"w\"> </span><span class=\"kp\">.draw_line</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Again, very similar to before, and now we also move down 5 rows and back to column zero. This is what the magic number 167 is doing.</p>\n\n<p>And as if by magic!</p>\n\n<div class=\"figure\"><img src=\"../../../../../img/invaders/9.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>You might be thinking, Ross! Why are you repeating yourself in the code!! And that would be a good question. Unlike higher level languages, quite often it doesn&rsquo;t pay to re-use code in asm. It is always slower for a start, since you are introducing more subroutine calls, more stack usage and so forth. Of course I have no doubts that there are a million other ways to write this, in various degrees of cleverness, but all in all I am happy that I got it to work, and the result is quite pleasing! I have learnt quite a lot from this mini-project, and have bunch of ideas on what to do next :)</p>")) ((? . 6) f post (u . "Visualizing LINQ with GraphViz") (? . 6) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/01/17/visualizing-linq-with-graphviz/index.html" . windows) (u . "/blog\\2014\\01\\17\\visualizing-linq-with-graphviz/") (u . "2014-01-17T21:01:00") (? . 5) (? . 4) (c (u . "fsharp") c (u . "sqlprovider") c (u . "type providers")) (u . "\n<p>After my talk last night, several people expressed an interest in the script I was using to draw the LINQ expression trees. I have uploaded<a href=\"https://github.com/pezipink/SQLProvider/blob/master/src/scripts/GraphViz.fsx\">here on github</a>.</p>\n\n<p>This is just a script I use in development. It doesn't visualize every node by a long shot, and does a fair bit of name replacing to make some of the very long generic type names readable. You will need <a href=\"http://www.graphviz.org/\">GraphViz</a>installed to use this script. You might need to point the function that does the generation at the location where you've installed it.</p>\n\n<p>You can use it like this from FSI :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"s\">\"GraphViz.fsx\"</span>\n<span class=\"nn\">FSharp</span><span class=\"p\">.</span><span class=\"nn\">Data</span><span class=\"p\">.</span><span class=\"nn\">Sql</span><span class=\"p\">.</span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">QueryEvents</span><span class=\"p\">.</span><span class=\"n\">LinqExpressionEvent</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Observable</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"nn\">GraphViz</span><span class=\"p\">.</span><span class=\"n\">toGraph</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now, whenever you evaluate a query expression, it will pop up a bunch of images with whatever your machine uses to view SVG files, like this rather lovely one below. Have fun.</p>\n\n<p><em>edit; this will spam your temp directory with svg files!</em></p>\n\n<p></p>\n\n<p><img src=\"../../../../../img/old/Picture1.gif\" alt=\"\" /></p>") #t (u . "\n<p>After my talk last night, several people expressed an interest in the script I was using to draw the LINQ expression trees. I have uploaded<a href=\"https://github.com/pezipink/SQLProvider/blob/master/src/scripts/GraphViz.fsx\">here on github</a>.</p>\n\n<p>This is just a script I use in development. It doesn't visualize every node by a long shot, and does a fair bit of name replacing to make some of the very long generic type names readable. You will need <a href=\"http://www.graphviz.org/\">GraphViz</a>installed to use this script. You might need to point the function that does the generation at the location where you've installed it.</p>\n\n<p>You can use it like this from FSI :</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"s\">\"GraphViz.fsx\"</span>\n<span class=\"nn\">FSharp</span><span class=\"p\">.</span><span class=\"nn\">Data</span><span class=\"p\">.</span><span class=\"nn\">Sql</span><span class=\"p\">.</span><span class=\"nn\">Common</span><span class=\"p\">.</span><span class=\"nn\">QueryEvents</span><span class=\"p\">.</span><span class=\"n\">LinqExpressionEvent</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nn\">Observable</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"nn\">GraphViz</span><span class=\"p\">.</span><span class=\"n\">toGraph</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now, whenever you evaluate a query expression, it will pop up a bunch of images with whatever your machine uses to view SVG files, like this rather lovely one below. Have fun.</p>\n\n<p><em>edit; this will spam your temp directory with svg files!</em></p>\n\n<p></p>\n\n<p><img src=\"../../../../../img/old/Picture1.gif\" alt=\"\" /></p>\n<!-- more-->")) ((? . 31) f post (u . "Programming in Racket #1") (? . 31) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2017/01/14/programming-in-racket-1/index.html" . windows) (u . "/blog\\2017\\01\\14\\programming-in-racket-1/") (u . "2017-01-14T02:48:06") (? . 19) (? . 30) (c (u . "racket")) (u . "\n<p>Over the last few days I have been learning <a href=\"http://docs.racket-lang.org/index.html\">Racket</a>, a language derived from Scheme.&#160; The main selling point of Racket is its <a href=\"http://docs.racket-lang.org/reference/Macros.html\">extensive macro system</a> that lets you do everything from the simplest macros through to redefining the entire language (yes you can even get rid of the parens!).&#160; It is a programming language programming language. In fact, Racket is more of a customisable programming language infrastructure / engine with a default language on top of it.</p>") #t (u . "\n<p>Over the last few days I have been learning <a href=\"http://docs.racket-lang.org/index.html\">Racket</a>, a language derived from Scheme.&#160; The main selling point of Racket is its <a href=\"http://docs.racket-lang.org/reference/Macros.html\">extensive macro system</a> that lets you do everything from the simplest macros through to redefining the entire language (yes you can even get rid of the parens!).&#160; It is a programming language programming language. In fact, Racket is more of a customisable programming language infrastructure / engine with a default language on top of it.</p>\n<!-- more-->\n\n<p>Now, we won’t get to anything too crazy in this post since, well, the mental stuff I have wrote I’d not be happy to show you yet (there will be a little macro though!), but I have been working on the <a href=\"http://adventofcode.com/2015\">Advent of Code 2015</a> problems with an eye for attempting to discover the various language features and interesting things it has to offer - rather than the primary objective being to solve the Advent of Code puzzles. Here is some of what I have learnt so far.</p>\n\n<p> \n <h2>Day 1</h2> \n <p>Day 1 of AOC has us help tracking Santa’s position in a lift.&#160; This is seemingly a job for our good old friend fold.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2017_56_45-emacs@DESKTOP-2DMNUOL_1.png\"><img title=\"2017-01-13 17_56_45-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 17_56_45-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2017_56_45-emacs@DESKTOP-2DMNUOL_thumb_1.png\" width=\"533\" height=\"65\" /></a></p> \n <p>As you would imagine, Racket has all the usual functional programming higher-order functions, but it also contains a boat-load of “<a href=\"http://docs.racket-lang.org/reference/for.html\">iterators/comprehensions</a>” (such as this<em>for/fold</em>) that allow us perform map, fold and friends in a variety of forms, using a shorthand notation.&#160; These can be used to directly create the various in-built data types, such as sets, vectors, lists and dictionaries.</p> \n <p>Nothing too crazy going on here, we fold over each character in each string, and create a single accumulator<em>level</em>which is increased if the current character is a (, otherwise it is decreased.</p> \n <p>Part 2 of this puzzle has us perform the same thing, but the requirement is to find out at what index into the sequence that Santa first hits floor –1</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2018_03_38-emacs@DESKTOP-2DMNUOL_2.png\"><img title=\"2017-01-13 18_03_38-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 18_03_38-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2018_03_38-emacs@DESKTOP-2DMNUOL_thumb_2.png\" width=\"486\" height=\"149\" /></a></p> \n <p>To achieve this, Racket allows us to simply add an additional accumulator to the fold, in this case called<em>index</em>which is increased on each iteration.&#160; An optional break clause is added (nice!) which causes the fold to terminate early, as soon as the level is equal to minus one, leaving the index at the required value.</p> \n <p>In this case we must always return 2 accumulator values.&#160; Unlike most languages,<a href=\"http://docs.racket-lang.org/reference/eval-model.html?q=multiple%20values#%28part._values-model%29\">Racket allows you to return more than one value</a> (note this is different from something like F# which uses Tuples, it is still only returning a single value!).&#160; One of the ways to achieve this is using the<em>values</em> function, as demonstrated here.</p> \n <h2>Day 2</h2> \n <p>For day two, those Elves need some help working out how much wrapping paper they need, and then how much ribbon they need in the second part of the puzzle.&#160; Here we can try out some basic pattern matching, which comes in a<a href=\"http://docs.racket-lang.org/reference/match.html?q=match#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29\">million different forms</a>, all which can be nested in each other.&#160;</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2018_35_13-emacs@DESKTOP-2DMNUOL_1.png\"><img title=\"2017-01-13 18_35_13-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 18_35_13-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2018_35_13-emacs@DESKTOP-2DMNUOL_thumb_1.png\" width=\"426\" height=\"320\" /></a></p> \n <p>The<em><a href=\"http://docs.racket-lang.org/reference/match.html?q=match#%28form._%28%28lib._racket%2Fmatch..rkt%29._match-let%2A%29%29\">match-let*</a></em> construct here is used to introduce local function bindings that can optionally use the vast variety of pattern matching functionality from<em>racket/match</em>.&#160; Each expression on the right hand side is matched with the pattern on the left.&#160; You can see the first binding introduced in the function<em>dimensions</em> matches on the parameter<em>args</em> using the<em>list</em>pattern.&#160; My pattern expects three elements in the list to be present and will bind them to<em>l</em>,<em>w</em>and h respectively.</p> \n <p>The subsequent bindings are not using any special pattern matching, in the normal format for<em>let</em>, simply binding to the results of some mathematical functions using the previously bound values.&#160; Note that this is possible because we are using the *’d version of<em>match-let (match-let*)</em>, else you do not have access to values that have been bound during the same expression.</p> \n <p>The<em>ribbon</em> function is very similar, however since we need only the minimum two elements of the list to determine the length, the<em>args</em> list is sorted as part of the matching expression input.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2018_46_31-emacs@DESKTOP-2DMNUOL_1.png\"><img title=\"2017-01-13 18_46_31-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 18_46_31-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2018_46_31-emacs@DESKTOP-2DMNUOL_thumb_1.png\" width=\"542\" height=\"260\" /></a></p> \n <p>So far, without writing any macros, this is the closest I have managed to get to F#s’s pipeline operator.&#160; The higher-order function<em>day2</em> uses the<em>let*</em> function to introduce a series of bindings that shadow each other, using the data introduced from the previous one.&#160; You will notice the second line uses a lambda function, the lambda symbol is optional and can equally be the much longer<em>lambda</em> keyword.</p> \n <p>The second call to map has to explicitly call<em>curry</em> in order to partially apply the inner<em>map</em> function with the function<em>string-&gt;number</em>.&#160; Unlike F#, vanilla Racket does not have implicit partial application (for good reasons).&#160;</p> \n <h2>Day 3</h2> \n <p>Santa needs our help to guide him around delivering presents.&#160; At the end, we need to provide the amount of distinct houses we have delivered presents to.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2020_12_11-emacs@DESKTOP-2DMNUOL_1.png\"><img title=\"2017-01-13 20_12_11-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 20_12_11-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2020_12_11-emacs@DESKTOP-2DMNUOL_thumb_1.png\" width=\"335\" height=\"187\" /></a></p> \n <p>Racket provides us with a fundamental<em><a href=\"http://docs.racket-lang.org/reference/structures.html?q=match\">struct</a></em>type. It supports structural equality out of the box and also pattern matching support, as you would expect, alongside a ton of other stuff I am not going to talk about here.&#160; The intend of this code should be fairly obvious, and also shows the use of the standard<em>match</em> construct that is used as a normal expression.&#160; Here I have used<em>match-let</em> first to de-structure the point into its<em>x</em> and<em>y</em> values which are then used in the subsequence match to create a new point.</p> \n <p>The next part is more interesting.&#160; Since we only need to count each distinct location a present is delivered to, this sounds like a job for a<em>set</em> which Racket provides as a fundamental type from within<em><a href=\"http://docs.racket-lang.org/reference/sets.html\">racket/set</a></em>.&#160; Like F#, attempting to add something to the set that already exists has no effect, and is perfect for what is required here.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2020_26_49-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 20_26_49-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 20_26_49-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2020_26_49-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"555\" height=\"192\" /></a></p> \n <p>A few new things introduced here, including something I omitted from the code above in part 2 of day 1.&#160;<em><a href=\"http://docs.racket-lang.org/reference/let.html?q=let-values#%28form._%28%28quote._~23~25kernel%29._let-values%29%29\">let-values</a></em> is similar to<em>let</em>in that it introduces local bindings, with the difference being that it is especially designed to receive<em><a href=\"http://docs.racket-lang.org/reference/eval-model.html?q=multiple%20values#%28part._values-model%29\">multiple values</a></em> that I mentioned earlier.&#160; Since the fold here uses two accumulators, it ultimately returns two values (as opposed to, say, a pair or a list) which are then bound to<em>c</em>and<em>v</em>for use within the following body of the<em>let</em>.&#160; This is a common pattern in Racket, with many functions having –<em>values</em> versions of them.</p> \n <p>The rest is fairly straight forward, we fold Santa and his visited locations through the instructions, and at the end return the count of the set.</p> \n <p>Part 2 is much more interesting, the arrival of RoboSanta means we need to keep track of two locations and alternate each instruction between Santa and RoboSanta.&#160; An initial obvious solution is to simply add an extra location accumulator, and a flag that flips between iterations to determine how moves next.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2020_34_55-emacs@DESKTOP-2DMNUOL_1.png\"><img title=\"2017-01-13 20_34_55-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 20_34_55-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2020_34_55-emacs@DESKTOP-2DMNUOL_thumb_1.png\" width=\"571\" height=\"261\" /></a></p> \n <p>However, I thought this would be a good opportunity to have a look at how Racket deals with<a href=\"http://docs.racket-lang.org/reference/sequences_streams.html\">streams</a>.&#160; I would like to eliminate the flag based logic and instead return successive pairs of the input stream so that Santa and RoboSanta can be updated in lock-step.&#160; It seems the<em>generator</em> is the tool for the job from<em><a href=\"http://docs.racket-lang.org/reference/Generators.html?q=generator#%28form._%28%28lib._racket%2Fgenerator..rkt%29._generator%29%29\">racket/generator</a></em>.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2021_14_25-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 21_14_25-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 21_14_25-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2021_14_25-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"273\" height=\"200\" /></a></p> \n <p>A few new things here. Firstly the special<em>generator</em> form will evaluate the body you give it, suspending after<em><a href=\"http://docs.racket-lang.org/reference/Generators.html?q=generator#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29\">yield</a></em> is called.&#160; In fact, this is basically a co-routine, something I will have to look more closely at later.&#160; Other new things introduced here are<em><a href=\"http://docs.racket-lang.org/reference/match.html?q=define%2Fmatch#%28form._%28%28lib._racket%2Fmatch..rkt%29._define%2Fmatch%29%29\">define/match</a></em>, which allows you do define a function that immediately matches on the parameters you give it.&#160; In this case, I use the<em>list-rest</em>pattern to extract the first two elements as<em>a</em>and<em>b</em> with the rest of the list as<em>tail</em>.&#160; The pair of<em>a</em>and<em>b</em>is then yielded via<em>cons</em> and the function is called recursively on the tail.</p> \n <p>The last wildcard pattern matches when the list runs out, and returns<em>(void).&#160;</em>I am not sure if this is totally necessary, but when consuming this sequence using the function<em><a href=\"http://docs.racket-lang.org/reference/sequences.html?q=in-producer#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-producer%29%29\">in-producer</a></em> it required you to give it an expression that determines when it should stop.&#160; Omitting the data access code for brevity, the reformed version of the fold looks like this</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2021_22_53-emacs@DESKTOP-2DMNUOL_1.png\"><img title=\"2017-01-13 21_22_53-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 21_22_53-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2021_22_53-emacs@DESKTOP-2DMNUOL_thumb_1.png\" width=\"522\" height=\"261\" /></a></p> \n <p>Here<em>match-let*</em> is used again to simulate a pipeline of data, first extracting and then moving Santa and RoboSanta, updating the visited location set and finally returning the accumulated data. It is about the same amount of code as before, but perhaps the generator will come in handy later!</p> \n <h2>Day 4</h2> \n <p>I am going to skip this since it was very easy and I didn’t learn much about the language other than how to create md5 hashes and bit masking.</p> \n <h2>Day 5</h2> \n <p>Santa is in a pickle working out which strings have been naughty and nice.&#160; This problem obviously screams “regex!” but, frankly, regex can get in the sea. No one ever had fun writing regex. Instead I am going to do it manually, and as an additional target try to perform only one pass over each string and break processing early if a bad string is detected.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2021_59_44-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 21_59_44-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 21_59_44-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2021_59_44-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"388\" height=\"239\" /></a></p> \n <p><em>define/match</em> is back on the scene to create some functions that match on multiple values (rather than lists).&#160; Nothing new in the first function, however the second shows a new pattern<em>or</em> being used inside the pattern match.&#160; It could equally have been written with one pattern for each letter, but this is a tiny glimpse into the power of Racket’s pattern matching (which of course I know hardly any of yet)</p> \n <p>I decided to track if a bad pair has been detected, count the amount of vowels and count the amount of occurrences for letters that appear twice.&#160; My<em>by-pairs</em> generator is no good for this, needing something more like F#’s<em>Seq.windowed</em>, I decided to simply pass along the previous character as another accumulator.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2022_07_29-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 22_07_29-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 22_07_29-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2022_07_29-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"455\" height=\"336\" /></a></p> \n <p>A couple of interesting things here.&#160; If at any point<em>is-bad-pair?</em> returns true, the fold stops on the next iteration due to<em>break bad?</em> clause. (Breaking Bad!) Lastly the perhaps slightly mysterious looking<em><a href=\"http://docs.racket-lang.org/reference/match.html?q=match-*#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%2A%29%29\">match*</a></em> at the bottom uses some new pattern matching forms.&#160; ? allows you to pass a function which will be called on the respective value and only match if it returns true.&#160; In this case I have inlined a lambda that matches if there are at least three vowels.&#160; The last case uses the<em>not</em>pattern to ensure at least one letter appeared twice.</p> \n <p>Part two is much more sinister, and took me quite some time to come up with a nicer solution for it that didn’t have to do multiple or n2 iterations on the data.&#160; Mostly because I had read the problem incorrectly, several times. The first part is easy, and will introduce another matching concept.&#160; The string must have at least one occurrence of the same letter, either side of any letter.&#160;</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2022_15_28-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 22_15_28-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 22_15_28-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2022_15_28-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"446\" height=\"73\" /></a></p> \n <p>In Racket, if you use the same identifier to bind the results of patterns to, like I have done here with<em>a,</em>this means<em>they must be equal</em>. Otherwise it wouldn’t make any sense, would it?&#160; In this case, it is simple to see if the same letter exists on both sides of some other letter. Very nice!</p> \n <p>The second part is trickier.&#160; The requirement is that the string must have at least two instances of the same pair of letters, but not where they overlap.&#160; So “jkjk” is ok, “aaaa” is ok, but “aaa” is not. To fulfil this we can examine the next 3 characters in the string.&#160; If they are all the same, we can add a pair of them to our “seen pairs” set, and then continue processing recursively,<em>skipping</em> the second character, which is critical to the algorithm skipping overlapping pairs.&#160; All other cases of pairs are just added to the set.&#160; In all cases, before adding to the set, we can check if the pair already exists, if it does then the condition is satisfied and the process can prematurely end.&#160; The first version looked like this</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2022_23_12-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 22_23_12-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 22_23_12-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2022_23_12-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"451\" height=\"260\" /></a></p> \n <p>This should all be familiar by now.&#160; Again, using the rather nifty matching allows us to specify the case where 3 identifiers are the same, solves this with ease.&#160; The thing I don’t like about this is the repetition of the code that checks if a pair s in a set, then recursively calls the routine again, adding to the set if not.&#160; This code is basically identical in each case, other than the pair construction.&#160; You could try and create a local function to help with this, but there is a better way.</p> \n <h2>Macros</h2> \n <p>The solution is to introduce a new piece of syntax that can write the repetitive stuff for us.&#160; Like everything else in Racket,<a href=\"http://docs.racket-lang.org/reference/Macros.html?q=match-*\">macros</a> come in a million different forms, and are (or can be) lexically scoped.&#160; I am going to use one of the many short-hand ways of writing a small macro,<em><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html?q=define-syntax-rule#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></em> and have it scoped inside the<em>au</em>x<em></em>function.</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2022_29_16-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 22_29_16-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 22_29_16-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2022_29_16-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"461\" height=\"80\" /></a></p> \n <p>This very simple form defines a macro called<em>step</em>.&#160; It expects two expressions as inputs.&#160; Unlike a normal function, these are compile time constructs, and the input expressions here are<em>the program itself</em> rather than data at run time.&#160; The following body defines a syntax template which the macro expander will use to replace the call site.&#160; Here I have simply wrote the same repetitive code, substituting the two bits of program I have passed in where applicable.&#160; Now the function can be re-written as follows</p> \n <p><a href=\"http://www.pinksquirrellabs.com/img/old/2017-01-13%2022_34_48-emacs@DESKTOP-2DMNUOL.png\"><img title=\"2017-01-13 22_34_48-emacs@DESKTOP-2DMNUOL\" style=\"margin: 8px 0px 12px; display: inline\" alt=\"2017-01-13 22_34_48-emacs@DESKTOP-2DMNUOL\" src=\"../../../../../img/old/2017-01-13%2022_34_48-emacs@DESKTOP-2DMNUOL_thumb.png\" width=\"449\" height=\"254\" /></a></p> \n <p>Beware here that the<em>define-syntax-rule</em> form can be a bit misleading with its ease of use. It is also very limiting and to do the really powerful stuff you will want to revert to monsters such as<em><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html?q=syntax-parse#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29\">syntax/parse</a></em> which provides comprehensive pattern matching capabilities for program structure and composition.</p> \n <h2>Conclusion</h2> \n <p>I am liking Racket after messing around with it for a few days.&#160; I did some crazy stuff not shown here with macros, and hopefully in following posts I will be able to cover more on building languages using the metaprogramming features Racket provides to do some cool (or completely ridiculous) things.</p></p>")) ((? . 43) f post (u . "The North Pole Type Provider: Escape from Santa’s Grotto!") (? . 43) 1745196749 (p+ #"C:\\repos\\pezipink.github.io\\blog/2014/12/24/the-north-pole-type-provider-escape-from-santa-s-grotto/index.html" . windows) (u . "/blog\\2014\\12\\24\\the-north-pole-type-provider-escape-from-santa-s-grotto/") (u . "2014-12-24T02:41:00") (? . 7) (? . 42) (c (u . "fsharp") c (u . "type providers")) (u . "\n<p><em>This post is part of the <a href=\"https://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/\">F# advent calendar</a>, which is filled with all sorts of other cool blog posts, be sure to check it out. Thanks to <a href=\"https://twitter.com/sergey_tihon\">Sergey Tihon</a> for organising!</em></p>\n\n<h2>It&rsquo;s Christmas!</h2>\n\n<p>Happy Christmas everyone! I have the honour of the Christmas Day F# advent calendar post</p>\n\n<div class=\"embed-tweet\">\n <blockquote align=\"center\" class=\"twitter-tweet\">\n  <p dir=\"ltr\" lang=\"en\"><a href=\"https://twitter.com/pezi_pink?ref_src=twsrc%5Etfw\">@pezi_pink</a> <a href=\"https://twitter.com/sergey_tihon?ref_src=twsrc%5Etfw\">@sergey_tihon</a> <a href=\"https://twitter.com/rickasaurus?ref_src=twsrc%5Etfw\">@rickasaurus</a> Oh crap! <a href=\"https://twitter.com/hashtag/FsAdvent?src=hash&amp;ref_src=twsrc%5Etfw\">#FsAdvent</a> without <a href=\"https://twitter.com/hashtag/FsAdvent?src=hash&amp;ref_src=twsrc%5Etfw\">#FsAdvent</a> silly type provider? No way! It should run until 25 December :-)</p>&mdash; Tomas Petricek (find me on BlueSky) (@tomaspetricek) <a href=\"https://twitter.com/tomaspetricek/status/536992891949035520?ref_src=twsrc%5Etfw\">November 24, 2014</a></blockquote>\n\n <script async=\"async\" charset=\"utf-8\" src=\"https://platform.twitter.com/widgets.js\"></script>\n\n</div>\n\n<p>Thanks Tomas, ha!. I had a whole bunch of different ideas, and typically, I decided to choose the largest, most complicated one. Because of this, there is a <strong>lot</strong>of code written in just a couple of evenings. It is for the most part, badly designed, horribly written, nowhere near finished and should not be used as an example on how to write anything approaching nice F# code! /disclaimer</p>") #t (u . "\n<p><em>This post is part of the <a href=\"https://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/\">F# advent calendar</a>, which is filled with all sorts of other cool blog posts, be sure to check it out. Thanks to <a href=\"https://twitter.com/sergey_tihon\">Sergey Tihon</a> for organising!</em></p>\n\n<h2>It&rsquo;s Christmas!</h2>\n\n<p>Happy Christmas everyone! I have the honour of the Christmas Day F# advent calendar post</p>\n\n<div class=\"embed-tweet\">\n <blockquote align=\"center\" class=\"twitter-tweet\">\n  <p dir=\"ltr\" lang=\"en\"><a href=\"https://twitter.com/pezi_pink?ref_src=twsrc%5Etfw\">@pezi_pink</a> <a href=\"https://twitter.com/sergey_tihon?ref_src=twsrc%5Etfw\">@sergey_tihon</a> <a href=\"https://twitter.com/rickasaurus?ref_src=twsrc%5Etfw\">@rickasaurus</a> Oh crap! <a href=\"https://twitter.com/hashtag/FsAdvent?src=hash&amp;ref_src=twsrc%5Etfw\">#FsAdvent</a> without <a href=\"https://twitter.com/hashtag/FsAdvent?src=hash&amp;ref_src=twsrc%5Etfw\">#FsAdvent</a> silly type provider? No way! It should run until 25 December :-)</p>&mdash; Tomas Petricek (find me on BlueSky) (@tomaspetricek) <a href=\"https://twitter.com/tomaspetricek/status/536992891949035520?ref_src=twsrc%5Etfw\">November 24, 2014</a></blockquote>\n\n <script async=\"async\" charset=\"utf-8\" src=\"https://platform.twitter.com/widgets.js\"></script>\n\n</div>\n\n<p>Thanks Tomas, ha!. I had a whole bunch of different ideas, and typically, I decided to choose the largest, most complicated one. Because of this, there is a <strong>lot</strong>of code written in just a couple of evenings. It is for the most part, badly designed, horribly written, nowhere near finished and should not be used as an example on how to write anything approaching nice F# code! /disclaimer</p>\n<!-- more-->\n\n<h2>Some Background</h2>\n\n<p>If you know me at all you will know that I tend to write lots of crazy type providers. This will, of course, be no exception. In fact, even though I wrote this in just a couple of evenings, it&rsquo;s probably the most complex ridiculous TP to date. To achieve this, I have used my <a href=\"http://pinksquirrellabs.com/post/2014/05/01/BASIC%E2%80%99s-50th-Anniversary-%E2%80%A6-and-more-crazy-F-type-providers!.aspx\">Interactive Provider</a> which is basically a type provider abstraction that lets you create crazy type providers without writing any provided types code at all! Rejoice.</p>\n\n<p>The TP is a game, which is based on the legendary circa 1980~ game <em><a href=\"http://en.wikipedia.org/wiki/Rogue_%28video_game%29\">Rogue</a>.</em> I realise that many people will not know about Rogue (although the term <em><a href=\"http://en.wikipedia.org/wiki/Roguelike\">Roguelike</a></em>is used a lot more these days) so I will explain a few bits that characterise a roguelike game</p>\n\n<ul>\n <li>There are no graphics. The character is typically thrown into a dungeon which is rendered using ASCII characters only.</li>\n <li>They are procedurally generated. Not just the dungeons themselves &ndash; a red potion in one game will be very different to your next.</li>\n <li>They are <em>hard</em>. Although there is an end, usually you just see how far you can get before you die</li>\n <li>They have <em>permadeath</em>. When you die, that&rsquo;s it &ndash; start over from the beginning</li>\n <li>They are typically very complex. Modern roguelikes are <a href=\"http://www.nethack.org/\">epic works of engineering</a> with vast amounts of crazy stuff you can do, cause, and interact with, often in strange and fascinating ways.</li></ul>\n\n<h2>Escape from Santa&rsquo;s Grotto!</h2>\n\n<p>So, Christmas Eve is finally over and Santa plus crew have been celebrating a bit too much in the grotto / workshop. One things leads to another, and everyone is smashed on all the sherry picked up from the previous night. Santa wakes up at the bottom of the grotto, hungover, and unfortunately discovers that most the Reindeer and Elves are either still on the sherries or have fallen asleep drunk. Now, everyone knows drunk Reindeer and Elves are incredibly violent, even to Santa. Can you help him navigate his way up through 5 levels of the grotto?</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_14.png\"><img style=\"display: inline; border-width: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_14.png\" alt=\"image\" width=\"965\" height=\"730\" border=\"0\" /></a></p>\n\n<p>Above shows a typical example of a starting position. <em><strong>Important note!</strong>For this to work you <strong>MUST</strong> use a <strong>fixed-width font</strong> for your editor tooltips! I recommend Consolas 10-12 (anyone would think type providers were not designed to run games!)</em></p>\n\n<p>Here is a list of the possible characters and what they depict in the dungeon</p>\n\n<ul>\n <li><strong>@</strong>This is Santa, the player</li>\n <li><strong>=</strong>Horizontal wall</li>\n <li>| Vertical wall</li>\n <li><strong>#</strong> Corridors that connect rooms</li>\n <li><strong>.</strong> Floor</li>\n <li><strong>/</strong> Open door</li>\n <li><strong>+</strong> Closed door</li>\n <li><strong>*</strong> Piles of presents</li>\n <li><strong>%</strong> Carrots of various types</li>\n <li><strong>!</strong> Mince pies of various types</li>\n <li><strong>E</strong> Elf</li>\n <li><strong>R</strong> Reindeer</li>\n <li><strong>&lt;</strong> Stairs leading downwards</li>\n <li><strong>&gt;</strong> Stairs leading upwards</li></ul>\n\n<p>As the game progresses, you gain experience by killing hostile elves / reindeer and will level up, which increases your maximum hit points, makes you hit harder and more often. Santa will heal over time, but he also gets hungry and must eat. Perhaps you can find some other items that can heal you?</p>\n\n<p>A typical full level map might look something like this</p>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_15.png\"><img style=\"display: inline; border-width: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_15.png\" alt=\"image\" width=\"608\" height=\"626\" border=\"0\" /></a></p>\n\n<p>Notice you cannot see any items or monsters that are not in Santa&rsquo;s field of view (FOV). The FOV algorithm is different in corridors to when you are in rooms, and it is largely terrible due to time constraints, but it still works ok :) Each turn, you are presented with a list of properties in intellisense that represent the available actions for you to perform. Some of these require further input in the form of another list of properties. The available actions are as follows.</p>\n\n<ul>\n <li>Movement. Represented as N, NW, W, etc. This will move you one tile in that direction, if possible</li>\n <li>Pickup. This will take an item at your feet and put it in your inventory. <em>Note: you will see in the status at the bottom of the screen when you are standing on something you can pick up</em></li>\n <li>Use Item. This will present you with a list of things in your inventory which you can use. Only trial and error will tell you what a Blue mince pie does, be careful!</li>\n <li>Drop Item. You can drop things. You might notice that Reindeer and Elves sometimes eat stuff they stand on. Perhaps this could be useful?</li>\n <li>Open / Close. You will be asked to pick a direction, at which point the door (if it exists) will be opened / closed. Note that the monsters cannot open doors!</li>\n <li>Wait . Waste a turn doing nothing. Santa gradually heals over time, be he also starves to death if you don&rsquo;t keep him fed!</li>\n <li>Climb. This will take you to the next or previous level if you are standing on some stairs.</li></ul>\n\n<h2>Strategy</h2>\n\n<ul>\n <li>Roguelikes are risk management games. Often a lot of chance is involved. Food should be a top priority as lack of that will kill you off given enough time, no matter what. To this end you should try to make sure that the monsters do not eat any food lying around on the floor by ensuring they don't walk on those tiles.</li>\n <li>Similarly, eating mince pies is a game of chance, you could get lucky, or it might go horribly wrong. In any case, once you know what a specific colour pie does, you will know all other pies of that colour do the same thing.</li>\n <li>Another way to identify mince pies is to drop them in the path of monsters and see what happens to them if they decide to eat it.</li>\n <li>Use doors to your advantage - monsters cannot open them.</li>\n <li>Sometimes you will be able to sneak past monsters without waking them - you must balance this with fighting and gaining experience, as the monsters will get tougher in each level.</li>\n <li>Monsters cannot follow you up and down stairs.</li>\n <li>It is easy to cheat as this is a type provider, you can just undo your steps. Don&rsquo;t do that, you are only cheating yourself!</li>\n <li>There are (at time of writing!) 8(!!) different types of mince pie! be sure to experiment, there are some interesting ones such as this!</li></ul>\n\n<p><a href=\"http://www.pinksquirrellabs.com/img/old/image_16.png\"><img style=\"display: inline; border: 0px;\" title=\"image\" src=\"../../../../../img/old/image_thumb_16.png\" alt=\"image\" width=\"802\" height=\"743\" border=\"0\" /></a></p>\n\n<p>In order to attack something, simply move in its direction. At the end of your turn, any monsters that are awake will probably try and close in on, or attack you. You will see the results of this at the bottom of the screen in the status messages. If there are more than 2 status messages, you will be presented with a single property named &ldquo;More&rdquo; which will continue to cycle though the messages until they are exhausted. I didn't have time to write anything except very rudimentary AI so they are pretty dumb and you should be able to get them stuck on each other, in corridors, and all sorts. Actually! I have changed my mind. They are all still drunk, that is why their path finding is practically non-existent, and not because I had no time to do it!</p>\n\n<h2>Some final notes!</h2>\n\n<p>Well, I must admit I was furiously coding away just to get this to work at all. There are still some bugs in it, and balance is way <em>way</em> off. Roguelikes usually have an element of luck but this one more so than normal :) I only managed to get a small portion of what I would have liked in, but it still is quite playable (albeit incredibly hard sometimes) and I am fairly sure it is the only roguelike type provider in existence!</p>\n\n<h2>To get it running</h2>\n\n<p>Head on over to my github, clone and build the <a href=\"https://github.com/pezipink/InteractiveProvider\">Interactive Provider</a>. The IP works by scanning assemblies in a given location to find types that implement <em>IInteractiveServer</em>which it then uses to provide the types. Because of this you will need to point the Interactive Provider to the location of the XMAS_2014.dll file, like so</p>\n\n<div class=\"brush: fsharp\">\n <div class=\"highlight\">\n  <table class=\"highlighttable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"o\">#</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"s\">@\"f:\\git\\InteractiveProvider\\InteractiveProvider\\bin\\Debug\\InteractiveProvider.dll\"</span>\n<span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">GamesType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nn\">PinkSquirrels</span><span class=\"p\">.</span><span class=\"nn\">Interactive</span><span class=\"p\">.</span><span class=\"n\">InteractiveProvider</span><span class=\"o\">&amp;</span><span class=\"n\">lt</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"s\">@\"F:\\git\\InteractiveProvider\\XMAS_2014\\bin\\Debug\\\"</span><span class=\"o\">&amp;</span><span class=\"n\">gt</span><span class=\"o\">;</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GamesType</span><span class=\"bp\">()</span><span class=\"w\"> </span>\n<span class=\"n\">games</span><span class=\"o\">.</span><span class=\"n\">``Start The North Pole``</span><span class=\"o\">.</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p></p>\n\n<p>Please have a go, and let me know if you beat by tweeting @pezi_pink and / or #fsharp over on twitter! If you manage to escape, be sure to let us know how many presents you managed to pick up on the way!</p>\n\n<p><strong>HO HO HO!</strong></p>"))))